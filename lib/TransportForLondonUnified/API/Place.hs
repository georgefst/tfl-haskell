{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.Place
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.Place where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Place

-- *** placeGet

-- | @GET \/Place\/{id}@
-- 
-- Gets the place with the given id.
-- 
placeGet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids
  -> TransportForLondonUnifiedRequest PlaceGet MimeNoContent [TflApiPresentationEntitiesPlace] accept
placeGet  _ (Id id) =
  _mkRequest "GET" ["/Place/",toPath id]

data PlaceGet  

-- | /Optional Param/ "includeChildren" - Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned
instance HasOptionalParam PlaceGet IncludeChildren where
  applyOptionalParam req (IncludeChildren xs) =
    req `setQuery` toQuery ("includeChildren", Just xs)
-- | @application/json@
instance Produces PlaceGet MimeJSON
-- | @text/json@
instance Produces PlaceGet MimeTextjson
-- | @application/xml@
instance Produces PlaceGet MimeXML
-- | @text/xml@
instance Produces PlaceGet MimeTextxml


-- *** placeGetAt

-- | @GET \/Place\/{type}\/At\/{Lat}\/{Lon}@
-- 
-- Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
-- 
placeGetAt 
  :: Accept accept -- ^ request accept ('MimeType')
  -> ParamType -- ^ "_type" -  The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
  -> LatText -- ^ "lat"
  -> LonText -- ^ "lon"
  -> LocationLat -- ^ "locationLat"
  -> LocationLon -- ^ "locationLon"
  -> TransportForLondonUnifiedRequest PlaceGetAt MimeNoContent SystemObject accept
placeGetAt  _ (ParamType _type) (LatText lat) (LonText lon) (LocationLat locationLat) (LocationLon locationLon) =
  _mkRequest "GET" ["/Place/",toPath _type,"/At/{Lat}/{Lon}"]
    `setQuery` toQuery ("lat", Just lat)
    `setQuery` toQuery ("lon", Just lon)
    `setQuery` toQuery ("location.lat", Just locationLat)
    `setQuery` toQuery ("location.lon", Just locationLon)

data PlaceGetAt  
-- | @application/json@
instance Produces PlaceGetAt MimeJSON
-- | @text/json@
instance Produces PlaceGetAt MimeTextjson
-- | @application/xml@
instance Produces PlaceGetAt MimeXML
-- | @text/xml@
instance Produces PlaceGetAt MimeTextxml


-- *** placeGetByGeo

-- | @GET \/Place@
-- 
-- Gets the places that lie within a geographic region. The geographic region of interest can either be specified              by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of              its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.              Optionally filters on type and can strip properties for a smaller payload.
-- 
placeGetByGeo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest PlaceGetByGeo MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
placeGetByGeo  _ =
  _mkRequest "GET" ["/Place"]

data PlaceGetByGeo  

-- | /Optional Param/ "radius" - The radius of the bounding circle in metres when only lat/lon are specified.
instance HasOptionalParam PlaceGetByGeo Radius where
  applyOptionalParam req (Radius xs) =
    req `setQuery` toQuery ("radius", Just xs)

-- | /Optional Param/ "categories" - An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)
instance HasOptionalParam PlaceGetByGeo Categories where
  applyOptionalParam req (Categories xs) =
    req `setQuery` toQueryColl MultiParamArray ("categories", Just xs)

-- | /Optional Param/ "includeChildren" - Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned
instance HasOptionalParam PlaceGetByGeo IncludeChildren where
  applyOptionalParam req (IncludeChildren xs) =
    req `setQuery` toQuery ("includeChildren", Just xs)

-- | /Optional Param/ "type" - Place types to filter on, or null to return all types
instance HasOptionalParam PlaceGetByGeo ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQueryColl MultiParamArray ("type", Just xs)

-- | /Optional Param/ "activeOnly" - An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
instance HasOptionalParam PlaceGetByGeo ActiveOnly where
  applyOptionalParam req (ActiveOnly xs) =
    req `setQuery` toQuery ("activeOnly", Just xs)

-- | /Optional Param/ "numberOfPlacesToReturn" - If specified, limits the number of returned places equal to the given value
instance HasOptionalParam PlaceGetByGeo NumberOfPlacesToReturn where
  applyOptionalParam req (NumberOfPlacesToReturn xs) =
    req `setQuery` toQuery ("numberOfPlacesToReturn", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoSwLat where
  applyOptionalParam req (PlaceGeoSwLat xs) =
    req `setQuery` toQuery ("placeGeo.swLat", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoSwLon where
  applyOptionalParam req (PlaceGeoSwLon xs) =
    req `setQuery` toQuery ("placeGeo.swLon", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoNeLat where
  applyOptionalParam req (PlaceGeoNeLat xs) =
    req `setQuery` toQuery ("placeGeo.neLat", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoNeLon where
  applyOptionalParam req (PlaceGeoNeLon xs) =
    req `setQuery` toQuery ("placeGeo.neLon", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoLat where
  applyOptionalParam req (PlaceGeoLat xs) =
    req `setQuery` toQuery ("placeGeo.lat", Just xs)
instance HasOptionalParam PlaceGetByGeo PlaceGeoLon where
  applyOptionalParam req (PlaceGeoLon xs) =
    req `setQuery` toQuery ("placeGeo.lon", Just xs)
-- | @application/json@
instance Produces PlaceGetByGeo MimeJSON
-- | @text/json@
instance Produces PlaceGetByGeo MimeTextjson
-- | @application/xml@
instance Produces PlaceGetByGeo MimeXML
-- | @text/xml@
instance Produces PlaceGetByGeo MimeTextxml


-- *** placeGetByType

-- | @GET \/Place\/Type\/{types}@
-- 
-- Gets all places of a given type
-- 
placeGetByType 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Types -- ^ "types" -  A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.
  -> TransportForLondonUnifiedRequest PlaceGetByType MimeNoContent [TflApiPresentationEntitiesPlace] accept
placeGetByType  _ (Types types) =
  _mkRequest "GET" ["/Place/Type/",toPath types]

data PlaceGetByType  

-- | /Optional Param/ "activeOnly" - An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
instance HasOptionalParam PlaceGetByType ActiveOnly where
  applyOptionalParam req (ActiveOnly xs) =
    req `setQuery` toQuery ("activeOnly", Just xs)
-- | @application/json@
instance Produces PlaceGetByType MimeJSON
-- | @text/json@
instance Produces PlaceGetByType MimeTextjson
-- | @application/xml@
instance Produces PlaceGetByType MimeXML
-- | @text/xml@
instance Produces PlaceGetByType MimeTextxml


-- *** placeGetOverlay

-- | @GET \/Place\/{type}\/overlay\/{z}\/{Lat}\/{Lon}\/{width}\/{height}@
-- 
-- Gets the place overlay for a given set of co-ordinates and a given width/height.
-- 
placeGetOverlay 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Z -- ^ "z" -  The zoom level
  -> ParamType -- ^ "_type" -  The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
  -> Width -- ^ "width" -  The width of the requested overlay.
  -> Height -- ^ "height" -  The height of the requested overlay.
  -> LatText -- ^ "lat"
  -> LonText -- ^ "lon"
  -> LocationLat -- ^ "locationLat"
  -> LocationLon -- ^ "locationLon"
  -> TransportForLondonUnifiedRequest PlaceGetOverlay MimeNoContent SystemObject accept
placeGetOverlay  _ (Z z) (ParamType _type) (Width width) (Height height) (LatText lat) (LonText lon) (LocationLat locationLat) (LocationLon locationLon) =
  _mkRequest "GET" ["/Place/",toPath _type,"/overlay/",toPath z,"/{Lat}/{Lon}/",toPath width,"/",toPath height]
    `setQuery` toQuery ("lat", Just lat)
    `setQuery` toQuery ("lon", Just lon)
    `setQuery` toQuery ("location.lat", Just locationLat)
    `setQuery` toQuery ("location.lon", Just locationLon)

data PlaceGetOverlay  
-- | @application/json@
instance Produces PlaceGetOverlay MimeJSON
-- | @text/json@
instance Produces PlaceGetOverlay MimeTextjson
-- | @application/xml@
instance Produces PlaceGetOverlay MimeXML
-- | @text/xml@
instance Produces PlaceGetOverlay MimeTextxml


-- *** placeGetStreetsByPostCode

-- | @GET \/Place\/Address\/Streets\/{Postcode}@
-- 
-- Gets the set of streets associated with a post code.
-- 
placeGetStreetsByPostCode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Postcode -- ^ "postcode"
  -> TransportForLondonUnifiedRequest PlaceGetStreetsByPostCode MimeNoContent SystemObject accept
placeGetStreetsByPostCode  _ (Postcode postcode) =
  _mkRequest "GET" ["/Place/Address/Streets/{Postcode}"]
    `setQuery` toQuery ("postcode", Just postcode)

data PlaceGetStreetsByPostCode  
instance HasOptionalParam PlaceGetStreetsByPostCode PostcodeInputPostcode where
  applyOptionalParam req (PostcodeInputPostcode xs) =
    req `setQuery` toQuery ("postcodeInput.postcode", Just xs)
-- | @application/json@
instance Produces PlaceGetStreetsByPostCode MimeJSON
-- | @text/json@
instance Produces PlaceGetStreetsByPostCode MimeTextjson
-- | @application/xml@
instance Produces PlaceGetStreetsByPostCode MimeXML
-- | @text/xml@
instance Produces PlaceGetStreetsByPostCode MimeTextxml


-- *** placeMetaCategories

-- | @GET \/Place\/Meta\/Categories@
-- 
-- Gets a list of all of the available place property categories and keys.
-- 
placeMetaCategories 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest PlaceMetaCategories MimeNoContent [TflApiPresentationEntitiesPlaceCategory] accept
placeMetaCategories  _ =
  _mkRequest "GET" ["/Place/Meta/Categories"]

data PlaceMetaCategories  
-- | @application/json@
instance Produces PlaceMetaCategories MimeJSON
-- | @text/json@
instance Produces PlaceMetaCategories MimeTextjson
-- | @application/xml@
instance Produces PlaceMetaCategories MimeXML
-- | @text/xml@
instance Produces PlaceMetaCategories MimeTextxml


-- *** placeMetaPlaceTypes

-- | @GET \/Place\/Meta\/PlaceTypes@
-- 
-- Gets a list of the available types of Place.
-- 
placeMetaPlaceTypes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest PlaceMetaPlaceTypes MimeNoContent [TflApiPresentationEntitiesPlaceCategory] accept
placeMetaPlaceTypes  _ =
  _mkRequest "GET" ["/Place/Meta/PlaceTypes"]

data PlaceMetaPlaceTypes  
-- | @application/json@
instance Produces PlaceMetaPlaceTypes MimeJSON
-- | @text/json@
instance Produces PlaceMetaPlaceTypes MimeTextjson
-- | @application/xml@
instance Produces PlaceMetaPlaceTypes MimeXML
-- | @text/xml@
instance Produces PlaceMetaPlaceTypes MimeTextxml


-- *** placeSearch

-- | @GET \/Place\/Search@
-- 
-- Gets all places that matches the given query
-- 
placeSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Name -- ^ "name" -  The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.
  -> TransportForLondonUnifiedRequest PlaceSearch MimeNoContent [TflApiPresentationEntitiesPlace] accept
placeSearch  _ (Name name) =
  _mkRequest "GET" ["/Place/Search"]
    `setQuery` toQuery ("name", Just name)

data PlaceSearch  

-- | /Optional Param/ "types" - A comma-separated list of the types to return. Max. approx 12 types.
instance HasOptionalParam PlaceSearch Types where
  applyOptionalParam req (Types xs) =
    req `setQuery` toQueryColl MultiParamArray ("types", Just xs)
-- | @application/json@
instance Produces PlaceSearch MimeJSON
-- | @text/json@
instance Produces PlaceSearch MimeTextjson
-- | @application/xml@
instance Produces PlaceSearch MimeXML
-- | @text/xml@
instance Produces PlaceSearch MimeTextxml

