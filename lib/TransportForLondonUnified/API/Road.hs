{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.Road
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.Road where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Road

-- *** roadDisruptedStreets

-- | @GET \/Road\/all\/Street\/Disruption@
-- 
-- Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.
-- 
roadDisruptedStreets 
  :: Accept accept -- ^ request accept ('MimeType')
  -> StartDateDateTime -- ^ "startDate" -  Optional, the start time to filter on.
  -> EndDateDateTime -- ^ "endDate" -  Optional, The end time to filter on.
  -> TransportForLondonUnifiedRequest RoadDisruptedStreets MimeNoContent SystemObject accept
roadDisruptedStreets  _ (StartDateDateTime startDate) (EndDateDateTime endDate) =
  _mkRequest "GET" ["/Road/all/Street/Disruption"]
    `setQuery` toQuery ("startDate", Just startDate)
    `setQuery` toQuery ("endDate", Just endDate)

data RoadDisruptedStreets  
-- | @application/json@
instance Produces RoadDisruptedStreets MimeJSON
-- | @text/json@
instance Produces RoadDisruptedStreets MimeTextjson
-- | @application/xml@
instance Produces RoadDisruptedStreets MimeXML
-- | @text/xml@
instance Produces RoadDisruptedStreets MimeTextxml


-- *** roadDisruption

-- | @GET \/Road\/{ids}\/Disruption@
-- 
-- Get active disruptions, filtered by road ids
-- 
roadDisruption 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  Comma-separated list of road identifiers e.g. \"A406, A2\" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
  -> TransportForLondonUnifiedRequest RoadDisruption MimeNoContent [TflApiPresentationEntitiesRoadDisruption] accept
roadDisruption  _ (Ids ids) =
  _mkRequest "GET" ["/Road/",toPath ids,"/Disruption"]

data RoadDisruption  

-- | /Optional Param/ "stripContent" - Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets
instance HasOptionalParam RoadDisruption StripContent where
  applyOptionalParam req (StripContent xs) =
    req `setQuery` toQuery ("stripContent", Just xs)

-- | /Optional Param/ "severities" - an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)
instance HasOptionalParam RoadDisruption Severities where
  applyOptionalParam req (Severities xs) =
    req `setQuery` toQueryColl MultiParamArray ("severities", Just xs)

-- | /Optional Param/ "categories" - an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)
instance HasOptionalParam RoadDisruption Categories where
  applyOptionalParam req (Categories xs) =
    req `setQuery` toQueryColl MultiParamArray ("categories", Just xs)

-- | /Optional Param/ "closures" - Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.
instance HasOptionalParam RoadDisruption Closures where
  applyOptionalParam req (Closures xs) =
    req `setQuery` toQuery ("closures", Just xs)
-- | @application/json@
instance Produces RoadDisruption MimeJSON
-- | @text/json@
instance Produces RoadDisruption MimeTextjson
-- | @application/xml@
instance Produces RoadDisruption MimeXML
-- | @text/xml@
instance Produces RoadDisruption MimeTextxml
-- | @application/geo+json@
instance Produces RoadDisruption MimeGeojson


-- *** roadDisruptionById

-- | @GET \/Road\/all\/Disruption\/{disruptionIds}@
-- 
-- Gets a list of active disruptions filtered by disruption Ids.
-- 
roadDisruptionById 
  :: Accept accept -- ^ request accept ('MimeType')
  -> DisruptionIds -- ^ "disruptionIds" -  Comma-separated list of disruption identifiers to filter by.
  -> TransportForLondonUnifiedRequest RoadDisruptionById MimeNoContent TflApiPresentationEntitiesRoadDisruption accept
roadDisruptionById  _ (DisruptionIds disruptionIds) =
  _mkRequest "GET" ["/Road/all/Disruption/",toPath disruptionIds]

data RoadDisruptionById  

-- | /Optional Param/ "stripContent" - Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.
instance HasOptionalParam RoadDisruptionById StripContent where
  applyOptionalParam req (StripContent xs) =
    req `setQuery` toQuery ("stripContent", Just xs)
-- | @application/json@
instance Produces RoadDisruptionById MimeJSON
-- | @text/json@
instance Produces RoadDisruptionById MimeTextjson
-- | @application/xml@
instance Produces RoadDisruptionById MimeXML
-- | @text/xml@
instance Produces RoadDisruptionById MimeTextxml
-- | @application/geo+json@
instance Produces RoadDisruptionById MimeGeojson


-- *** roadGet

-- | @GET \/Road@
-- 
-- Gets all roads managed by TfL
-- 
roadGet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest RoadGet MimeNoContent [TflApiPresentationEntitiesRoadCorridor] accept
roadGet  _ =
  _mkRequest "GET" ["/Road"]

data RoadGet  
-- | @application/json@
instance Produces RoadGet MimeJSON
-- | @text/json@
instance Produces RoadGet MimeTextjson
-- | @application/xml@
instance Produces RoadGet MimeXML
-- | @text/xml@
instance Produces RoadGet MimeTextxml


-- *** roadGet0

-- | @GET \/Road\/{ids}@
-- 
-- Gets the road with the specified id (e.g. A1)
-- 
roadGet0 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  Comma-separated list of road identifiers e.g. \"A406, A2\" (a full list of supported road identifiers can be found at the /Road/ endpoint)
  -> TransportForLondonUnifiedRequest RoadGet0 MimeNoContent [TflApiPresentationEntitiesRoadCorridor] accept
roadGet0  _ (Ids ids) =
  _mkRequest "GET" ["/Road/",toPath ids]

data RoadGet0  
-- | @application/json@
instance Produces RoadGet0 MimeJSON
-- | @text/json@
instance Produces RoadGet0 MimeTextjson
-- | @application/xml@
instance Produces RoadGet0 MimeXML
-- | @text/xml@
instance Produces RoadGet0 MimeTextxml


-- *** roadMetaCategories

-- | @GET \/Road\/Meta\/Categories@
-- 
-- Gets a list of valid RoadDisruption categories
-- 
roadMetaCategories 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest RoadMetaCategories MimeNoContent [Text] accept
roadMetaCategories  _ =
  _mkRequest "GET" ["/Road/Meta/Categories"]

data RoadMetaCategories  
-- | @application/json@
instance Produces RoadMetaCategories MimeJSON
-- | @text/json@
instance Produces RoadMetaCategories MimeTextjson
-- | @application/xml@
instance Produces RoadMetaCategories MimeXML
-- | @text/xml@
instance Produces RoadMetaCategories MimeTextxml


-- *** roadMetaSeverities

-- | @GET \/Road\/Meta\/Severities@
-- 
-- Gets a list of valid RoadDisruption severity codes
-- 
roadMetaSeverities 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest RoadMetaSeverities MimeNoContent [TflApiPresentationEntitiesStatusSeverity] accept
roadMetaSeverities  _ =
  _mkRequest "GET" ["/Road/Meta/Severities"]

data RoadMetaSeverities  
-- | @application/json@
instance Produces RoadMetaSeverities MimeJSON
-- | @text/json@
instance Produces RoadMetaSeverities MimeTextjson
-- | @application/xml@
instance Produces RoadMetaSeverities MimeXML
-- | @text/xml@
instance Produces RoadMetaSeverities MimeTextxml


-- *** roadStatus

-- | @GET \/Road\/{ids}\/Status@
-- 
-- Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.
-- 
roadStatus 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  Comma-separated list of road identifiers e.g. \"A406, A2\" or use \"all\" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)
  -> TransportForLondonUnifiedRequest RoadStatus MimeNoContent [TflApiPresentationEntitiesRoadCorridor] accept
roadStatus  _ (Ids ids) =
  _mkRequest "GET" ["/Road/",toPath ids,"/Status"]

data RoadStatus  
instance HasOptionalParam RoadStatus DateRangeNullableStartDate where
  applyOptionalParam req (DateRangeNullableStartDate xs) =
    req `setQuery` toQuery ("dateRangeNullable.startDate", Just xs)
instance HasOptionalParam RoadStatus DateRangeNullableEndDate where
  applyOptionalParam req (DateRangeNullableEndDate xs) =
    req `setQuery` toQuery ("dateRangeNullable.endDate", Just xs)
-- | @application/json@
instance Produces RoadStatus MimeJSON
-- | @text/json@
instance Produces RoadStatus MimeTextjson
-- | @application/xml@
instance Produces RoadStatus MimeXML
-- | @text/xml@
instance Produces RoadStatus MimeTextxml

