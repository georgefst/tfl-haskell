{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.TravelTime
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.TravelTime where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** TravelTime

-- *** travelTimeGetCompareOverlay

-- | @GET \/TravelTimes\/compareOverlay\/{z}\/mapcenter\/{mapCenterLat}\/{mapCenterLon}\/pinlocation\/{pinLat}\/{pinLon}\/dimensions\/{width}\/{height}@
-- 
-- Gets the TravelTime overlay.
-- 
travelTimeGetCompareOverlay 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Z -- ^ "z" -  The zoom level.
  -> PinLat -- ^ "pinLat" -  The latitude of the pin.
  -> PinLon -- ^ "pinLon" -  The longitude of the pin.
  -> MapCenterLat -- ^ "mapCenterLat" -  The map center latitude.
  -> MapCenterLon -- ^ "mapCenterLon" -  The map center longitude.
  -> ScenarioTitle -- ^ "scenarioTitle" -  The title of the scenario.
  -> TimeOfDayId -- ^ "timeOfDayId" -  The id for the time of day (AM/INTER/PM)
  -> ModeId -- ^ "modeId" -  The id of the mode.
  -> Width -- ^ "width" -  The width of the requested overlay.
  -> Height -- ^ "height" -  The height of the requested overlay.
  -> Direction2 -- ^ "direction" -  The direction of travel.
  -> TravelTimeInterval -- ^ "travelTimeInterval" -  The total minutes between the travel time bands
  -> CompareType -- ^ "compareType"
  -> CompareValue -- ^ "compareValue"
  -> TransportForLondonUnifiedRequest TravelTimeGetCompareOverlay MimeNoContent SystemObject accept
travelTimeGetCompareOverlay  _ (Z z) (PinLat pinLat) (PinLon pinLon) (MapCenterLat mapCenterLat) (MapCenterLon mapCenterLon) (ScenarioTitle scenarioTitle) (TimeOfDayId timeOfDayId) (ModeId modeId) (Width width) (Height height) (Direction2 direction) (TravelTimeInterval travelTimeInterval) (CompareType compareType) (CompareValue compareValue) =
  _mkRequest "GET" ["/TravelTimes/compareOverlay/",toPath z,"/mapcenter/",toPath mapCenterLat,"/",toPath mapCenterLon,"/pinlocation/",toPath pinLat,"/",toPath pinLon,"/dimensions/",toPath width,"/",toPath height]
    `setQuery` toQuery ("scenarioTitle", Just scenarioTitle)
    `setQuery` toQuery ("timeOfDayId", Just timeOfDayId)
    `setQuery` toQuery ("modeId", Just modeId)
    `setQuery` toQuery ("direction", Just direction)
    `setQuery` toQuery ("travelTimeInterval", Just travelTimeInterval)
    `setQuery` toQuery ("compareType", Just compareType)
    `setQuery` toQuery ("compareValue", Just compareValue)

data TravelTimeGetCompareOverlay  
-- | @application/json@
instance Produces TravelTimeGetCompareOverlay MimeJSON
-- | @text/json@
instance Produces TravelTimeGetCompareOverlay MimeTextjson
-- | @application/xml@
instance Produces TravelTimeGetCompareOverlay MimeXML
-- | @text/xml@
instance Produces TravelTimeGetCompareOverlay MimeTextxml


-- *** travelTimeGetOverlay

-- | @GET \/TravelTimes\/overlay\/{z}\/mapcenter\/{mapCenterLat}\/{mapCenterLon}\/pinlocation\/{pinLat}\/{pinLon}\/dimensions\/{width}\/{height}@
-- 
-- Gets the TravelTime overlay.
-- 
travelTimeGetOverlay 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Z -- ^ "z" -  The zoom level.
  -> PinLat -- ^ "pinLat" -  The latitude of the pin.
  -> PinLon -- ^ "pinLon" -  The longitude of the pin.
  -> MapCenterLat -- ^ "mapCenterLat" -  The map center latitude.
  -> MapCenterLon -- ^ "mapCenterLon" -  The map center longitude.
  -> ScenarioTitle -- ^ "scenarioTitle" -  The title of the scenario.
  -> TimeOfDayId -- ^ "timeOfDayId" -  The id for the time of day (AM/INTER/PM)
  -> ModeId -- ^ "modeId" -  The id of the mode.
  -> Width -- ^ "width" -  The width of the requested overlay.
  -> Height -- ^ "height" -  The height of the requested overlay.
  -> Direction2 -- ^ "direction" -  The direction of travel.
  -> TravelTimeInterval -- ^ "travelTimeInterval" -  The total minutes between the travel time bands
  -> TransportForLondonUnifiedRequest TravelTimeGetOverlay MimeNoContent SystemObject accept
travelTimeGetOverlay  _ (Z z) (PinLat pinLat) (PinLon pinLon) (MapCenterLat mapCenterLat) (MapCenterLon mapCenterLon) (ScenarioTitle scenarioTitle) (TimeOfDayId timeOfDayId) (ModeId modeId) (Width width) (Height height) (Direction2 direction) (TravelTimeInterval travelTimeInterval) =
  _mkRequest "GET" ["/TravelTimes/overlay/",toPath z,"/mapcenter/",toPath mapCenterLat,"/",toPath mapCenterLon,"/pinlocation/",toPath pinLat,"/",toPath pinLon,"/dimensions/",toPath width,"/",toPath height]
    `setQuery` toQuery ("scenarioTitle", Just scenarioTitle)
    `setQuery` toQuery ("timeOfDayId", Just timeOfDayId)
    `setQuery` toQuery ("modeId", Just modeId)
    `setQuery` toQuery ("direction", Just direction)
    `setQuery` toQuery ("travelTimeInterval", Just travelTimeInterval)

data TravelTimeGetOverlay  
-- | @application/json@
instance Produces TravelTimeGetOverlay MimeJSON
-- | @text/json@
instance Produces TravelTimeGetOverlay MimeTextjson
-- | @application/xml@
instance Produces TravelTimeGetOverlay MimeXML
-- | @text/xml@
instance Produces TravelTimeGetOverlay MimeTextxml

