{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.StopPoint
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.StopPoint where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** StopPoint

-- *** stopPointArrivalDepartures

-- | @GET \/StopPoint\/{id}\/ArrivalDepartures@
-- 
-- Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)
-- 
stopPointArrivalDepartures 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> LineIds -- ^ "lineIds" -  A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink
  -> TransportForLondonUnifiedRequest StopPointArrivalDepartures MimeNoContent [TflApiPresentationEntitiesArrivalDeparture] accept
stopPointArrivalDepartures  _ (Id id) (LineIds lineIds) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/ArrivalDepartures"]
    `setQuery` toQueryColl MultiParamArray ("lineIds", Just lineIds)

data StopPointArrivalDepartures  
-- | @application/json@
instance Produces StopPointArrivalDepartures MimeJSON
-- | @text/json@
instance Produces StopPointArrivalDepartures MimeTextjson
-- | @application/xml@
instance Produces StopPointArrivalDepartures MimeXML
-- | @text/xml@
instance Produces StopPointArrivalDepartures MimeTextxml


-- *** stopPointArrivals

-- | @GET \/StopPoint\/{id}\/Arrivals@
-- 
-- Gets the list of arrival predictions for the given stop point id
-- 
stopPointArrivals 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> TransportForLondonUnifiedRequest StopPointArrivals MimeNoContent [TflApiPresentationEntitiesPrediction] accept
stopPointArrivals  _ (Id id) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/Arrivals"]

data StopPointArrivals  
-- | @application/json@
instance Produces StopPointArrivals MimeJSON
-- | @text/json@
instance Produces StopPointArrivals MimeTextjson
-- | @application/xml@
instance Produces StopPointArrivals MimeXML
-- | @text/xml@
instance Produces StopPointArrivals MimeTextxml


-- *** stopPointCrowding

-- | @GET \/StopPoint\/{id}\/Crowding\/{line}@
-- 
-- Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
-- 
stopPointCrowding 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  The Naptan id of the stop
  -> Line -- ^ "line" -  A particular line e.g. victoria, circle, northern etc.
  -> Direction -- ^ "direction" -  The direction of travel. Can be inbound or outbound.
  -> TransportForLondonUnifiedRequest StopPointCrowding MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
stopPointCrowding  _ (Id id) (Line line) (Direction direction) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/Crowding/",toPath line]
    `setQuery` toQuery ("direction", Just direction)

data StopPointCrowding  
-- | @application/json@
instance Produces StopPointCrowding MimeJSON
-- | @text/json@
instance Produces StopPointCrowding MimeTextjson
-- | @application/xml@
instance Produces StopPointCrowding MimeXML
-- | @text/xml@
instance Produces StopPointCrowding MimeTextxml


-- *** stopPointDirection

-- | @GET \/StopPoint\/{id}\/DirectionTo\/{toStopPointId}@
-- 
-- Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
-- 
stopPointDirection 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> ToStopPointId -- ^ "toStopPointId" -  Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> TransportForLondonUnifiedRequest StopPointDirection MimeNoContent Text accept
stopPointDirection  _ (Id id) (ToStopPointId toStopPointId) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/DirectionTo/",toPath toStopPointId]

data StopPointDirection  

-- | /Optional Param/ "lineId" - Optional line id filter e.g. victoria
instance HasOptionalParam StopPointDirection LineId where
  applyOptionalParam req (LineId xs) =
    req `setQuery` toQuery ("lineId", Just xs)
-- | @application/json@
instance Produces StopPointDirection MimeJSON
-- | @text/json@
instance Produces StopPointDirection MimeTextjson
-- | @application/xml@
instance Produces StopPointDirection MimeXML
-- | @text/xml@
instance Produces StopPointDirection MimeTextxml


-- *** stopPointDisruption

-- | @GET \/StopPoint\/{ids}\/Disruption@
-- 
-- Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
-- 
stopPointDisruption 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
  -> TransportForLondonUnifiedRequest StopPointDisruption MimeNoContent [TflApiPresentationEntitiesDisruptedPoint] accept
stopPointDisruption  _ (Ids ids) =
  _mkRequest "GET" ["/StopPoint/",toPath ids,"/Disruption"]

data StopPointDisruption  

-- | /Optional Param/ "getFamily" - Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.
instance HasOptionalParam StopPointDisruption GetFamily where
  applyOptionalParam req (GetFamily xs) =
    req `setQuery` toQuery ("getFamily", Just xs)

-- | /Optional Param/ "includeRouteBlockedStops" - 
instance HasOptionalParam StopPointDisruption IncludeRouteBlockedStops where
  applyOptionalParam req (IncludeRouteBlockedStops xs) =
    req `setQuery` toQuery ("includeRouteBlockedStops", Just xs)

-- | /Optional Param/ "flattenResponse" - Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).
instance HasOptionalParam StopPointDisruption FlattenResponse where
  applyOptionalParam req (FlattenResponse xs) =
    req `setQuery` toQuery ("flattenResponse", Just xs)
-- | @application/json@
instance Produces StopPointDisruption MimeJSON
-- | @text/json@
instance Produces StopPointDisruption MimeTextjson
-- | @application/xml@
instance Produces StopPointDisruption MimeXML
-- | @text/xml@
instance Produces StopPointDisruption MimeTextxml


-- *** stopPointDisruptionByMode

-- | @GET \/StopPoint\/Mode\/{modes}\/Disruption@
-- 
-- Gets a distinct list of disrupted stop points for the given modes
-- 
stopPointDisruptionByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-seperated list of modes e.g. tube,dlr
  -> TransportForLondonUnifiedRequest StopPointDisruptionByMode MimeNoContent [TflApiPresentationEntitiesDisruptedPoint] accept
stopPointDisruptionByMode  _ (Modes modes) =
  _mkRequest "GET" ["/StopPoint/Mode/",toPath modes,"/Disruption"]

data StopPointDisruptionByMode  

-- | /Optional Param/ "includeRouteBlockedStops" - 
instance HasOptionalParam StopPointDisruptionByMode IncludeRouteBlockedStops where
  applyOptionalParam req (IncludeRouteBlockedStops xs) =
    req `setQuery` toQuery ("includeRouteBlockedStops", Just xs)
-- | @application/json@
instance Produces StopPointDisruptionByMode MimeJSON
-- | @text/json@
instance Produces StopPointDisruptionByMode MimeTextjson
-- | @application/xml@
instance Produces StopPointDisruptionByMode MimeXML
-- | @text/xml@
instance Produces StopPointDisruptionByMode MimeTextxml


-- *** stopPointGet

-- | @GET \/StopPoint\/{ids}@
-- 
-- Gets a list of StopPoints corresponding to the given list of stop ids.
-- 
stopPointGet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
  -> TransportForLondonUnifiedRequest StopPointGet MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
stopPointGet  _ (Ids ids) =
  _mkRequest "GET" ["/StopPoint/",toPath ids]

data StopPointGet  

-- | /Optional Param/ "includeCrowdingData" - Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}
instance HasOptionalParam StopPointGet IncludeCrowdingData where
  applyOptionalParam req (IncludeCrowdingData xs) =
    req `setQuery` toQuery ("includeCrowdingData", Just xs)
-- | @application/json@
instance Produces StopPointGet MimeJSON
-- | @text/json@
instance Produces StopPointGet MimeTextjson
-- | @application/xml@
instance Produces StopPointGet MimeXML
-- | @text/xml@
instance Produces StopPointGet MimeTextxml


-- *** stopPointGet0

-- | @GET \/StopPoint\/{id}\/placeTypes@
-- 
-- Get a list of places corresponding to a given id and place types.
-- 
stopPointGet0 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).
  -> PlaceTypes -- ^ "placeTypes" -  A comcomma-separated value representing the place types.
  -> TransportForLondonUnifiedRequest StopPointGet0 MimeNoContent [TflApiPresentationEntitiesPlace] accept
stopPointGet0  _ (Id id) (PlaceTypes placeTypes) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/placeTypes"]
    `setQuery` toQueryColl MultiParamArray ("placeTypes", Just placeTypes)

data StopPointGet0  
-- | @application/json@
instance Produces StopPointGet0 MimeJSON
-- | @text/json@
instance Produces StopPointGet0 MimeTextjson
-- | @application/xml@
instance Produces StopPointGet0 MimeXML
-- | @text/xml@
instance Produces StopPointGet0 MimeTextxml


-- *** stopPointGetByGeoPoint

-- | @GET \/StopPoint@
-- 
-- Gets a list of StopPoints within {radius} by the specified criteria
-- 
stopPointGetByGeoPoint 
  :: Accept accept -- ^ request accept ('MimeType')
  -> StopTypes -- ^ "stopTypes" -  a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)
  -> LocationLat -- ^ "locationLat"
  -> LocationLon -- ^ "locationLon"
  -> TransportForLondonUnifiedRequest StopPointGetByGeoPoint MimeNoContent TflApiPresentationEntitiesStopPointsResponse accept
stopPointGetByGeoPoint  _ (StopTypes stopTypes) (LocationLat locationLat) (LocationLon locationLon) =
  _mkRequest "GET" ["/StopPoint"]
    `setQuery` toQueryColl MultiParamArray ("stopTypes", Just stopTypes)
    `setQuery` toQuery ("location.lat", Just locationLat)
    `setQuery` toQuery ("location.lon", Just locationLon)

data StopPointGetByGeoPoint  

-- | /Optional Param/ "radius" - the radius of the bounding circle in metres (default : 200)
instance HasOptionalParam StopPointGetByGeoPoint RadiusInt where
  applyOptionalParam req (RadiusInt xs) =
    req `setQuery` toQuery ("radius", Just xs)

-- | /Optional Param/ "useStopPointHierarchy" - Re-arrange the output into a parent/child hierarchy
instance HasOptionalParam StopPointGetByGeoPoint UseStopPointHierarchy where
  applyOptionalParam req (UseStopPointHierarchy xs) =
    req `setQuery` toQuery ("useStopPointHierarchy", Just xs)

-- | /Optional Param/ "modes" - the list of modes to search (comma separated mode names e.g. tube,dlr)
instance HasOptionalParam StopPointGetByGeoPoint Modes where
  applyOptionalParam req (Modes xs) =
    req `setQuery` toQueryColl MultiParamArray ("modes", Just xs)

-- | /Optional Param/ "categories" - an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)
instance HasOptionalParam StopPointGetByGeoPoint Categories where
  applyOptionalParam req (Categories xs) =
    req `setQuery` toQueryColl MultiParamArray ("categories", Just xs)

-- | /Optional Param/ "returnLines" - true to return the lines that each stop point serves as a nested resource
instance HasOptionalParam StopPointGetByGeoPoint ReturnLines where
  applyOptionalParam req (ReturnLines xs) =
    req `setQuery` toQuery ("returnLines", Just xs)
-- | @application/json@
instance Produces StopPointGetByGeoPoint MimeJSON
-- | @text/json@
instance Produces StopPointGetByGeoPoint MimeTextjson
-- | @application/xml@
instance Produces StopPointGetByGeoPoint MimeXML
-- | @text/xml@
instance Produces StopPointGetByGeoPoint MimeTextxml


-- *** stopPointGetByMode

-- | @GET \/StopPoint\/Mode\/{modes}@
-- 
-- Gets a list of StopPoints filtered by the modes available at that StopPoint.
-- 
stopPointGetByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-seperated list of modes e.g. tube,dlr
  -> TransportForLondonUnifiedRequest StopPointGetByMode MimeNoContent TflApiPresentationEntitiesStopPointsResponse accept
stopPointGetByMode  _ (Modes modes) =
  _mkRequest "GET" ["/StopPoint/Mode/",toPath modes]

data StopPointGetByMode  

-- | /Optional Param/ "page" - The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.
instance HasOptionalParam StopPointGetByMode Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)
-- | @application/json@
instance Produces StopPointGetByMode MimeJSON
-- | @text/json@
instance Produces StopPointGetByMode MimeTextjson
-- | @application/xml@
instance Produces StopPointGetByMode MimeXML
-- | @text/xml@
instance Produces StopPointGetByMode MimeTextxml


-- *** stopPointGetBySms

-- | @GET \/StopPoint\/Sms\/{id}@
-- 
-- Gets a StopPoint for a given sms code.
-- 
stopPointGetBySms 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.
  -> TransportForLondonUnifiedRequest StopPointGetBySms MimeNoContent SystemObject accept
stopPointGetBySms  _ (Id id) =
  _mkRequest "GET" ["/StopPoint/Sms/",toPath id]

data StopPointGetBySms  

-- | /Optional Param/ "output" - If set to \"web\", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.
instance HasOptionalParam StopPointGetBySms Output where
  applyOptionalParam req (Output xs) =
    req `setQuery` toQuery ("output", Just xs)
-- | @application/json@
instance Produces StopPointGetBySms MimeJSON
-- | @text/json@
instance Produces StopPointGetBySms MimeTextjson
-- | @application/xml@
instance Produces StopPointGetBySms MimeXML
-- | @text/xml@
instance Produces StopPointGetBySms MimeTextxml


-- *** stopPointGetByType

-- | @GET \/StopPoint\/Type\/{types}@
-- 
-- Gets all stop points of a given type
-- 
stopPointGetByType 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Types -- ^ "types" -  A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.
  -> TransportForLondonUnifiedRequest StopPointGetByType MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
stopPointGetByType  _ (Types types) =
  _mkRequest "GET" ["/StopPoint/Type/",toPath types]

data StopPointGetByType  
-- | @application/json@
instance Produces StopPointGetByType MimeJSON
-- | @text/json@
instance Produces StopPointGetByType MimeTextjson
-- | @application/xml@
instance Produces StopPointGetByType MimeXML
-- | @text/xml@
instance Produces StopPointGetByType MimeTextxml


-- *** stopPointGetByTypeWithPagination

-- | @GET \/StopPoint\/Type\/{types}\/page\/{page}@
-- 
-- Gets all the stop points of given type(s) with a page number
-- 
stopPointGetByTypeWithPagination 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Types -- ^ "types" -  
  -> Page -- ^ "page" -  
  -> TransportForLondonUnifiedRequest StopPointGetByTypeWithPagination MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
stopPointGetByTypeWithPagination  _ (Types types) (Page page) =
  _mkRequest "GET" ["/StopPoint/Type/",toPath types,"/page/",toPath page]

data StopPointGetByTypeWithPagination  
-- | @application/json@
instance Produces StopPointGetByTypeWithPagination MimeJSON
-- | @text/json@
instance Produces StopPointGetByTypeWithPagination MimeTextjson
-- | @application/xml@
instance Produces StopPointGetByTypeWithPagination MimeXML
-- | @text/xml@
instance Produces StopPointGetByTypeWithPagination MimeTextxml


-- *** stopPointGetCarParksById

-- | @GET \/StopPoint\/{stopPointId}\/CarParks@
-- 
-- Get car parks corresponding to the given stop point id.
-- 
stopPointGetCarParksById 
  :: Accept accept -- ^ request accept ('MimeType')
  -> StopPointId -- ^ "stopPointId" -  stopPointId is required to get the car parks.
  -> TransportForLondonUnifiedRequest StopPointGetCarParksById MimeNoContent [TflApiPresentationEntitiesPlace] accept
stopPointGetCarParksById  _ (StopPointId stopPointId) =
  _mkRequest "GET" ["/StopPoint/",toPath stopPointId,"/CarParks"]

data StopPointGetCarParksById  
-- | @application/json@
instance Produces StopPointGetCarParksById MimeJSON
-- | @text/json@
instance Produces StopPointGetCarParksById MimeTextjson
-- | @application/xml@
instance Produces StopPointGetCarParksById MimeXML
-- | @text/xml@
instance Produces StopPointGetCarParksById MimeTextxml


-- *** stopPointGetServiceTypes

-- | @GET \/StopPoint\/ServiceTypes@
-- 
-- Gets the service types for a given stoppoint
-- 
stopPointGetServiceTypes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  The Naptan id of the stop
  -> TransportForLondonUnifiedRequest StopPointGetServiceTypes MimeNoContent [TflApiPresentationEntitiesLineServiceType] accept
stopPointGetServiceTypes  _ (Id id) =
  _mkRequest "GET" ["/StopPoint/ServiceTypes"]
    `setQuery` toQuery ("id", Just id)

data StopPointGetServiceTypes  

-- | /Optional Param/ "lineIds" - The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)
instance HasOptionalParam StopPointGetServiceTypes LineIds where
  applyOptionalParam req (LineIds xs) =
    req `setQuery` toQueryColl MultiParamArray ("lineIds", Just xs)

-- | /Optional Param/ "modes" - The modes which the lines are relevant to (all if empty)
instance HasOptionalParam StopPointGetServiceTypes Modes where
  applyOptionalParam req (Modes xs) =
    req `setQuery` toQueryColl MultiParamArray ("modes", Just xs)
-- | @application/json@
instance Produces StopPointGetServiceTypes MimeJSON
-- | @text/json@
instance Produces StopPointGetServiceTypes MimeTextjson
-- | @application/xml@
instance Produces StopPointGetServiceTypes MimeXML
-- | @text/xml@
instance Produces StopPointGetServiceTypes MimeTextxml


-- *** stopPointGetTaxiRanksByIds

-- | @GET \/StopPoint\/{stopPointId}\/TaxiRanks@
-- 
-- Gets a list of taxi ranks corresponding to the given stop point id.
-- 
stopPointGetTaxiRanksByIds 
  :: Accept accept -- ^ request accept ('MimeType')
  -> StopPointId -- ^ "stopPointId" -  stopPointId is required to get the taxi ranks.
  -> TransportForLondonUnifiedRequest StopPointGetTaxiRanksByIds MimeNoContent [TflApiPresentationEntitiesPlace] accept
stopPointGetTaxiRanksByIds  _ (StopPointId stopPointId) =
  _mkRequest "GET" ["/StopPoint/",toPath stopPointId,"/TaxiRanks"]

data StopPointGetTaxiRanksByIds  
-- | @application/json@
instance Produces StopPointGetTaxiRanksByIds MimeJSON
-- | @text/json@
instance Produces StopPointGetTaxiRanksByIds MimeTextjson
-- | @application/xml@
instance Produces StopPointGetTaxiRanksByIds MimeXML
-- | @text/xml@
instance Produces StopPointGetTaxiRanksByIds MimeTextxml


-- *** stopPointMetaCategories

-- | @GET \/StopPoint\/Meta\/Categories@
-- 
-- Gets the list of available StopPoint additional information categories
-- 
stopPointMetaCategories 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest StopPointMetaCategories MimeNoContent [TflApiPresentationEntitiesStopPointCategory] accept
stopPointMetaCategories  _ =
  _mkRequest "GET" ["/StopPoint/Meta/Categories"]

data StopPointMetaCategories  
-- | @application/json@
instance Produces StopPointMetaCategories MimeJSON
-- | @text/json@
instance Produces StopPointMetaCategories MimeTextjson
-- | @application/xml@
instance Produces StopPointMetaCategories MimeXML
-- | @text/xml@
instance Produces StopPointMetaCategories MimeTextxml


-- *** stopPointMetaModes

-- | @GET \/StopPoint\/Meta\/Modes@
-- 
-- Gets the list of available StopPoint modes
-- 
stopPointMetaModes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest StopPointMetaModes MimeNoContent [TflApiPresentationEntitiesMode] accept
stopPointMetaModes  _ =
  _mkRequest "GET" ["/StopPoint/Meta/Modes"]

data StopPointMetaModes  
-- | @application/json@
instance Produces StopPointMetaModes MimeJSON
-- | @text/json@
instance Produces StopPointMetaModes MimeTextjson
-- | @application/xml@
instance Produces StopPointMetaModes MimeXML
-- | @text/xml@
instance Produces StopPointMetaModes MimeTextxml


-- *** stopPointMetaStopTypes

-- | @GET \/StopPoint\/Meta\/StopTypes@
-- 
-- Gets the list of available StopPoint types
-- 
stopPointMetaStopTypes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest StopPointMetaStopTypes MimeNoContent [Text] accept
stopPointMetaStopTypes  _ =
  _mkRequest "GET" ["/StopPoint/Meta/StopTypes"]

data StopPointMetaStopTypes  
-- | @application/json@
instance Produces StopPointMetaStopTypes MimeJSON
-- | @text/json@
instance Produces StopPointMetaStopTypes MimeTextjson
-- | @application/xml@
instance Produces StopPointMetaStopTypes MimeXML
-- | @text/xml@
instance Produces StopPointMetaStopTypes MimeTextxml


-- *** stopPointReachableFrom

-- | @GET \/StopPoint\/{id}\/CanReachOnLine\/{lineId}@
-- 
-- Gets Stopoints that are reachable from a station/line combination.
-- 
stopPointReachableFrom 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by
  -> LineId -- ^ "lineId" -  Line id of the line to filter by (e.g. victoria)
  -> TransportForLondonUnifiedRequest StopPointReachableFrom MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
stopPointReachableFrom  _ (Id id) (LineId lineId) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/CanReachOnLine/",toPath lineId]

data StopPointReachableFrom  

-- | /Optional Param/ "serviceTypes" - A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam StopPointReachableFrom ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces StopPointReachableFrom MimeJSON
-- | @text/json@
instance Produces StopPointReachableFrom MimeTextjson
-- | @application/xml@
instance Produces StopPointReachableFrom MimeXML
-- | @text/xml@
instance Produces StopPointReachableFrom MimeTextxml


-- *** stopPointRoute

-- | @GET \/StopPoint\/{id}\/Route@
-- 
-- Returns the route sections for all the lines that service the given stop point ids
-- 
stopPointRoute 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> TransportForLondonUnifiedRequest StopPointRoute MimeNoContent [TflApiPresentationEntitiesStopPointRouteSection] accept
stopPointRoute  _ (Id id) =
  _mkRequest "GET" ["/StopPoint/",toPath id,"/Route"]

data StopPointRoute  

-- | /Optional Param/ "serviceTypes" - A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam StopPointRoute ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces StopPointRoute MimeJSON
-- | @text/json@
instance Produces StopPointRoute MimeTextjson
-- | @application/xml@
instance Produces StopPointRoute MimeXML
-- | @text/xml@
instance Produces StopPointRoute MimeTextxml


-- *** stopPointSearch

-- | @GET \/StopPoint\/Search\/{query}@
-- 
-- Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
-- 
stopPointSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Query -- ^ "query" -  The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
  -> TransportForLondonUnifiedRequest StopPointSearch MimeNoContent TflApiPresentationEntitiesSearchResponse accept
stopPointSearch  _ (Query query) =
  _mkRequest "GET" ["/StopPoint/Search/",toPath query]

data StopPointSearch  

-- | /Optional Param/ "modes" - An optional, parameter separated list of the modes to filter by
instance HasOptionalParam StopPointSearch Modes where
  applyOptionalParam req (Modes xs) =
    req `setQuery` toQueryColl MultiParamArray ("modes", Just xs)

-- | /Optional Param/ "faresOnly" - True to only return stations in that have Fares data available for single fares to another station.
instance HasOptionalParam StopPointSearch FaresOnly where
  applyOptionalParam req (FaresOnly xs) =
    req `setQuery` toQuery ("faresOnly", Just xs)

-- | /Optional Param/ "maxResults" - An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items.
instance HasOptionalParam StopPointSearch MaxResults where
  applyOptionalParam req (MaxResults xs) =
    req `setQuery` toQuery ("maxResults", Just xs)

-- | /Optional Param/ "lines" - An optional, parameter separated list of the lines to filter by
instance HasOptionalParam StopPointSearch Lines where
  applyOptionalParam req (Lines xs) =
    req `setQuery` toQueryColl MultiParamArray ("lines", Just xs)

-- | /Optional Param/ "includeHubs" - If true, returns results including HUBs.
instance HasOptionalParam StopPointSearch IncludeHubs where
  applyOptionalParam req (IncludeHubs xs) =
    req `setQuery` toQuery ("includeHubs", Just xs)

-- | /Optional Param/ "tflOperatedNationalRailStationsOnly" - If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
instance HasOptionalParam StopPointSearch TflOperatedNationalRailStationsOnly where
  applyOptionalParam req (TflOperatedNationalRailStationsOnly xs) =
    req `setQuery` toQuery ("tflOperatedNationalRailStationsOnly", Just xs)
-- | @application/json@
instance Produces StopPointSearch MimeJSON
-- | @text/json@
instance Produces StopPointSearch MimeTextjson
-- | @application/xml@
instance Produces StopPointSearch MimeXML
-- | @text/xml@
instance Produces StopPointSearch MimeTextxml


-- *** stopPointSearch0

-- | @GET \/StopPoint\/Search@
-- 
-- Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
-- 
stopPointSearch0 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Query -- ^ "query" -  The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
  -> TransportForLondonUnifiedRequest StopPointSearch0 MimeNoContent TflApiPresentationEntitiesSearchResponse accept
stopPointSearch0  _ (Query query) =
  _mkRequest "GET" ["/StopPoint/Search"]
    `setQuery` toQuery ("query", Just query)

data StopPointSearch0  

-- | /Optional Param/ "modes" - An optional, parameter separated list of the modes to filter by
instance HasOptionalParam StopPointSearch0 Modes where
  applyOptionalParam req (Modes xs) =
    req `setQuery` toQueryColl MultiParamArray ("modes", Just xs)

-- | /Optional Param/ "faresOnly" - True to only return stations in that have Fares data available for single fares to another station.
instance HasOptionalParam StopPointSearch0 FaresOnly where
  applyOptionalParam req (FaresOnly xs) =
    req `setQuery` toQuery ("faresOnly", Just xs)

-- | /Optional Param/ "maxResults" - An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items.
instance HasOptionalParam StopPointSearch0 MaxResults where
  applyOptionalParam req (MaxResults xs) =
    req `setQuery` toQuery ("maxResults", Just xs)

-- | /Optional Param/ "lines" - An optional, parameter separated list of the lines to filter by
instance HasOptionalParam StopPointSearch0 Lines where
  applyOptionalParam req (Lines xs) =
    req `setQuery` toQueryColl MultiParamArray ("lines", Just xs)

-- | /Optional Param/ "includeHubs" - If true, returns results including HUBs.
instance HasOptionalParam StopPointSearch0 IncludeHubs where
  applyOptionalParam req (IncludeHubs xs) =
    req `setQuery` toQuery ("includeHubs", Just xs)

-- | /Optional Param/ "tflOperatedNationalRailStationsOnly" - If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
instance HasOptionalParam StopPointSearch0 TflOperatedNationalRailStationsOnly where
  applyOptionalParam req (TflOperatedNationalRailStationsOnly xs) =
    req `setQuery` toQuery ("tflOperatedNationalRailStationsOnly", Just xs)
-- | @application/json@
instance Produces StopPointSearch0 MimeJSON
-- | @text/json@
instance Produces StopPointSearch0 MimeTextjson
-- | @application/xml@
instance Produces StopPointSearch0 MimeXML
-- | @text/xml@
instance Produces StopPointSearch0 MimeTextxml

