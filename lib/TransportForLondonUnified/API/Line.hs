{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.Line
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.Line where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Line

-- *** lineArrivals

-- | @GET \/Line\/{ids}\/Arrivals\/{stopPointId}@
-- 
-- Get the list of arrival predictions for given line ids based at the given stop
-- 
lineArrivals 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> StopPointId -- ^ "stopPointId" -  Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> TransportForLondonUnifiedRequest LineArrivals MimeNoContent [TflApiPresentationEntitiesPrediction] accept
lineArrivals  _ (Ids ids) (StopPointId stopPointId) =
  _mkRequest "GET" ["/Line/",toPath ids,"/Arrivals/",toPath stopPointId]

data LineArrivals  

-- | /Optional Param/ "direction" - Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all
instance HasOptionalParam LineArrivals Direction where
  applyOptionalParam req (Direction xs) =
    req `setQuery` toQuery ("direction", Just xs)

-- | /Optional Param/ "destinationStationId" - Optional. Id of destination stop
instance HasOptionalParam LineArrivals DestinationStationId where
  applyOptionalParam req (DestinationStationId xs) =
    req `setQuery` toQuery ("destinationStationId", Just xs)
-- | @application/json@
instance Produces LineArrivals MimeJSON
-- | @text/json@
instance Produces LineArrivals MimeTextjson
-- | @application/xml@
instance Produces LineArrivals MimeXML
-- | @text/xml@
instance Produces LineArrivals MimeTextxml


-- *** lineDisruption

-- | @GET \/Line\/{ids}\/Disruption@
-- 
-- Get disruptions for the given line ids
-- 
lineDisruption 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> TransportForLondonUnifiedRequest LineDisruption MimeNoContent [TflApiPresentationEntitiesDisruption] accept
lineDisruption  _ (Ids ids) =
  _mkRequest "GET" ["/Line/",toPath ids,"/Disruption"]

data LineDisruption  
-- | @application/json@
instance Produces LineDisruption MimeJSON
-- | @text/json@
instance Produces LineDisruption MimeTextjson
-- | @application/xml@
instance Produces LineDisruption MimeXML
-- | @text/xml@
instance Produces LineDisruption MimeTextxml


-- *** lineDisruptionByMode

-- | @GET \/Line\/Mode\/{modes}\/Disruption@
-- 
-- Get disruptions for all lines of the given modes.
-- 
lineDisruptionByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-separated list of modes e.g. tube,dlr
  -> TransportForLondonUnifiedRequest LineDisruptionByMode MimeNoContent [TflApiPresentationEntitiesDisruption] accept
lineDisruptionByMode  _ (Modes modes) =
  _mkRequest "GET" ["/Line/Mode/",toPath modes,"/Disruption"]

data LineDisruptionByMode  
-- | @application/json@
instance Produces LineDisruptionByMode MimeJSON
-- | @text/json@
instance Produces LineDisruptionByMode MimeTextjson
-- | @application/xml@
instance Produces LineDisruptionByMode MimeXML
-- | @text/xml@
instance Produces LineDisruptionByMode MimeTextxml


-- *** lineGet

-- | @GET \/Line\/{ids}@
-- 
-- Gets lines that match the specified line ids.
-- 
lineGet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> TransportForLondonUnifiedRequest LineGet MimeNoContent [TflApiPresentationEntitiesLine] accept
lineGet  _ (Ids ids) =
  _mkRequest "GET" ["/Line/",toPath ids]

data LineGet  
-- | @application/json@
instance Produces LineGet MimeJSON
-- | @text/json@
instance Produces LineGet MimeTextjson
-- | @application/xml@
instance Produces LineGet MimeXML
-- | @text/xml@
instance Produces LineGet MimeTextxml


-- *** lineGetByMode

-- | @GET \/Line\/Mode\/{modes}@
-- 
-- Gets lines that serve the given modes.
-- 
lineGetByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-separated list of modes e.g. tube,dlr
  -> TransportForLondonUnifiedRequest LineGetByMode MimeNoContent [TflApiPresentationEntitiesLine] accept
lineGetByMode  _ (Modes modes) =
  _mkRequest "GET" ["/Line/Mode/",toPath modes]

data LineGetByMode  
-- | @application/json@
instance Produces LineGetByMode MimeJSON
-- | @text/json@
instance Produces LineGetByMode MimeTextjson
-- | @application/xml@
instance Produces LineGetByMode MimeXML
-- | @text/xml@
instance Produces LineGetByMode MimeTextxml


-- *** lineLineRoutesByIds

-- | @GET \/Line\/{ids}\/Route@
-- 
-- Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
-- 
lineLineRoutesByIds 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> TransportForLondonUnifiedRequest LineLineRoutesByIds MimeNoContent [TflApiPresentationEntitiesLine] accept
lineLineRoutesByIds  _ (Ids ids) =
  _mkRequest "GET" ["/Line/",toPath ids,"/Route"]

data LineLineRoutesByIds  

-- | /Optional Param/ "serviceTypes" - A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam LineLineRoutesByIds ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces LineLineRoutesByIds MimeJSON
-- | @text/json@
instance Produces LineLineRoutesByIds MimeTextjson
-- | @application/xml@
instance Produces LineLineRoutesByIds MimeXML
-- | @text/xml@
instance Produces LineLineRoutesByIds MimeTextxml


-- *** lineMetaDisruptionCategories

-- | @GET \/Line\/Meta\/DisruptionCategories@
-- 
-- Gets a list of valid disruption categories
-- 
lineMetaDisruptionCategories 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest LineMetaDisruptionCategories MimeNoContent [Text] accept
lineMetaDisruptionCategories  _ =
  _mkRequest "GET" ["/Line/Meta/DisruptionCategories"]

data LineMetaDisruptionCategories  
-- | @application/json@
instance Produces LineMetaDisruptionCategories MimeJSON
-- | @text/json@
instance Produces LineMetaDisruptionCategories MimeTextjson
-- | @application/xml@
instance Produces LineMetaDisruptionCategories MimeXML
-- | @text/xml@
instance Produces LineMetaDisruptionCategories MimeTextxml


-- *** lineMetaModes

-- | @GET \/Line\/Meta\/Modes@
-- 
-- Gets a list of valid modes
-- 
lineMetaModes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest LineMetaModes MimeNoContent [TflApiPresentationEntitiesMode] accept
lineMetaModes  _ =
  _mkRequest "GET" ["/Line/Meta/Modes"]

data LineMetaModes  
-- | @application/json@
instance Produces LineMetaModes MimeJSON
-- | @text/json@
instance Produces LineMetaModes MimeTextjson
-- | @application/xml@
instance Produces LineMetaModes MimeXML
-- | @text/xml@
instance Produces LineMetaModes MimeTextxml


-- *** lineMetaServiceTypes

-- | @GET \/Line\/Meta\/ServiceTypes@
-- 
-- Gets a list of valid ServiceTypes to filter on
-- 
lineMetaServiceTypes 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest LineMetaServiceTypes MimeNoContent [Text] accept
lineMetaServiceTypes  _ =
  _mkRequest "GET" ["/Line/Meta/ServiceTypes"]

data LineMetaServiceTypes  
-- | @application/json@
instance Produces LineMetaServiceTypes MimeJSON
-- | @text/json@
instance Produces LineMetaServiceTypes MimeTextjson
-- | @application/xml@
instance Produces LineMetaServiceTypes MimeXML
-- | @text/xml@
instance Produces LineMetaServiceTypes MimeTextxml


-- *** lineMetaSeverity

-- | @GET \/Line\/Meta\/Severity@
-- 
-- Gets a list of valid severity codes
-- 
lineMetaSeverity 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest LineMetaSeverity MimeNoContent [TflApiPresentationEntitiesStatusSeverity] accept
lineMetaSeverity  _ =
  _mkRequest "GET" ["/Line/Meta/Severity"]

data LineMetaSeverity  
-- | @application/json@
instance Produces LineMetaSeverity MimeJSON
-- | @text/json@
instance Produces LineMetaSeverity MimeTextjson
-- | @application/xml@
instance Produces LineMetaSeverity MimeXML
-- | @text/xml@
instance Produces LineMetaSeverity MimeTextxml


-- *** lineRoute

-- | @GET \/Line\/Route@
-- 
-- Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
-- 
lineRoute 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest LineRoute MimeNoContent [TflApiPresentationEntitiesLine] accept
lineRoute  _ =
  _mkRequest "GET" ["/Line/Route"]

data LineRoute  

-- | /Optional Param/ "serviceTypes" - A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam LineRoute ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces LineRoute MimeJSON
-- | @text/json@
instance Produces LineRoute MimeTextjson
-- | @application/xml@
instance Produces LineRoute MimeXML
-- | @text/xml@
instance Produces LineRoute MimeTextxml


-- *** lineRouteByMode

-- | @GET \/Line\/Mode\/{modes}\/Route@
-- 
-- Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
-- 
lineRouteByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-separated list of modes e.g. tube,dlr
  -> TransportForLondonUnifiedRequest LineRouteByMode MimeNoContent [TflApiPresentationEntitiesLine] accept
lineRouteByMode  _ (Modes modes) =
  _mkRequest "GET" ["/Line/Mode/",toPath modes,"/Route"]

data LineRouteByMode  

-- | /Optional Param/ "serviceTypes" - A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam LineRouteByMode ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces LineRouteByMode MimeJSON
-- | @text/json@
instance Produces LineRouteByMode MimeTextjson
-- | @application/xml@
instance Produces LineRouteByMode MimeXML
-- | @text/xml@
instance Produces LineRouteByMode MimeTextxml


-- *** lineRouteSequence

-- | @GET \/Line\/{id}\/Route\/Sequence\/{direction}@
-- 
-- Gets all valid routes for given line id, including the sequence of stops on each route.
-- 
lineRouteSequence 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A single line id e.g. victoria
  -> Direction -- ^ "direction" -  The direction of travel. Can be inbound or outbound.
  -> TransportForLondonUnifiedRequest LineRouteSequence MimeNoContent TflApiPresentationEntitiesRouteSequence accept
lineRouteSequence  _ (Id id) (Direction direction) =
  _mkRequest "GET" ["/Line/",toPath id,"/Route/Sequence/",toPath direction]

data LineRouteSequence  

-- | /Optional Param/ "serviceTypes" - A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam LineRouteSequence ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)

-- | /Optional Param/ "excludeCrowding" - That excludes crowding from line disruptions. Can be true or false.
instance HasOptionalParam LineRouteSequence ExcludeCrowding where
  applyOptionalParam req (ExcludeCrowding xs) =
    req `setQuery` toQuery ("excludeCrowding", Just xs)
-- | @application/json@
instance Produces LineRouteSequence MimeJSON
-- | @text/json@
instance Produces LineRouteSequence MimeTextjson
-- | @application/xml@
instance Produces LineRouteSequence MimeXML
-- | @text/xml@
instance Produces LineRouteSequence MimeTextxml


-- *** lineSearch

-- | @GET \/Line\/Search\/{query}@
-- 
-- Search for lines or routes matching the query string
-- 
lineSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Query -- ^ "query" -  Search term e.g victoria
  -> TransportForLondonUnifiedRequest LineSearch MimeNoContent TflApiPresentationEntitiesRouteSearchResponse accept
lineSearch  _ (Query query) =
  _mkRequest "GET" ["/Line/Search/",toPath query]

data LineSearch  

-- | /Optional Param/ "modes" - Optionally filter by the specified modes
instance HasOptionalParam LineSearch Modes where
  applyOptionalParam req (Modes xs) =
    req `setQuery` toQueryColl MultiParamArray ("modes", Just xs)

-- | /Optional Param/ "serviceTypes" - A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
instance HasOptionalParam LineSearch ServiceTypes where
  applyOptionalParam req (ServiceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceTypes", Just xs)
-- | @application/json@
instance Produces LineSearch MimeJSON
-- | @text/json@
instance Produces LineSearch MimeTextjson
-- | @application/xml@
instance Produces LineSearch MimeXML
-- | @text/xml@
instance Produces LineSearch MimeTextxml


-- *** lineStatus

-- | @GET \/Line\/{ids}\/Status\/{StartDate}\/to\/{EndDate}@
-- 
-- Gets the line status for given line ids during the provided dates e.g Minor Delays
-- 
lineStatus 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> StartDate -- ^ "startDate"
  -> EndDate -- ^ "endDate"
  -> TransportForLondonUnifiedRequest LineStatus MimeNoContent [TflApiPresentationEntitiesLine] accept
lineStatus  _ (Ids ids) (StartDate startDate) (EndDate endDate) =
  _mkRequest "GET" ["/Line/",toPath ids,"/Status/{StartDate}/to/{EndDate}"]
    `setQuery` toQuery ("startDate", Just startDate)
    `setQuery` toQuery ("endDate", Just endDate)

data LineStatus  

-- | /Optional Param/ "detail" - Include details of the disruptions that are causing the line status including the affected stops and routes
instance HasOptionalParam LineStatus Detail where
  applyOptionalParam req (Detail xs) =
    req `setQuery` toQuery ("detail", Just xs)
instance HasOptionalParam LineStatus DateRangeStartDate where
  applyOptionalParam req (DateRangeStartDate xs) =
    req `setQuery` toQuery ("dateRange.startDate", Just xs)
instance HasOptionalParam LineStatus DateRangeEndDate where
  applyOptionalParam req (DateRangeEndDate xs) =
    req `setQuery` toQuery ("dateRange.endDate", Just xs)
-- | @application/json@
instance Produces LineStatus MimeJSON
-- | @text/json@
instance Produces LineStatus MimeTextjson
-- | @application/xml@
instance Produces LineStatus MimeXML
-- | @text/xml@
instance Produces LineStatus MimeTextxml


-- *** lineStatusByIds

-- | @GET \/Line\/{ids}\/Status@
-- 
-- Gets the line status of for given line ids e.g Minor Delays
-- 
lineStatusByIds 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids" -  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.
  -> TransportForLondonUnifiedRequest LineStatusByIds MimeNoContent [TflApiPresentationEntitiesLine] accept
lineStatusByIds  _ (Ids ids) =
  _mkRequest "GET" ["/Line/",toPath ids,"/Status"]

data LineStatusByIds  

-- | /Optional Param/ "detail" - Include details of the disruptions that are causing the line status including the affected stops and routes
instance HasOptionalParam LineStatusByIds Detail where
  applyOptionalParam req (Detail xs) =
    req `setQuery` toQuery ("detail", Just xs)
-- | @application/json@
instance Produces LineStatusByIds MimeJSON
-- | @text/json@
instance Produces LineStatusByIds MimeTextjson
-- | @application/xml@
instance Produces LineStatusByIds MimeXML
-- | @text/xml@
instance Produces LineStatusByIds MimeTextxml


-- *** lineStatusByMode

-- | @GET \/Line\/Mode\/{modes}\/Status@
-- 
-- Gets the line status of for all lines for the given modes
-- 
lineStatusByMode 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Modes -- ^ "modes" -  A comma-separated list of modes to filter by. e.g. tube,dlr
  -> TransportForLondonUnifiedRequest LineStatusByMode MimeNoContent [TflApiPresentationEntitiesLine] accept
lineStatusByMode  _ (Modes modes) =
  _mkRequest "GET" ["/Line/Mode/",toPath modes,"/Status"]

data LineStatusByMode  

-- | /Optional Param/ "detail" - Include details of the disruptions that are causing the line status including the affected stops and routes
instance HasOptionalParam LineStatusByMode Detail where
  applyOptionalParam req (Detail xs) =
    req `setQuery` toQuery ("detail", Just xs)

-- | /Optional Param/ "severityLevel" - If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level.
instance HasOptionalParam LineStatusByMode SeverityLevel where
  applyOptionalParam req (SeverityLevel xs) =
    req `setQuery` toQuery ("severityLevel", Just xs)
-- | @application/json@
instance Produces LineStatusByMode MimeJSON
-- | @text/json@
instance Produces LineStatusByMode MimeTextjson
-- | @application/xml@
instance Produces LineStatusByMode MimeXML
-- | @text/xml@
instance Produces LineStatusByMode MimeTextxml


-- *** lineStatusBySeverity

-- | @GET \/Line\/Status\/{severity}@
-- 
-- Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
-- 
lineStatusBySeverity 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Severity -- ^ "severity" -  The level of severity (eg: a number from 0 to 14)
  -> TransportForLondonUnifiedRequest LineStatusBySeverity MimeNoContent [TflApiPresentationEntitiesLine] accept
lineStatusBySeverity  _ (Severity severity) =
  _mkRequest "GET" ["/Line/Status/",toPath severity]

data LineStatusBySeverity  
-- | @application/json@
instance Produces LineStatusBySeverity MimeJSON
-- | @text/json@
instance Produces LineStatusBySeverity MimeTextjson
-- | @application/xml@
instance Produces LineStatusBySeverity MimeXML
-- | @text/xml@
instance Produces LineStatusBySeverity MimeTextxml


-- *** lineStopPoints

-- | @GET \/Line\/{id}\/StopPoints@
-- 
-- Gets a list of the stations that serve the given line id
-- 
lineStopPoints 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A single line id e.g. victoria
  -> TransportForLondonUnifiedRequest LineStopPoints MimeNoContent [TflApiPresentationEntitiesStopPoint] accept
lineStopPoints  _ (Id id) =
  _mkRequest "GET" ["/Line/",toPath id,"/StopPoints"]

data LineStopPoints  

-- | /Optional Param/ "tflOperatedNationalRailStationsOnly" - If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned
instance HasOptionalParam LineStopPoints TflOperatedNationalRailStationsOnly where
  applyOptionalParam req (TflOperatedNationalRailStationsOnly xs) =
    req `setQuery` toQuery ("tflOperatedNationalRailStationsOnly", Just xs)
-- | @application/json@
instance Produces LineStopPoints MimeJSON
-- | @text/json@
instance Produces LineStopPoints MimeTextjson
-- | @application/xml@
instance Produces LineStopPoints MimeXML
-- | @text/xml@
instance Produces LineStopPoints MimeTextxml


-- *** lineTimetable

-- | @GET \/Line\/{id}\/Timetable\/{fromStopPointId}@
-- 
-- Gets the timetable for a specified station on the give line
-- 
lineTimetable 
  :: Accept accept -- ^ request accept ('MimeType')
  -> FromStopPointId -- ^ "fromStopPointId" -  The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> Id -- ^ "id" -  A single line id e.g. victoria
  -> TransportForLondonUnifiedRequest LineTimetable MimeNoContent TflApiPresentationEntitiesTimetableResponse accept
lineTimetable  _ (FromStopPointId fromStopPointId) (Id id) =
  _mkRequest "GET" ["/Line/",toPath id,"/Timetable/",toPath fromStopPointId]

data LineTimetable  
-- | @application/json@
instance Produces LineTimetable MimeJSON
-- | @text/json@
instance Produces LineTimetable MimeTextjson
-- | @application/xml@
instance Produces LineTimetable MimeXML
-- | @text/xml@
instance Produces LineTimetable MimeTextxml


-- *** lineTimetableTo

-- | @GET \/Line\/{id}\/Timetable\/{fromStopPointId}\/to\/{toStopPointId}@
-- 
-- Gets the timetable for a specified station on the give line with specified destination
-- 
lineTimetableTo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> FromStopPointId -- ^ "fromStopPointId" -  The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
  -> Id -- ^ "id" -  A single line id e.g. victoria
  -> ToStopPointId -- ^ "toStopPointId" -  The destination stations's Naptan code
  -> TransportForLondonUnifiedRequest LineTimetableTo MimeNoContent TflApiPresentationEntitiesTimetableResponse accept
lineTimetableTo  _ (FromStopPointId fromStopPointId) (Id id) (ToStopPointId toStopPointId) =
  _mkRequest "GET" ["/Line/",toPath id,"/Timetable/",toPath fromStopPointId,"/to/",toPath toStopPointId]

data LineTimetableTo  
-- | @application/json@
instance Produces LineTimetableTo MimeJSON
-- | @text/json@
instance Produces LineTimetableTo MimeTextjson
-- | @application/xml@
instance Produces LineTimetableTo MimeXML
-- | @text/xml@
instance Produces LineTimetableTo MimeTextxml

