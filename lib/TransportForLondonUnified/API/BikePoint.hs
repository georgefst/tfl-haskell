{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.BikePoint
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.BikePoint where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** BikePoint

-- *** bikePointGet

-- | @GET \/BikePoint\/{id}@
-- 
-- Gets the bike point with the given id.
-- 
bikePointGet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id" -  A bike point id (a list of ids can be obtained from the above BikePoint call)
  -> TransportForLondonUnifiedRequest BikePointGet MimeNoContent TflApiPresentationEntitiesPlace accept
bikePointGet  _ (Id id) =
  _mkRequest "GET" ["/BikePoint/",toPath id]

data BikePointGet  
-- | @application/json@
instance Produces BikePointGet MimeJSON
-- | @text/json@
instance Produces BikePointGet MimeTextjson
-- | @application/xml@
instance Produces BikePointGet MimeXML
-- | @text/xml@
instance Produces BikePointGet MimeTextxml


-- *** bikePointGetAll

-- | @GET \/BikePoint@
-- 
-- Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces              numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
-- 
bikePointGetAll 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest BikePointGetAll MimeNoContent [TflApiPresentationEntitiesPlace] accept
bikePointGetAll  _ =
  _mkRequest "GET" ["/BikePoint"]

data BikePointGetAll  
-- | @application/json@
instance Produces BikePointGetAll MimeJSON
-- | @text/json@
instance Produces BikePointGetAll MimeTextjson
-- | @application/xml@
instance Produces BikePointGetAll MimeXML
-- | @text/xml@
instance Produces BikePointGetAll MimeTextxml


-- *** bikePointSearch

-- | @GET \/BikePoint\/Search@
-- 
-- Search for bike stations by their name, a bike point's name often contains information about the name of the street              or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status              or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
-- 
bikePointSearch 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Query -- ^ "query" -  The search term e.g. \"St. James\"
  -> TransportForLondonUnifiedRequest BikePointSearch MimeNoContent [TflApiPresentationEntitiesPlace] accept
bikePointSearch  _ (Query query) =
  _mkRequest "GET" ["/BikePoint/Search"]
    `setQuery` toQuery ("query", Just query)

data BikePointSearch  
-- | @application/json@
instance Produces BikePointSearch MimeJSON
-- | @text/json@
instance Produces BikePointSearch MimeTextjson
-- | @application/xml@
instance Produces BikePointSearch MimeXML
-- | @text/xml@
instance Produces BikePointSearch MimeTextxml

