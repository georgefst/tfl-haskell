{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.API.Journey
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.API.Journey where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes
import TransportForLondonUnified.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Journey

-- *** journeyJourneyResults

-- | @GET \/Journey\/JourneyResults\/{from}\/to\/{to}@
-- 
-- Perform a Journey Planner search from the parameters specified in simple types
-- 
journeyJourneyResults 
  :: Accept accept -- ^ request accept ('MimeType')
  -> From -- ^ "from" -  Origin of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
  -> To -- ^ "to" -  Destination of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
  -> TransportForLondonUnifiedRequest JourneyJourneyResults MimeNoContent TflApiPresentationEntitiesJourneyPlannerItineraryResult accept
journeyJourneyResults  _ (From from) (To to) =
  _mkRequest "GET" ["/Journey/JourneyResults/",toPath from,"/to/",toPath to]

data JourneyJourneyResults  

-- | /Optional Param/ "via" - Travel through point on the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
instance HasOptionalParam JourneyJourneyResults Via where
  applyOptionalParam req (Via xs) =
    req `setQuery` toQuery ("via", Just xs)

-- | /Optional Param/ "nationalSearch" - Does the journey cover stops outside London? eg. \"nationalSearch=true\"
instance HasOptionalParam JourneyJourneyResults NationalSearch where
  applyOptionalParam req (NationalSearch xs) =
    req `setQuery` toQuery ("nationalSearch", Just xs)

-- | /Optional Param/ "date" - The date must be in yyyyMMdd format
instance HasOptionalParam JourneyJourneyResults ParamDate where
  applyOptionalParam req (ParamDate xs) =
    req `setQuery` toQuery ("date", Just xs)

-- | /Optional Param/ "time" - The time must be in HHmm format
instance HasOptionalParam JourneyJourneyResults Time where
  applyOptionalParam req (Time xs) =
    req `setQuery` toQuery ("time", Just xs)

-- | /Optional Param/ "timeIs" - Does the time given relate to arrival or leaving time? Possible options: \"departing\" | \"arriving\"
instance HasOptionalParam JourneyJourneyResults TimeIs where
  applyOptionalParam req (TimeIs xs) =
    req `setQuery` toQuery ("timeIs", Just xs)

-- | /Optional Param/ "journeyPreference" - The journey preference eg possible options: \"leastinterchange\" | \"leasttime\" | \"leastwalking\"
instance HasOptionalParam JourneyJourneyResults JourneyPreference where
  applyOptionalParam req (JourneyPreference xs) =
    req `setQuery` toQuery ("journeyPreference", Just xs)

-- | /Optional Param/ "mode" - The mode must be a comma separated list of modes. eg possible options: \"public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\"
instance HasOptionalParam JourneyJourneyResults Mode where
  applyOptionalParam req (Mode xs) =
    req `setQuery` toQueryColl MultiParamArray ("mode", Just xs)

-- | /Optional Param/ "accessibilityPreference" - The accessibility preference must be a comma separated list eg. \"noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\"
instance HasOptionalParam JourneyJourneyResults AccessibilityPreference where
  applyOptionalParam req (AccessibilityPreference xs) =
    req `setQuery` toQueryColl MultiParamArray ("accessibilityPreference", Just xs)

-- | /Optional Param/ "fromName" - An optional name to associate with the origin of the journey in the results.
instance HasOptionalParam JourneyJourneyResults FromName where
  applyOptionalParam req (FromName xs) =
    req `setQuery` toQuery ("fromName", Just xs)

-- | /Optional Param/ "toName" - An optional name to associate with the destination of the journey in the results.
instance HasOptionalParam JourneyJourneyResults ToName where
  applyOptionalParam req (ToName xs) =
    req `setQuery` toQuery ("toName", Just xs)

-- | /Optional Param/ "viaName" - An optional name to associate with the via point of the journey in the results.
instance HasOptionalParam JourneyJourneyResults ViaName where
  applyOptionalParam req (ViaName xs) =
    req `setQuery` toQuery ("viaName", Just xs)

-- | /Optional Param/ "maxTransferMinutes" - The max walking time in minutes for transfer eg. \"120\"
instance HasOptionalParam JourneyJourneyResults MaxTransferMinutes where
  applyOptionalParam req (MaxTransferMinutes xs) =
    req `setQuery` toQuery ("maxTransferMinutes", Just xs)

-- | /Optional Param/ "maxWalkingMinutes" - The max walking time in minutes for journeys eg. \"120\"
instance HasOptionalParam JourneyJourneyResults MaxWalkingMinutes where
  applyOptionalParam req (MaxWalkingMinutes xs) =
    req `setQuery` toQuery ("maxWalkingMinutes", Just xs)

-- | /Optional Param/ "walkingSpeed" - The walking speed. eg possible options: \"slow\" | \"average\" | \"fast\".
instance HasOptionalParam JourneyJourneyResults WalkingSpeed where
  applyOptionalParam req (WalkingSpeed xs) =
    req `setQuery` toQuery ("walkingSpeed", Just xs)

-- | /Optional Param/ "cyclePreference" - The cycle preference. eg possible options: \"allTheWay\" | \"leaveAtStation\" | \"takeOnTransport\" | \"cycleHire\"
instance HasOptionalParam JourneyJourneyResults CyclePreference where
  applyOptionalParam req (CyclePreference xs) =
    req `setQuery` toQuery ("cyclePreference", Just xs)

-- | /Optional Param/ "adjustment" - Time adjustment command. eg possible options: \"TripFirst\" | \"TripLast\"
instance HasOptionalParam JourneyJourneyResults Adjustment where
  applyOptionalParam req (Adjustment xs) =
    req `setQuery` toQuery ("adjustment", Just xs)

-- | /Optional Param/ "bikeProficiency" - A comma separated list of cycling proficiency levels. eg possible options: \"easy,moderate,fast\"
instance HasOptionalParam JourneyJourneyResults BikeProficiency where
  applyOptionalParam req (BikeProficiency xs) =
    req `setQuery` toQueryColl MultiParamArray ("bikeProficiency", Just xs)

-- | /Optional Param/ "alternativeCycle" - Option to determine whether to return alternative cycling journey
instance HasOptionalParam JourneyJourneyResults AlternativeCycle where
  applyOptionalParam req (AlternativeCycle xs) =
    req `setQuery` toQuery ("alternativeCycle", Just xs)

-- | /Optional Param/ "alternativeWalking" - Option to determine whether to return alternative walking journey
instance HasOptionalParam JourneyJourneyResults AlternativeWalking where
  applyOptionalParam req (AlternativeWalking xs) =
    req `setQuery` toQuery ("alternativeWalking", Just xs)

-- | /Optional Param/ "applyHtmlMarkup" - Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.
instance HasOptionalParam JourneyJourneyResults ApplyHtmlMarkup where
  applyOptionalParam req (ApplyHtmlMarkup xs) =
    req `setQuery` toQuery ("applyHtmlMarkup", Just xs)

-- | /Optional Param/ "useMultiModalCall" - A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey
instance HasOptionalParam JourneyJourneyResults UseMultiModalCall where
  applyOptionalParam req (UseMultiModalCall xs) =
    req `setQuery` toQuery ("useMultiModalCall", Just xs)

-- | /Optional Param/ "walkingOptimization" - A boolean to indicate whether to optimize journeys using walking
instance HasOptionalParam JourneyJourneyResults WalkingOptimization where
  applyOptionalParam req (WalkingOptimization xs) =
    req `setQuery` toQuery ("walkingOptimization", Just xs)

-- | /Optional Param/ "taxiOnlyTrip" - A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \"useMultiModalCall\".
instance HasOptionalParam JourneyJourneyResults TaxiOnlyTrip where
  applyOptionalParam req (TaxiOnlyTrip xs) =
    req `setQuery` toQuery ("taxiOnlyTrip", Just xs)

-- | /Optional Param/ "routeBetweenEntrances" - A boolean to indicate whether public transport routes should include directions between platforms and station entrances.
instance HasOptionalParam JourneyJourneyResults RouteBetweenEntrances where
  applyOptionalParam req (RouteBetweenEntrances xs) =
    req `setQuery` toQuery ("routeBetweenEntrances", Just xs)

-- | /Optional Param/ "useRealTimeLiveArrivals" - A boolean to indicate if we want to receive real time live arrivals data where available.
instance HasOptionalParam JourneyJourneyResults UseRealTimeLiveArrivals where
  applyOptionalParam req (UseRealTimeLiveArrivals xs) =
    req `setQuery` toQuery ("useRealTimeLiveArrivals", Just xs)

-- | /Optional Param/ "calcOneDirection" - A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the 'depart' time, or before the 'arrive' time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions.
instance HasOptionalParam JourneyJourneyResults CalcOneDirection where
  applyOptionalParam req (CalcOneDirection xs) =
    req `setQuery` toQuery ("calcOneDirection", Just xs)

-- | /Optional Param/ "includeAlternativeRoutes" - A boolean to make Journey Planner return alternative routes. Alternative routes are calculated by removing one or more lines included in the fastest route and re-calculating. By default, these journeys will not be returned.
instance HasOptionalParam JourneyJourneyResults IncludeAlternativeRoutes where
  applyOptionalParam req (IncludeAlternativeRoutes xs) =
    req `setQuery` toQuery ("includeAlternativeRoutes", Just xs)

-- | /Optional Param/ "overrideMultiModalScenario" - An optional integer to indicate what multi modal scenario we want to use.
instance HasOptionalParam JourneyJourneyResults OverrideMultiModalScenario where
  applyOptionalParam req (OverrideMultiModalScenario xs) =
    req `setQuery` toQuery ("overrideMultiModalScenario", Just xs)

-- | /Optional Param/ "combineTransferLegs" - A boolean to indicate whether walking leg to station entrance and walking leg from station entrance to platform should be combined. Defaults to true
instance HasOptionalParam JourneyJourneyResults CombineTransferLegs where
  applyOptionalParam req (CombineTransferLegs xs) =
    req `setQuery` toQuery ("combineTransferLegs", Just xs)
-- | @application/json@
instance Produces JourneyJourneyResults MimeJSON
-- | @text/json@
instance Produces JourneyJourneyResults MimeTextjson
-- | @application/xml@
instance Produces JourneyJourneyResults MimeXML
-- | @text/xml@
instance Produces JourneyJourneyResults MimeTextxml


-- *** journeyMeta

-- | @GET \/Journey\/Meta\/Modes@
-- 
-- Gets a list of all of the available journey planner modes
-- 
journeyMeta 
  :: Accept accept -- ^ request accept ('MimeType')
  -> TransportForLondonUnifiedRequest JourneyMeta MimeNoContent [TflApiPresentationEntitiesMode] accept
journeyMeta  _ =
  _mkRequest "GET" ["/Journey/Meta/Modes"]

data JourneyMeta  
-- | @application/json@
instance Produces JourneyMeta MimeJSON
-- | @text/json@
instance Produces JourneyMeta MimeTextjson
-- | @application/xml@
instance Produces JourneyMeta MimeXML
-- | @text/xml@
instance Produces JourneyMeta MimeTextxml

