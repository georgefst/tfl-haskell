{-
   Transport for London Unified API

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Transport for London Unified API API version: v1
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : TransportForLondonUnified.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module TransportForLondonUnified.Model where

import TransportForLondonUnified.Core
import TransportForLondonUnified.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** AccessibilityPreference
newtype AccessibilityPreference = AccessibilityPreference { unAccessibilityPreference :: [E'Inner] } deriving (P.Eq, P.Show)

-- ** ActiveOnly
newtype ActiveOnly = ActiveOnly { unActiveOnly :: Bool } deriving (P.Eq, P.Show)

-- ** Adjustment
newtype Adjustment = Adjustment { unAdjustment :: Text } deriving (P.Eq, P.Show)

-- ** AlternativeCycle
newtype AlternativeCycle = AlternativeCycle { unAlternativeCycle :: Bool } deriving (P.Eq, P.Show)

-- ** AlternativeWalking
newtype AlternativeWalking = AlternativeWalking { unAlternativeWalking :: Bool } deriving (P.Eq, P.Show)

-- ** ApplyHtmlMarkup
newtype ApplyHtmlMarkup = ApplyHtmlMarkup { unApplyHtmlMarkup :: Bool } deriving (P.Eq, P.Show)

-- ** BikeProficiency
newtype BikeProficiency = BikeProficiency { unBikeProficiency :: [E'Inner2] } deriving (P.Eq, P.Show)

-- ** CalcOneDirection
newtype CalcOneDirection = CalcOneDirection { unCalcOneDirection :: Bool } deriving (P.Eq, P.Show)

-- ** Categories
newtype Categories = Categories { unCategories :: [Text] } deriving (P.Eq, P.Show)

-- ** Closures
newtype Closures = Closures { unClosures :: Bool } deriving (P.Eq, P.Show)

-- ** CombineTransferLegs
newtype CombineTransferLegs = CombineTransferLegs { unCombineTransferLegs :: Bool } deriving (P.Eq, P.Show)

-- ** CompareType
newtype CompareType = CompareType { unCompareType :: Text } deriving (P.Eq, P.Show)

-- ** CompareValue
newtype CompareValue = CompareValue { unCompareValue :: Text } deriving (P.Eq, P.Show)

-- ** Count
newtype Count = Count { unCount :: Int } deriving (P.Eq, P.Show)

-- ** CyclePreference
newtype CyclePreference = CyclePreference { unCyclePreference :: E'CyclePreference } deriving (P.Eq, P.Show)

-- ** DateRangeEndDate
newtype DateRangeEndDate = DateRangeEndDate { unDateRangeEndDate :: DateTime } deriving (P.Eq, P.Show)

-- ** DateRangeNullableEndDate
newtype DateRangeNullableEndDate = DateRangeNullableEndDate { unDateRangeNullableEndDate :: DateTime } deriving (P.Eq, P.Show)

-- ** DateRangeNullableStartDate
newtype DateRangeNullableStartDate = DateRangeNullableStartDate { unDateRangeNullableStartDate :: DateTime } deriving (P.Eq, P.Show)

-- ** DateRangeStartDate
newtype DateRangeStartDate = DateRangeStartDate { unDateRangeStartDate :: DateTime } deriving (P.Eq, P.Show)

-- ** DestinationStationId
newtype DestinationStationId = DestinationStationId { unDestinationStationId :: Text } deriving (P.Eq, P.Show)

-- ** Detail
newtype Detail = Detail { unDetail :: Bool } deriving (P.Eq, P.Show)

-- ** Direction
newtype Direction = Direction { unDirection :: E'Direction } deriving (P.Eq, P.Show)

-- ** Direction2
newtype Direction2 = Direction2 { unDirection2 :: E'Direction2 } deriving (P.Eq, P.Show)

-- ** DisruptionIds
newtype DisruptionIds = DisruptionIds { unDisruptionIds :: [Text] } deriving (P.Eq, P.Show)

-- ** EndDate
newtype EndDate = EndDate { unEndDate :: Text } deriving (P.Eq, P.Show)

-- ** EndDateDateTime
newtype EndDateDateTime = EndDateDateTime { unEndDateDateTime :: DateTime } deriving (P.Eq, P.Show)

-- ** ExcludeCrowding
newtype ExcludeCrowding = ExcludeCrowding { unExcludeCrowding :: Bool } deriving (P.Eq, P.Show)

-- ** FaresOnly
newtype FaresOnly = FaresOnly { unFaresOnly :: Bool } deriving (P.Eq, P.Show)

-- ** FlattenResponse
newtype FlattenResponse = FlattenResponse { unFlattenResponse :: Bool } deriving (P.Eq, P.Show)

-- ** ForceXml
newtype ForceXml = ForceXml { unForceXml :: Bool } deriving (P.Eq, P.Show)

-- ** From
newtype From = From { unFrom :: Text } deriving (P.Eq, P.Show)

-- ** FromName
newtype FromName = FromName { unFromName :: Text } deriving (P.Eq, P.Show)

-- ** FromStopPointId
newtype FromStopPointId = FromStopPointId { unFromStopPointId :: Text } deriving (P.Eq, P.Show)

-- ** GetFamily
newtype GetFamily = GetFamily { unGetFamily :: Bool } deriving (P.Eq, P.Show)

-- ** Height
newtype Height = Height { unHeight :: Int } deriving (P.Eq, P.Show)

-- ** Id
newtype Id = Id { unId :: Text } deriving (P.Eq, P.Show)

-- ** Ids
newtype Ids = Ids { unIds :: [Text] } deriving (P.Eq, P.Show)

-- ** IncludeAlternativeRoutes
newtype IncludeAlternativeRoutes = IncludeAlternativeRoutes { unIncludeAlternativeRoutes :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeChildren
newtype IncludeChildren = IncludeChildren { unIncludeChildren :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeCrowdingData
newtype IncludeCrowdingData = IncludeCrowdingData { unIncludeCrowdingData :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeHubs
newtype IncludeHubs = IncludeHubs { unIncludeHubs :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeRouteBlockedStops
newtype IncludeRouteBlockedStops = IncludeRouteBlockedStops { unIncludeRouteBlockedStops :: Bool } deriving (P.Eq, P.Show)

-- ** JourneyPreference
newtype JourneyPreference = JourneyPreference { unJourneyPreference :: E'JourneyPreference } deriving (P.Eq, P.Show)

-- ** Lat
newtype Lat = Lat { unLat :: Double } deriving (P.Eq, P.Show)

-- ** LatText
newtype LatText = LatText { unLatText :: Text } deriving (P.Eq, P.Show)

-- ** LegacyFormat
newtype LegacyFormat = LegacyFormat { unLegacyFormat :: Bool } deriving (P.Eq, P.Show)

-- ** Line
newtype Line = Line { unLine :: Text } deriving (P.Eq, P.Show)

-- ** LineId
newtype LineId = LineId { unLineId :: Text } deriving (P.Eq, P.Show)

-- ** LineIds
newtype LineIds = LineIds { unLineIds :: [Text] } deriving (P.Eq, P.Show)

-- ** Lines
newtype Lines = Lines { unLines :: [Text] } deriving (P.Eq, P.Show)

-- ** LocationLat
newtype LocationLat = LocationLat { unLocationLat :: Double } deriving (P.Eq, P.Show)

-- ** LocationLon
newtype LocationLon = LocationLon { unLocationLon :: Double } deriving (P.Eq, P.Show)

-- ** Lon
newtype Lon = Lon { unLon :: Double } deriving (P.Eq, P.Show)

-- ** LonText
newtype LonText = LonText { unLonText :: Text } deriving (P.Eq, P.Show)

-- ** MapCenterLat
newtype MapCenterLat = MapCenterLat { unMapCenterLat :: Double } deriving (P.Eq, P.Show)

-- ** MapCenterLon
newtype MapCenterLon = MapCenterLon { unMapCenterLon :: Double } deriving (P.Eq, P.Show)

-- ** MaxResults
newtype MaxResults = MaxResults { unMaxResults :: Int } deriving (P.Eq, P.Show)

-- ** MaxTransferMinutes
newtype MaxTransferMinutes = MaxTransferMinutes { unMaxTransferMinutes :: Text } deriving (P.Eq, P.Show)

-- ** MaxWalkingMinutes
newtype MaxWalkingMinutes = MaxWalkingMinutes { unMaxWalkingMinutes :: Text } deriving (P.Eq, P.Show)

-- ** Mode
newtype Mode = Mode { unMode :: [Text] } deriving (P.Eq, P.Show)

-- ** ModeId
newtype ModeId = ModeId { unModeId :: Text } deriving (P.Eq, P.Show)

-- ** ModeText
newtype ModeText = ModeText { unModeText :: Text } deriving (P.Eq, P.Show)

-- ** Modes
newtype Modes = Modes { unModes :: [Text] } deriving (P.Eq, P.Show)

-- ** Name
newtype Name = Name { unName :: Text } deriving (P.Eq, P.Show)

-- ** NationalSearch
newtype NationalSearch = NationalSearch { unNationalSearch :: Bool } deriving (P.Eq, P.Show)

-- ** NumberOfPlacesToReturn
newtype NumberOfPlacesToReturn = NumberOfPlacesToReturn { unNumberOfPlacesToReturn :: Int } deriving (P.Eq, P.Show)

-- ** Optype
newtype Optype = Optype { unOptype :: Text } deriving (P.Eq, P.Show)

-- ** Output
newtype Output = Output { unOutput :: Text } deriving (P.Eq, P.Show)

-- ** OverrideMultiModalScenario
newtype OverrideMultiModalScenario = OverrideMultiModalScenario { unOverrideMultiModalScenario :: Int } deriving (P.Eq, P.Show)

-- ** Page
newtype Page = Page { unPage :: Int } deriving (P.Eq, P.Show)

-- ** ParamDate
newtype ParamDate = ParamDate { unParamDate :: Text } deriving (P.Eq, P.Show)

-- ** ParamType
newtype ParamType = ParamType { unParamType :: [Text] } deriving (P.Eq, P.Show)

-- ** PinLat
newtype PinLat = PinLat { unPinLat :: Double } deriving (P.Eq, P.Show)

-- ** PinLon
newtype PinLon = PinLon { unPinLon :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoLat
newtype PlaceGeoLat = PlaceGeoLat { unPlaceGeoLat :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoLon
newtype PlaceGeoLon = PlaceGeoLon { unPlaceGeoLon :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoNeLat
newtype PlaceGeoNeLat = PlaceGeoNeLat { unPlaceGeoNeLat :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoNeLon
newtype PlaceGeoNeLon = PlaceGeoNeLon { unPlaceGeoNeLon :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoSwLat
newtype PlaceGeoSwLat = PlaceGeoSwLat { unPlaceGeoSwLat :: Double } deriving (P.Eq, P.Show)

-- ** PlaceGeoSwLon
newtype PlaceGeoSwLon = PlaceGeoSwLon { unPlaceGeoSwLon :: Double } deriving (P.Eq, P.Show)

-- ** PlaceTypes
newtype PlaceTypes = PlaceTypes { unPlaceTypes :: [Text] } deriving (P.Eq, P.Show)

-- ** Postcode
newtype Postcode = Postcode { unPostcode :: Text } deriving (P.Eq, P.Show)

-- ** PostcodeInputPostcode
newtype PostcodeInputPostcode = PostcodeInputPostcode { unPostcodeInputPostcode :: Text } deriving (P.Eq, P.Show)

-- ** Query
newtype Query = Query { unQuery :: Text } deriving (P.Eq, P.Show)

-- ** Radius
newtype Radius = Radius { unRadius :: Double } deriving (P.Eq, P.Show)

-- ** RadiusInt
newtype RadiusInt = RadiusInt { unRadiusInt :: Int } deriving (P.Eq, P.Show)

-- ** ReturnLines
newtype ReturnLines = ReturnLines { unReturnLines :: Bool } deriving (P.Eq, P.Show)

-- ** RouteBetweenEntrances
newtype RouteBetweenEntrances = RouteBetweenEntrances { unRouteBetweenEntrances :: Bool } deriving (P.Eq, P.Show)

-- ** ScenarioTitle
newtype ScenarioTitle = ScenarioTitle { unScenarioTitle :: Text } deriving (P.Eq, P.Show)

-- ** ServiceTypes
newtype ServiceTypes = ServiceTypes { unServiceTypes :: [E'ServiceType] } deriving (P.Eq, P.Show)

-- ** Severities
newtype Severities = Severities { unSeverities :: [Text] } deriving (P.Eq, P.Show)

-- ** Severity
newtype Severity = Severity { unSeverity :: Int } deriving (P.Eq, P.Show)

-- ** SeverityLevel
newtype SeverityLevel = SeverityLevel { unSeverityLevel :: Text } deriving (P.Eq, P.Show)

-- ** StartDate
newtype StartDate = StartDate { unStartDate :: Text } deriving (P.Eq, P.Show)

-- ** StartDateDateTime
newtype StartDateDateTime = StartDateDateTime { unStartDateDateTime :: DateTime } deriving (P.Eq, P.Show)

-- ** StopPointId
newtype StopPointId = StopPointId { unStopPointId :: Text } deriving (P.Eq, P.Show)

-- ** StopTypes
newtype StopTypes = StopTypes { unStopTypes :: [Text] } deriving (P.Eq, P.Show)

-- ** StripContent
newtype StripContent = StripContent { unStripContent :: Bool } deriving (P.Eq, P.Show)

-- ** TaxiOnlyTrip
newtype TaxiOnlyTrip = TaxiOnlyTrip { unTaxiOnlyTrip :: Bool } deriving (P.Eq, P.Show)

-- ** TflOperatedNationalRailStationsOnly
newtype TflOperatedNationalRailStationsOnly = TflOperatedNationalRailStationsOnly { unTflOperatedNationalRailStationsOnly :: Bool } deriving (P.Eq, P.Show)

-- ** Time
newtype Time = Time { unTime :: Text } deriving (P.Eq, P.Show)

-- ** TimeIs
newtype TimeIs = TimeIs { unTimeIs :: E'DateTimeType } deriving (P.Eq, P.Show)

-- ** TimeOfDayId
newtype TimeOfDayId = TimeOfDayId { unTimeOfDayId :: Text } deriving (P.Eq, P.Show)

-- ** To
newtype To = To { unTo :: Text } deriving (P.Eq, P.Show)

-- ** ToName
newtype ToName = ToName { unToName :: Text } deriving (P.Eq, P.Show)

-- ** ToStopPointId
newtype ToStopPointId = ToStopPointId { unToStopPointId :: Text } deriving (P.Eq, P.Show)

-- ** TravelTimeInterval
newtype TravelTimeInterval = TravelTimeInterval { unTravelTimeInterval :: Int } deriving (P.Eq, P.Show)

-- ** TwentyFourSevenOnly
newtype TwentyFourSevenOnly = TwentyFourSevenOnly { unTwentyFourSevenOnly :: Bool } deriving (P.Eq, P.Show)

-- ** Types
newtype Types = Types { unTypes :: [Text] } deriving (P.Eq, P.Show)

-- ** UseMultiModalCall
newtype UseMultiModalCall = UseMultiModalCall { unUseMultiModalCall :: Bool } deriving (P.Eq, P.Show)

-- ** UseRealTimeLiveArrivals
newtype UseRealTimeLiveArrivals = UseRealTimeLiveArrivals { unUseRealTimeLiveArrivals :: Bool } deriving (P.Eq, P.Show)

-- ** UseStopPointHierarchy
newtype UseStopPointHierarchy = UseStopPointHierarchy { unUseStopPointHierarchy :: Bool } deriving (P.Eq, P.Show)

-- ** Via
newtype Via = Via { unVia :: Text } deriving (P.Eq, P.Show)

-- ** ViaName
newtype ViaName = ViaName { unViaName :: Text } deriving (P.Eq, P.Show)

-- ** WalkingOptimization
newtype WalkingOptimization = WalkingOptimization { unWalkingOptimization :: Bool } deriving (P.Eq, P.Show)

-- ** WalkingSpeed
newtype WalkingSpeed = WalkingSpeed { unWalkingSpeed :: E'WalkingSpeed } deriving (P.Eq, P.Show)

-- ** Wc
newtype Wc = Wc { unWc :: Text } deriving (P.Eq, P.Show)

-- ** Width
newtype Width = Width { unWidth :: Int } deriving (P.Eq, P.Show)

-- ** Year
newtype Year = Year { unYear :: Int } deriving (P.Eq, P.Show)

-- ** Z
newtype Z = Z { unZ :: Int } deriving (P.Eq, P.Show)

-- * Models


-- ** SystemDataSpatialDbGeography
-- | SystemDataSpatialDbGeography
data SystemDataSpatialDbGeography = SystemDataSpatialDbGeography
  { systemDataSpatialDbGeographyGeography :: !(Maybe SystemDataSpatialDbGeographyWellKnownValue) -- ^ "geography"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SystemDataSpatialDbGeography
instance A.FromJSON SystemDataSpatialDbGeography where
  parseJSON = A.withObject "SystemDataSpatialDbGeography" $ \o ->
    SystemDataSpatialDbGeography
      <$> (o .:? "geography")

-- | ToJSON SystemDataSpatialDbGeography
instance A.ToJSON SystemDataSpatialDbGeography where
  toJSON SystemDataSpatialDbGeography {..} =
   _omitNulls
      [ "geography" .= systemDataSpatialDbGeographyGeography
      ]


-- | Construct a value of type 'SystemDataSpatialDbGeography' (by applying it's required fields, if any)
mkSystemDataSpatialDbGeography
  :: SystemDataSpatialDbGeography
mkSystemDataSpatialDbGeography =
  SystemDataSpatialDbGeography
  { systemDataSpatialDbGeographyGeography = Nothing
  }

-- ** SystemDataSpatialDbGeographyWellKnownValue
-- | SystemDataSpatialDbGeographyWellKnownValue
data SystemDataSpatialDbGeographyWellKnownValue = SystemDataSpatialDbGeographyWellKnownValue
  { systemDataSpatialDbGeographyWellKnownValueCoordinateSystemId :: !(Maybe Int) -- ^ "coordinateSystemId"
  , systemDataSpatialDbGeographyWellKnownValueWellKnownText :: !(Maybe Text) -- ^ "wellKnownText"
  , systemDataSpatialDbGeographyWellKnownValueWellKnownBinary :: !(Maybe ByteArray) -- ^ "wellKnownBinary"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SystemDataSpatialDbGeographyWellKnownValue
instance A.FromJSON SystemDataSpatialDbGeographyWellKnownValue where
  parseJSON = A.withObject "SystemDataSpatialDbGeographyWellKnownValue" $ \o ->
    SystemDataSpatialDbGeographyWellKnownValue
      <$> (o .:? "coordinateSystemId")
      <*> (o .:? "wellKnownText")
      <*> (o .:? "wellKnownBinary")

-- | ToJSON SystemDataSpatialDbGeographyWellKnownValue
instance A.ToJSON SystemDataSpatialDbGeographyWellKnownValue where
  toJSON SystemDataSpatialDbGeographyWellKnownValue {..} =
   _omitNulls
      [ "coordinateSystemId" .= systemDataSpatialDbGeographyWellKnownValueCoordinateSystemId
      , "wellKnownText" .= systemDataSpatialDbGeographyWellKnownValueWellKnownText
      , "wellKnownBinary" .= systemDataSpatialDbGeographyWellKnownValueWellKnownBinary
      ]


-- | Construct a value of type 'SystemDataSpatialDbGeographyWellKnownValue' (by applying it's required fields, if any)
mkSystemDataSpatialDbGeographyWellKnownValue
  :: SystemDataSpatialDbGeographyWellKnownValue
mkSystemDataSpatialDbGeographyWellKnownValue =
  SystemDataSpatialDbGeographyWellKnownValue
  { systemDataSpatialDbGeographyWellKnownValueCoordinateSystemId = Nothing
  , systemDataSpatialDbGeographyWellKnownValueWellKnownText = Nothing
  , systemDataSpatialDbGeographyWellKnownValueWellKnownBinary = Nothing
  }

-- ** SystemObject
-- | SystemObject
data SystemObject = SystemObject
  { 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SystemObject
instance A.FromJSON SystemObject where
  parseJSON = A.withObject "SystemObject" $ \o ->
    pure SystemObject
      

-- | ToJSON SystemObject
instance A.ToJSON SystemObject where
  toJSON SystemObject  =
   _omitNulls
      [ 
      ]


-- | Construct a value of type 'SystemObject' (by applying it's required fields, if any)
mkSystemObject
  :: SystemObject
mkSystemObject =
  SystemObject
  { 
  }

-- ** TflApiCommonApiVersionInfo
-- | TflApiCommonApiVersionInfo
data TflApiCommonApiVersionInfo = TflApiCommonApiVersionInfo
  { tflApiCommonApiVersionInfoLabel :: !(Maybe Text) -- ^ "label"
  , tflApiCommonApiVersionInfoTimestamp :: !(Maybe DateTime) -- ^ "timestamp"
  , tflApiCommonApiVersionInfoVersion :: !(Maybe Text) -- ^ "version"
  , tflApiCommonApiVersionInfoAssemblies :: !(Maybe [Text]) -- ^ "assemblies"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonApiVersionInfo
instance A.FromJSON TflApiCommonApiVersionInfo where
  parseJSON = A.withObject "TflApiCommonApiVersionInfo" $ \o ->
    TflApiCommonApiVersionInfo
      <$> (o .:? "label")
      <*> (o .:? "timestamp")
      <*> (o .:? "version")
      <*> (o .:? "assemblies")

-- | ToJSON TflApiCommonApiVersionInfo
instance A.ToJSON TflApiCommonApiVersionInfo where
  toJSON TflApiCommonApiVersionInfo {..} =
   _omitNulls
      [ "label" .= tflApiCommonApiVersionInfoLabel
      , "timestamp" .= tflApiCommonApiVersionInfoTimestamp
      , "version" .= tflApiCommonApiVersionInfoVersion
      , "assemblies" .= tflApiCommonApiVersionInfoAssemblies
      ]


-- | Construct a value of type 'TflApiCommonApiVersionInfo' (by applying it's required fields, if any)
mkTflApiCommonApiVersionInfo
  :: TflApiCommonApiVersionInfo
mkTflApiCommonApiVersionInfo =
  TflApiCommonApiVersionInfo
  { tflApiCommonApiVersionInfoLabel = Nothing
  , tflApiCommonApiVersionInfoTimestamp = Nothing
  , tflApiCommonApiVersionInfoVersion = Nothing
  , tflApiCommonApiVersionInfoAssemblies = Nothing
  }

-- ** TflApiCommonDateRange
-- | TflApiCommonDateRange
data TflApiCommonDateRange = TflApiCommonDateRange
  { tflApiCommonDateRangeStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiCommonDateRangeEndDate :: !(Maybe DateTime) -- ^ "endDate"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonDateRange
instance A.FromJSON TflApiCommonDateRange where
  parseJSON = A.withObject "TflApiCommonDateRange" $ \o ->
    TflApiCommonDateRange
      <$> (o .:? "startDate")
      <*> (o .:? "endDate")

-- | ToJSON TflApiCommonDateRange
instance A.ToJSON TflApiCommonDateRange where
  toJSON TflApiCommonDateRange {..} =
   _omitNulls
      [ "startDate" .= tflApiCommonDateRangeStartDate
      , "endDate" .= tflApiCommonDateRangeEndDate
      ]


-- | Construct a value of type 'TflApiCommonDateRange' (by applying it's required fields, if any)
mkTflApiCommonDateRange
  :: TflApiCommonDateRange
mkTflApiCommonDateRange =
  TflApiCommonDateRange
  { tflApiCommonDateRangeStartDate = Nothing
  , tflApiCommonDateRangeEndDate = Nothing
  }

-- ** TflApiCommonDateRangeNullable
-- | TflApiCommonDateRangeNullable
data TflApiCommonDateRangeNullable = TflApiCommonDateRangeNullable
  { tflApiCommonDateRangeNullableStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiCommonDateRangeNullableEndDate :: !(Maybe DateTime) -- ^ "endDate"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonDateRangeNullable
instance A.FromJSON TflApiCommonDateRangeNullable where
  parseJSON = A.withObject "TflApiCommonDateRangeNullable" $ \o ->
    TflApiCommonDateRangeNullable
      <$> (o .:? "startDate")
      <*> (o .:? "endDate")

-- | ToJSON TflApiCommonDateRangeNullable
instance A.ToJSON TflApiCommonDateRangeNullable where
  toJSON TflApiCommonDateRangeNullable {..} =
   _omitNulls
      [ "startDate" .= tflApiCommonDateRangeNullableStartDate
      , "endDate" .= tflApiCommonDateRangeNullableEndDate
      ]


-- | Construct a value of type 'TflApiCommonDateRangeNullable' (by applying it's required fields, if any)
mkTflApiCommonDateRangeNullable
  :: TflApiCommonDateRangeNullable
mkTflApiCommonDateRangeNullable =
  TflApiCommonDateRangeNullable
  { tflApiCommonDateRangeNullableStartDate = Nothing
  , tflApiCommonDateRangeNullableEndDate = Nothing
  }

-- ** TflApiCommonGeoPoint
-- | TflApiCommonGeoPoint
data TflApiCommonGeoPoint = TflApiCommonGeoPoint
  { tflApiCommonGeoPointLat :: !(Double) -- ^ /Required/ "lat"
  , tflApiCommonGeoPointLon :: !(Double) -- ^ /Required/ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonGeoPoint
instance A.FromJSON TflApiCommonGeoPoint where
  parseJSON = A.withObject "TflApiCommonGeoPoint" $ \o ->
    TflApiCommonGeoPoint
      <$> (o .:  "lat")
      <*> (o .:  "lon")

-- | ToJSON TflApiCommonGeoPoint
instance A.ToJSON TflApiCommonGeoPoint where
  toJSON TflApiCommonGeoPoint {..} =
   _omitNulls
      [ "lat" .= tflApiCommonGeoPointLat
      , "lon" .= tflApiCommonGeoPointLon
      ]


-- | Construct a value of type 'TflApiCommonGeoPoint' (by applying it's required fields, if any)
mkTflApiCommonGeoPoint
  :: Double -- ^ 'tflApiCommonGeoPointLat' 
  -> Double -- ^ 'tflApiCommonGeoPointLon' 
  -> TflApiCommonGeoPoint
mkTflApiCommonGeoPoint tflApiCommonGeoPointLat tflApiCommonGeoPointLon =
  TflApiCommonGeoPoint
  { tflApiCommonGeoPointLat
  , tflApiCommonGeoPointLon
  }

-- ** TflApiCommonJourneyPlannerJpElevation
-- | TflApiCommonJourneyPlannerJpElevation
data TflApiCommonJourneyPlannerJpElevation = TflApiCommonJourneyPlannerJpElevation
  { tflApiCommonJourneyPlannerJpElevationDistance :: !(Maybe Int) -- ^ "distance"
  , tflApiCommonJourneyPlannerJpElevationStartLat :: !(Maybe Double) -- ^ "startLat"
  , tflApiCommonJourneyPlannerJpElevationStartLon :: !(Maybe Double) -- ^ "startLon"
  , tflApiCommonJourneyPlannerJpElevationEndLat :: !(Maybe Double) -- ^ "endLat"
  , tflApiCommonJourneyPlannerJpElevationEndLon :: !(Maybe Double) -- ^ "endLon"
  , tflApiCommonJourneyPlannerJpElevationHeightFromPreviousPoint :: !(Maybe Int) -- ^ "heightFromPreviousPoint"
  , tflApiCommonJourneyPlannerJpElevationGradient :: !(Maybe Double) -- ^ "gradient"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonJourneyPlannerJpElevation
instance A.FromJSON TflApiCommonJourneyPlannerJpElevation where
  parseJSON = A.withObject "TflApiCommonJourneyPlannerJpElevation" $ \o ->
    TflApiCommonJourneyPlannerJpElevation
      <$> (o .:? "distance")
      <*> (o .:? "startLat")
      <*> (o .:? "startLon")
      <*> (o .:? "endLat")
      <*> (o .:? "endLon")
      <*> (o .:? "heightFromPreviousPoint")
      <*> (o .:? "gradient")

-- | ToJSON TflApiCommonJourneyPlannerJpElevation
instance A.ToJSON TflApiCommonJourneyPlannerJpElevation where
  toJSON TflApiCommonJourneyPlannerJpElevation {..} =
   _omitNulls
      [ "distance" .= tflApiCommonJourneyPlannerJpElevationDistance
      , "startLat" .= tflApiCommonJourneyPlannerJpElevationStartLat
      , "startLon" .= tflApiCommonJourneyPlannerJpElevationStartLon
      , "endLat" .= tflApiCommonJourneyPlannerJpElevationEndLat
      , "endLon" .= tflApiCommonJourneyPlannerJpElevationEndLon
      , "heightFromPreviousPoint" .= tflApiCommonJourneyPlannerJpElevationHeightFromPreviousPoint
      , "gradient" .= tflApiCommonJourneyPlannerJpElevationGradient
      ]


-- | Construct a value of type 'TflApiCommonJourneyPlannerJpElevation' (by applying it's required fields, if any)
mkTflApiCommonJourneyPlannerJpElevation
  :: TflApiCommonJourneyPlannerJpElevation
mkTflApiCommonJourneyPlannerJpElevation =
  TflApiCommonJourneyPlannerJpElevation
  { tflApiCommonJourneyPlannerJpElevationDistance = Nothing
  , tflApiCommonJourneyPlannerJpElevationStartLat = Nothing
  , tflApiCommonJourneyPlannerJpElevationStartLon = Nothing
  , tflApiCommonJourneyPlannerJpElevationEndLat = Nothing
  , tflApiCommonJourneyPlannerJpElevationEndLon = Nothing
  , tflApiCommonJourneyPlannerJpElevationHeightFromPreviousPoint = Nothing
  , tflApiCommonJourneyPlannerJpElevationGradient = Nothing
  }

-- ** TflApiCommonPlaceGeo
-- | TflApiCommonPlaceGeo
data TflApiCommonPlaceGeo = TflApiCommonPlaceGeo
  { tflApiCommonPlaceGeoSwLat :: !(Maybe Double) -- ^ "swLat"
  , tflApiCommonPlaceGeoSwLon :: !(Maybe Double) -- ^ "swLon"
  , tflApiCommonPlaceGeoNeLat :: !(Maybe Double) -- ^ "neLat"
  , tflApiCommonPlaceGeoNeLon :: !(Maybe Double) -- ^ "neLon"
  , tflApiCommonPlaceGeoLat :: !(Maybe Double) -- ^ "lat"
  , tflApiCommonPlaceGeoLon :: !(Maybe Double) -- ^ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonPlaceGeo
instance A.FromJSON TflApiCommonPlaceGeo where
  parseJSON = A.withObject "TflApiCommonPlaceGeo" $ \o ->
    TflApiCommonPlaceGeo
      <$> (o .:? "swLat")
      <*> (o .:? "swLon")
      <*> (o .:? "neLat")
      <*> (o .:? "neLon")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiCommonPlaceGeo
instance A.ToJSON TflApiCommonPlaceGeo where
  toJSON TflApiCommonPlaceGeo {..} =
   _omitNulls
      [ "swLat" .= tflApiCommonPlaceGeoSwLat
      , "swLon" .= tflApiCommonPlaceGeoSwLon
      , "neLat" .= tflApiCommonPlaceGeoNeLat
      , "neLon" .= tflApiCommonPlaceGeoNeLon
      , "lat" .= tflApiCommonPlaceGeoLat
      , "lon" .= tflApiCommonPlaceGeoLon
      ]


-- | Construct a value of type 'TflApiCommonPlaceGeo' (by applying it's required fields, if any)
mkTflApiCommonPlaceGeo
  :: TflApiCommonPlaceGeo
mkTflApiCommonPlaceGeo =
  TflApiCommonPlaceGeo
  { tflApiCommonPlaceGeoSwLat = Nothing
  , tflApiCommonPlaceGeoSwLon = Nothing
  , tflApiCommonPlaceGeoNeLat = Nothing
  , tflApiCommonPlaceGeoNeLon = Nothing
  , tflApiCommonPlaceGeoLat = Nothing
  , tflApiCommonPlaceGeoLon = Nothing
  }

-- ** TflApiCommonPostcodeInput
-- | TflApiCommonPostcodeInput
data TflApiCommonPostcodeInput = TflApiCommonPostcodeInput
  { tflApiCommonPostcodeInputPostcode :: !(Maybe Text) -- ^ "postcode"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiCommonPostcodeInput
instance A.FromJSON TflApiCommonPostcodeInput where
  parseJSON = A.withObject "TflApiCommonPostcodeInput" $ \o ->
    TflApiCommonPostcodeInput
      <$> (o .:? "postcode")

-- | ToJSON TflApiCommonPostcodeInput
instance A.ToJSON TflApiCommonPostcodeInput where
  toJSON TflApiCommonPostcodeInput {..} =
   _omitNulls
      [ "postcode" .= tflApiCommonPostcodeInputPostcode
      ]


-- | Construct a value of type 'TflApiCommonPostcodeInput' (by applying it's required fields, if any)
mkTflApiCommonPostcodeInput
  :: TflApiCommonPostcodeInput
mkTflApiCommonPostcodeInput =
  TflApiCommonPostcodeInput
  { tflApiCommonPostcodeInputPostcode = Nothing
  }

-- ** TflApiPresentationEntitiesAccidentStatsAccidentDetail
-- | TflApiPresentationEntitiesAccidentStatsAccidentDetail
data TflApiPresentationEntitiesAccidentStatsAccidentDetail = TflApiPresentationEntitiesAccidentStatsAccidentDetail
  { tflApiPresentationEntitiesAccidentStatsAccidentDetailId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLat :: !(Maybe Double) -- ^ "lat"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLon :: !(Maybe Double) -- ^ "lon"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLocation :: !(Maybe Text) -- ^ "location"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailDate :: !(Maybe DateTime) -- ^ "date"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailSeverity :: !(Maybe Text) -- ^ "severity"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailBorough :: !(Maybe Text) -- ^ "borough"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailCasualties :: !(Maybe [TflApiPresentationEntitiesAccidentStatsCasualty]) -- ^ "casualties"
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailVehicles :: !(Maybe [TflApiPresentationEntitiesAccidentStatsVehicle]) -- ^ "vehicles"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesAccidentStatsAccidentDetail
instance A.FromJSON TflApiPresentationEntitiesAccidentStatsAccidentDetail where
  parseJSON = A.withObject "TflApiPresentationEntitiesAccidentStatsAccidentDetail" $ \o ->
    TflApiPresentationEntitiesAccidentStatsAccidentDetail
      <$> (o .:? "id")
      <*> (o .:? "lat")
      <*> (o .:? "lon")
      <*> (o .:? "location")
      <*> (o .:? "date")
      <*> (o .:? "severity")
      <*> (o .:? "borough")
      <*> (o .:? "casualties")
      <*> (o .:? "vehicles")

-- | ToJSON TflApiPresentationEntitiesAccidentStatsAccidentDetail
instance A.ToJSON TflApiPresentationEntitiesAccidentStatsAccidentDetail where
  toJSON TflApiPresentationEntitiesAccidentStatsAccidentDetail {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailId
      , "lat" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailLat
      , "lon" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailLon
      , "location" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailLocation
      , "date" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailDate
      , "severity" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailSeverity
      , "borough" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailBorough
      , "casualties" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailCasualties
      , "vehicles" .= tflApiPresentationEntitiesAccidentStatsAccidentDetailVehicles
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesAccidentStatsAccidentDetail' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesAccidentStatsAccidentDetail
  :: TflApiPresentationEntitiesAccidentStatsAccidentDetail
mkTflApiPresentationEntitiesAccidentStatsAccidentDetail =
  TflApiPresentationEntitiesAccidentStatsAccidentDetail
  { tflApiPresentationEntitiesAccidentStatsAccidentDetailId = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLat = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLon = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailLocation = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailDate = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailSeverity = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailBorough = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailCasualties = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentDetailVehicles = Nothing
  }

-- ** TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
-- | TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
data TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary = TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
  { tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryYear :: !(Maybe Int) -- ^ "year"
  , tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryBorough :: !(Maybe Text) -- ^ "borough"
  , tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryAccidents :: !(Maybe Int) -- ^ "accidents"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
instance A.FromJSON TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary where
  parseJSON = A.withObject "TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary" $ \o ->
    TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
      <$> (o .:? "year")
      <*> (o .:? "borough")
      <*> (o .:? "accidents")

-- | ToJSON TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
instance A.ToJSON TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary where
  toJSON TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary {..} =
   _omitNulls
      [ "year" .= tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryYear
      , "borough" .= tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryBorough
      , "accidents" .= tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryAccidents
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
  :: TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
mkTflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary =
  TflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummary
  { tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryYear = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryBorough = Nothing
  , tflApiPresentationEntitiesAccidentStatsAccidentStatsOrderedSummaryAccidents = Nothing
  }

-- ** TflApiPresentationEntitiesAccidentStatsCasualty
-- | TflApiPresentationEntitiesAccidentStatsCasualty
data TflApiPresentationEntitiesAccidentStatsCasualty = TflApiPresentationEntitiesAccidentStatsCasualty
  { tflApiPresentationEntitiesAccidentStatsCasualtyAge :: !(Maybe Int) -- ^ "age"
  , tflApiPresentationEntitiesAccidentStatsCasualtyClass :: !(Maybe Text) -- ^ "class"
  , tflApiPresentationEntitiesAccidentStatsCasualtySeverity :: !(Maybe Text) -- ^ "severity"
  , tflApiPresentationEntitiesAccidentStatsCasualtyMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesAccidentStatsCasualtyAgeBand :: !(Maybe Text) -- ^ "ageBand"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesAccidentStatsCasualty
instance A.FromJSON TflApiPresentationEntitiesAccidentStatsCasualty where
  parseJSON = A.withObject "TflApiPresentationEntitiesAccidentStatsCasualty" $ \o ->
    TflApiPresentationEntitiesAccidentStatsCasualty
      <$> (o .:? "age")
      <*> (o .:? "class")
      <*> (o .:? "severity")
      <*> (o .:? "mode")
      <*> (o .:? "ageBand")

-- | ToJSON TflApiPresentationEntitiesAccidentStatsCasualty
instance A.ToJSON TflApiPresentationEntitiesAccidentStatsCasualty where
  toJSON TflApiPresentationEntitiesAccidentStatsCasualty {..} =
   _omitNulls
      [ "age" .= tflApiPresentationEntitiesAccidentStatsCasualtyAge
      , "class" .= tflApiPresentationEntitiesAccidentStatsCasualtyClass
      , "severity" .= tflApiPresentationEntitiesAccidentStatsCasualtySeverity
      , "mode" .= tflApiPresentationEntitiesAccidentStatsCasualtyMode
      , "ageBand" .= tflApiPresentationEntitiesAccidentStatsCasualtyAgeBand
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesAccidentStatsCasualty' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesAccidentStatsCasualty
  :: TflApiPresentationEntitiesAccidentStatsCasualty
mkTflApiPresentationEntitiesAccidentStatsCasualty =
  TflApiPresentationEntitiesAccidentStatsCasualty
  { tflApiPresentationEntitiesAccidentStatsCasualtyAge = Nothing
  , tflApiPresentationEntitiesAccidentStatsCasualtyClass = Nothing
  , tflApiPresentationEntitiesAccidentStatsCasualtySeverity = Nothing
  , tflApiPresentationEntitiesAccidentStatsCasualtyMode = Nothing
  , tflApiPresentationEntitiesAccidentStatsCasualtyAgeBand = Nothing
  }

-- ** TflApiPresentationEntitiesAccidentStatsVehicle
-- | TflApiPresentationEntitiesAccidentStatsVehicle
data TflApiPresentationEntitiesAccidentStatsVehicle = TflApiPresentationEntitiesAccidentStatsVehicle
  { tflApiPresentationEntitiesAccidentStatsVehicleType :: !(Maybe Text) -- ^ "type"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesAccidentStatsVehicle
instance A.FromJSON TflApiPresentationEntitiesAccidentStatsVehicle where
  parseJSON = A.withObject "TflApiPresentationEntitiesAccidentStatsVehicle" $ \o ->
    TflApiPresentationEntitiesAccidentStatsVehicle
      <$> (o .:? "type")

-- | ToJSON TflApiPresentationEntitiesAccidentStatsVehicle
instance A.ToJSON TflApiPresentationEntitiesAccidentStatsVehicle where
  toJSON TflApiPresentationEntitiesAccidentStatsVehicle {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesAccidentStatsVehicleType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesAccidentStatsVehicle' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesAccidentStatsVehicle
  :: TflApiPresentationEntitiesAccidentStatsVehicle
mkTflApiPresentationEntitiesAccidentStatsVehicle =
  TflApiPresentationEntitiesAccidentStatsVehicle
  { tflApiPresentationEntitiesAccidentStatsVehicleType = Nothing
  }

-- ** TflApiPresentationEntitiesActiveServiceType
-- | TflApiPresentationEntitiesActiveServiceType
data TflApiPresentationEntitiesActiveServiceType = TflApiPresentationEntitiesActiveServiceType
  { tflApiPresentationEntitiesActiveServiceTypeMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesActiveServiceTypeServiceType :: !(Maybe Text) -- ^ "serviceType"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesActiveServiceType
instance A.FromJSON TflApiPresentationEntitiesActiveServiceType where
  parseJSON = A.withObject "TflApiPresentationEntitiesActiveServiceType" $ \o ->
    TflApiPresentationEntitiesActiveServiceType
      <$> (o .:? "mode")
      <*> (o .:? "serviceType")

-- | ToJSON TflApiPresentationEntitiesActiveServiceType
instance A.ToJSON TflApiPresentationEntitiesActiveServiceType where
  toJSON TflApiPresentationEntitiesActiveServiceType {..} =
   _omitNulls
      [ "mode" .= tflApiPresentationEntitiesActiveServiceTypeMode
      , "serviceType" .= tflApiPresentationEntitiesActiveServiceTypeServiceType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesActiveServiceType' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesActiveServiceType
  :: TflApiPresentationEntitiesActiveServiceType
mkTflApiPresentationEntitiesActiveServiceType =
  TflApiPresentationEntitiesActiveServiceType
  { tflApiPresentationEntitiesActiveServiceTypeMode = Nothing
  , tflApiPresentationEntitiesActiveServiceTypeServiceType = Nothing
  }

-- ** TflApiPresentationEntitiesAdditionalProperties
-- | TflApiPresentationEntitiesAdditionalProperties
data TflApiPresentationEntitiesAdditionalProperties = TflApiPresentationEntitiesAdditionalProperties
  { tflApiPresentationEntitiesAdditionalPropertiesCategory :: !(Maybe Text) -- ^ "category"
  , tflApiPresentationEntitiesAdditionalPropertiesKey :: !(Maybe Text) -- ^ "key"
  , tflApiPresentationEntitiesAdditionalPropertiesSourceSystemKey :: !(Maybe Text) -- ^ "sourceSystemKey"
  , tflApiPresentationEntitiesAdditionalPropertiesValue :: !(Maybe Text) -- ^ "value"
  , tflApiPresentationEntitiesAdditionalPropertiesModified :: !(Maybe DateTime) -- ^ "modified"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesAdditionalProperties
instance A.FromJSON TflApiPresentationEntitiesAdditionalProperties where
  parseJSON = A.withObject "TflApiPresentationEntitiesAdditionalProperties" $ \o ->
    TflApiPresentationEntitiesAdditionalProperties
      <$> (o .:? "category")
      <*> (o .:? "key")
      <*> (o .:? "sourceSystemKey")
      <*> (o .:? "value")
      <*> (o .:? "modified")

-- | ToJSON TflApiPresentationEntitiesAdditionalProperties
instance A.ToJSON TflApiPresentationEntitiesAdditionalProperties where
  toJSON TflApiPresentationEntitiesAdditionalProperties {..} =
   _omitNulls
      [ "category" .= tflApiPresentationEntitiesAdditionalPropertiesCategory
      , "key" .= tflApiPresentationEntitiesAdditionalPropertiesKey
      , "sourceSystemKey" .= tflApiPresentationEntitiesAdditionalPropertiesSourceSystemKey
      , "value" .= tflApiPresentationEntitiesAdditionalPropertiesValue
      , "modified" .= tflApiPresentationEntitiesAdditionalPropertiesModified
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesAdditionalProperties' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesAdditionalProperties
  :: TflApiPresentationEntitiesAdditionalProperties
mkTflApiPresentationEntitiesAdditionalProperties =
  TflApiPresentationEntitiesAdditionalProperties
  { tflApiPresentationEntitiesAdditionalPropertiesCategory = Nothing
  , tflApiPresentationEntitiesAdditionalPropertiesKey = Nothing
  , tflApiPresentationEntitiesAdditionalPropertiesSourceSystemKey = Nothing
  , tflApiPresentationEntitiesAdditionalPropertiesValue = Nothing
  , tflApiPresentationEntitiesAdditionalPropertiesModified = Nothing
  }

-- ** TflApiPresentationEntitiesArrivalDeparture
-- | TflApiPresentationEntitiesArrivalDeparture
-- DTO to capture the prediction details
data TflApiPresentationEntitiesArrivalDeparture = TflApiPresentationEntitiesArrivalDeparture
  { tflApiPresentationEntitiesArrivalDeparturePlatformName :: !(Maybe Text) -- ^ "platformName" - Platform name (for bus, this is the stop letter)
  , tflApiPresentationEntitiesArrivalDepartureDestinationNaptanId :: !(Maybe Text) -- ^ "destinationNaptanId" - Naptan Identifier for the prediction&#39;s destination
  , tflApiPresentationEntitiesArrivalDepartureDestinationName :: !(Maybe Text) -- ^ "destinationName" - Name of the destination
  , tflApiPresentationEntitiesArrivalDepartureNaptanId :: !(Maybe Text) -- ^ "naptanId" - Identifier for the prediction
  , tflApiPresentationEntitiesArrivalDepartureStationName :: !(Maybe Text) -- ^ "stationName" - Station name
  , tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfArrival :: !(Maybe DateTime) -- ^ "estimatedTimeOfArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfArrival :: !(Maybe DateTime) -- ^ "scheduledTimeOfArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfDeparture :: !(Maybe DateTime) -- ^ "estimatedTimeOfDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfDeparture :: !(Maybe DateTime) -- ^ "scheduledTimeOfDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToArrival :: !(Maybe Text) -- ^ "minutesAndSecondsToArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToDeparture :: !(Maybe Text) -- ^ "minutesAndSecondsToDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureCause :: !(Maybe Text) -- ^ "cause" - Reason for cancellation or delay
  , tflApiPresentationEntitiesArrivalDepartureDepartureStatus :: !(Maybe E'DepartureStatus) -- ^ "departureStatus" - Status of departure
  , tflApiPresentationEntitiesArrivalDepartureTiming :: !(Maybe TflApiPresentationEntitiesPredictionTiming) -- ^ "timing" - Keep the original timestamp from MongoDb fo debugging purposes
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesArrivalDeparture
instance A.FromJSON TflApiPresentationEntitiesArrivalDeparture where
  parseJSON = A.withObject "TflApiPresentationEntitiesArrivalDeparture" $ \o ->
    TflApiPresentationEntitiesArrivalDeparture
      <$> (o .:? "platformName")
      <*> (o .:? "destinationNaptanId")
      <*> (o .:? "destinationName")
      <*> (o .:? "naptanId")
      <*> (o .:? "stationName")
      <*> (o .:? "estimatedTimeOfArrival")
      <*> (o .:? "scheduledTimeOfArrival")
      <*> (o .:? "estimatedTimeOfDeparture")
      <*> (o .:? "scheduledTimeOfDeparture")
      <*> (o .:? "minutesAndSecondsToArrival")
      <*> (o .:? "minutesAndSecondsToDeparture")
      <*> (o .:? "cause")
      <*> (o .:? "departureStatus")
      <*> (o .:? "timing")

-- | ToJSON TflApiPresentationEntitiesArrivalDeparture
instance A.ToJSON TflApiPresentationEntitiesArrivalDeparture where
  toJSON TflApiPresentationEntitiesArrivalDeparture {..} =
   _omitNulls
      [ "platformName" .= tflApiPresentationEntitiesArrivalDeparturePlatformName
      , "destinationNaptanId" .= tflApiPresentationEntitiesArrivalDepartureDestinationNaptanId
      , "destinationName" .= tflApiPresentationEntitiesArrivalDepartureDestinationName
      , "naptanId" .= tflApiPresentationEntitiesArrivalDepartureNaptanId
      , "stationName" .= tflApiPresentationEntitiesArrivalDepartureStationName
      , "estimatedTimeOfArrival" .= tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfArrival
      , "scheduledTimeOfArrival" .= tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfArrival
      , "estimatedTimeOfDeparture" .= tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfDeparture
      , "scheduledTimeOfDeparture" .= tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfDeparture
      , "minutesAndSecondsToArrival" .= tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToArrival
      , "minutesAndSecondsToDeparture" .= tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToDeparture
      , "cause" .= tflApiPresentationEntitiesArrivalDepartureCause
      , "departureStatus" .= tflApiPresentationEntitiesArrivalDepartureDepartureStatus
      , "timing" .= tflApiPresentationEntitiesArrivalDepartureTiming
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesArrivalDeparture' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesArrivalDeparture
  :: TflApiPresentationEntitiesArrivalDeparture
mkTflApiPresentationEntitiesArrivalDeparture =
  TflApiPresentationEntitiesArrivalDeparture
  { tflApiPresentationEntitiesArrivalDeparturePlatformName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureDestinationNaptanId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureDestinationName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureNaptanId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureStationName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureEstimatedTimeOfDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureScheduledTimeOfDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureMinutesAndSecondsToDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureCause = Nothing
  , tflApiPresentationEntitiesArrivalDepartureDepartureStatus = Nothing
  , tflApiPresentationEntitiesArrivalDepartureTiming = Nothing
  }

-- ** TflApiPresentationEntitiesArrivalDepartureWithLine
-- | TflApiPresentationEntitiesArrivalDepartureWithLine
-- DTO to capture the prediction details
data TflApiPresentationEntitiesArrivalDepartureWithLine = TflApiPresentationEntitiesArrivalDepartureWithLine
  { tflApiPresentationEntitiesArrivalDepartureWithLineLineId :: !(Maybe Text) -- ^ "lineId" - Train operating company LineId
  , tflApiPresentationEntitiesArrivalDepartureWithLineLineName :: !(Maybe Text) -- ^ "lineName" - Train operating company LineName
  , tflApiPresentationEntitiesArrivalDepartureWithLineVehicleId :: !(Maybe Text) -- ^ "vehicleId" - Train operating company VehicleId
  , tflApiPresentationEntitiesArrivalDepartureWithLinePlatformName :: !(Maybe Text) -- ^ "platformName" - Platform name (for bus, this is the stop letter)
  , tflApiPresentationEntitiesArrivalDepartureWithLineDestinationNaptanId :: !(Maybe Text) -- ^ "destinationNaptanId" - Naptan Identifier for the prediction&#39;s destination
  , tflApiPresentationEntitiesArrivalDepartureWithLineDestinationName :: !(Maybe Text) -- ^ "destinationName" - Name of the destination
  , tflApiPresentationEntitiesArrivalDepartureWithLineNaptanId :: !(Maybe Text) -- ^ "naptanId" - Identifier for the prediction
  , tflApiPresentationEntitiesArrivalDepartureWithLineStationName :: !(Maybe Text) -- ^ "stationName" - Station name
  , tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfArrival :: !(Maybe DateTime) -- ^ "estimatedTimeOfArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfArrival :: !(Maybe DateTime) -- ^ "scheduledTimeOfArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfDeparture :: !(Maybe DateTime) -- ^ "estimatedTimeOfDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfDeparture :: !(Maybe DateTime) -- ^ "scheduledTimeOfDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToArrival :: !(Maybe Text) -- ^ "minutesAndSecondsToArrival" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToDeparture :: !(Maybe Text) -- ^ "minutesAndSecondsToDeparture" - Estimated time of arrival
  , tflApiPresentationEntitiesArrivalDepartureWithLineCause :: !(Maybe Text) -- ^ "cause" - Reason for cancellation or delay
  , tflApiPresentationEntitiesArrivalDepartureWithLineDepartureStatus :: !(Maybe E'DepartureStatus) -- ^ "departureStatus" - Status of departure
  , tflApiPresentationEntitiesArrivalDepartureWithLineTiming :: !(Maybe TflApiPresentationEntitiesPredictionTiming) -- ^ "timing" - Keep the original timestamp from MongoDb fo debugging purposes
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesArrivalDepartureWithLine
instance A.FromJSON TflApiPresentationEntitiesArrivalDepartureWithLine where
  parseJSON = A.withObject "TflApiPresentationEntitiesArrivalDepartureWithLine" $ \o ->
    TflApiPresentationEntitiesArrivalDepartureWithLine
      <$> (o .:? "lineId")
      <*> (o .:? "lineName")
      <*> (o .:? "vehicleId")
      <*> (o .:? "platformName")
      <*> (o .:? "destinationNaptanId")
      <*> (o .:? "destinationName")
      <*> (o .:? "naptanId")
      <*> (o .:? "stationName")
      <*> (o .:? "estimatedTimeOfArrival")
      <*> (o .:? "scheduledTimeOfArrival")
      <*> (o .:? "estimatedTimeOfDeparture")
      <*> (o .:? "scheduledTimeOfDeparture")
      <*> (o .:? "minutesAndSecondsToArrival")
      <*> (o .:? "minutesAndSecondsToDeparture")
      <*> (o .:? "cause")
      <*> (o .:? "departureStatus")
      <*> (o .:? "timing")

-- | ToJSON TflApiPresentationEntitiesArrivalDepartureWithLine
instance A.ToJSON TflApiPresentationEntitiesArrivalDepartureWithLine where
  toJSON TflApiPresentationEntitiesArrivalDepartureWithLine {..} =
   _omitNulls
      [ "lineId" .= tflApiPresentationEntitiesArrivalDepartureWithLineLineId
      , "lineName" .= tflApiPresentationEntitiesArrivalDepartureWithLineLineName
      , "vehicleId" .= tflApiPresentationEntitiesArrivalDepartureWithLineVehicleId
      , "platformName" .= tflApiPresentationEntitiesArrivalDepartureWithLinePlatformName
      , "destinationNaptanId" .= tflApiPresentationEntitiesArrivalDepartureWithLineDestinationNaptanId
      , "destinationName" .= tflApiPresentationEntitiesArrivalDepartureWithLineDestinationName
      , "naptanId" .= tflApiPresentationEntitiesArrivalDepartureWithLineNaptanId
      , "stationName" .= tflApiPresentationEntitiesArrivalDepartureWithLineStationName
      , "estimatedTimeOfArrival" .= tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfArrival
      , "scheduledTimeOfArrival" .= tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfArrival
      , "estimatedTimeOfDeparture" .= tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfDeparture
      , "scheduledTimeOfDeparture" .= tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfDeparture
      , "minutesAndSecondsToArrival" .= tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToArrival
      , "minutesAndSecondsToDeparture" .= tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToDeparture
      , "cause" .= tflApiPresentationEntitiesArrivalDepartureWithLineCause
      , "departureStatus" .= tflApiPresentationEntitiesArrivalDepartureWithLineDepartureStatus
      , "timing" .= tflApiPresentationEntitiesArrivalDepartureWithLineTiming
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesArrivalDepartureWithLine' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesArrivalDepartureWithLine
  :: TflApiPresentationEntitiesArrivalDepartureWithLine
mkTflApiPresentationEntitiesArrivalDepartureWithLine =
  TflApiPresentationEntitiesArrivalDepartureWithLine
  { tflApiPresentationEntitiesArrivalDepartureWithLineLineId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineLineName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineVehicleId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLinePlatformName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineDestinationNaptanId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineDestinationName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineNaptanId = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineStationName = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineEstimatedTimeOfDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineScheduledTimeOfDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToArrival = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineMinutesAndSecondsToDeparture = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineCause = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineDepartureStatus = Nothing
  , tflApiPresentationEntitiesArrivalDepartureWithLineTiming = Nothing
  }

-- ** TflApiPresentationEntitiesBay
-- | TflApiPresentationEntitiesBay
data TflApiPresentationEntitiesBay = TflApiPresentationEntitiesBay
  { tflApiPresentationEntitiesBayBayType :: !(Maybe Text) -- ^ "bayType"
  , tflApiPresentationEntitiesBayBayCount :: !(Maybe Int) -- ^ "bayCount"
  , tflApiPresentationEntitiesBayFree :: !(Maybe Int) -- ^ "free"
  , tflApiPresentationEntitiesBayOccupied :: !(Maybe Int) -- ^ "occupied"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesBay
instance A.FromJSON TflApiPresentationEntitiesBay where
  parseJSON = A.withObject "TflApiPresentationEntitiesBay" $ \o ->
    TflApiPresentationEntitiesBay
      <$> (o .:? "bayType")
      <*> (o .:? "bayCount")
      <*> (o .:? "free")
      <*> (o .:? "occupied")

-- | ToJSON TflApiPresentationEntitiesBay
instance A.ToJSON TflApiPresentationEntitiesBay where
  toJSON TflApiPresentationEntitiesBay {..} =
   _omitNulls
      [ "bayType" .= tflApiPresentationEntitiesBayBayType
      , "bayCount" .= tflApiPresentationEntitiesBayBayCount
      , "free" .= tflApiPresentationEntitiesBayFree
      , "occupied" .= tflApiPresentationEntitiesBayOccupied
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesBay' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesBay
  :: TflApiPresentationEntitiesBay
mkTflApiPresentationEntitiesBay =
  TflApiPresentationEntitiesBay
  { tflApiPresentationEntitiesBayBayType = Nothing
  , tflApiPresentationEntitiesBayBayCount = Nothing
  , tflApiPresentationEntitiesBayFree = Nothing
  , tflApiPresentationEntitiesBayOccupied = Nothing
  }

-- ** TflApiPresentationEntitiesBikePointOccupancy
-- | TflApiPresentationEntitiesBikePointOccupancy
-- Bike point occupancy
data TflApiPresentationEntitiesBikePointOccupancy = TflApiPresentationEntitiesBikePointOccupancy
  { tflApiPresentationEntitiesBikePointOccupancyId :: !(Maybe Text) -- ^ "id" - Id of the bike point such as BikePoints_1
  , tflApiPresentationEntitiesBikePointOccupancyName :: !(Maybe Text) -- ^ "name" - Name / Common name of the bike point
  , tflApiPresentationEntitiesBikePointOccupancyBikesCount :: !(Maybe Int) -- ^ "bikesCount" - Total bike counts
  , tflApiPresentationEntitiesBikePointOccupancyEmptyDocks :: !(Maybe Int) -- ^ "emptyDocks" - Empty docks
  , tflApiPresentationEntitiesBikePointOccupancyTotalDocks :: !(Maybe Int) -- ^ "totalDocks" - Total docks available
  , tflApiPresentationEntitiesBikePointOccupancyStandardBikesCount :: !(Maybe Int) -- ^ "standardBikesCount" - Total standard bikes count
  , tflApiPresentationEntitiesBikePointOccupancyEBikesCount :: !(Maybe Int) -- ^ "eBikesCount" - Total ebikes count
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesBikePointOccupancy
instance A.FromJSON TflApiPresentationEntitiesBikePointOccupancy where
  parseJSON = A.withObject "TflApiPresentationEntitiesBikePointOccupancy" $ \o ->
    TflApiPresentationEntitiesBikePointOccupancy
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "bikesCount")
      <*> (o .:? "emptyDocks")
      <*> (o .:? "totalDocks")
      <*> (o .:? "standardBikesCount")
      <*> (o .:? "eBikesCount")

-- | ToJSON TflApiPresentationEntitiesBikePointOccupancy
instance A.ToJSON TflApiPresentationEntitiesBikePointOccupancy where
  toJSON TflApiPresentationEntitiesBikePointOccupancy {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesBikePointOccupancyId
      , "name" .= tflApiPresentationEntitiesBikePointOccupancyName
      , "bikesCount" .= tflApiPresentationEntitiesBikePointOccupancyBikesCount
      , "emptyDocks" .= tflApiPresentationEntitiesBikePointOccupancyEmptyDocks
      , "totalDocks" .= tflApiPresentationEntitiesBikePointOccupancyTotalDocks
      , "standardBikesCount" .= tflApiPresentationEntitiesBikePointOccupancyStandardBikesCount
      , "eBikesCount" .= tflApiPresentationEntitiesBikePointOccupancyEBikesCount
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesBikePointOccupancy' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesBikePointOccupancy
  :: TflApiPresentationEntitiesBikePointOccupancy
mkTflApiPresentationEntitiesBikePointOccupancy =
  TflApiPresentationEntitiesBikePointOccupancy
  { tflApiPresentationEntitiesBikePointOccupancyId = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyName = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyBikesCount = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyEmptyDocks = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyTotalDocks = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyStandardBikesCount = Nothing
  , tflApiPresentationEntitiesBikePointOccupancyEBikesCount = Nothing
  }

-- ** TflApiPresentationEntitiesCarParkOccupancy
-- | TflApiPresentationEntitiesCarParkOccupancy
data TflApiPresentationEntitiesCarParkOccupancy = TflApiPresentationEntitiesCarParkOccupancy
  { tflApiPresentationEntitiesCarParkOccupancyId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesCarParkOccupancyBays :: !(Maybe [TflApiPresentationEntitiesBay]) -- ^ "bays"
  , tflApiPresentationEntitiesCarParkOccupancyName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesCarParkOccupancyCarParkDetailsUrl :: !(Maybe Text) -- ^ "carParkDetailsUrl"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesCarParkOccupancy
instance A.FromJSON TflApiPresentationEntitiesCarParkOccupancy where
  parseJSON = A.withObject "TflApiPresentationEntitiesCarParkOccupancy" $ \o ->
    TflApiPresentationEntitiesCarParkOccupancy
      <$> (o .:? "id")
      <*> (o .:? "bays")
      <*> (o .:? "name")
      <*> (o .:? "carParkDetailsUrl")

-- | ToJSON TflApiPresentationEntitiesCarParkOccupancy
instance A.ToJSON TflApiPresentationEntitiesCarParkOccupancy where
  toJSON TflApiPresentationEntitiesCarParkOccupancy {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesCarParkOccupancyId
      , "bays" .= tflApiPresentationEntitiesCarParkOccupancyBays
      , "name" .= tflApiPresentationEntitiesCarParkOccupancyName
      , "carParkDetailsUrl" .= tflApiPresentationEntitiesCarParkOccupancyCarParkDetailsUrl
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesCarParkOccupancy' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesCarParkOccupancy
  :: TflApiPresentationEntitiesCarParkOccupancy
mkTflApiPresentationEntitiesCarParkOccupancy =
  TflApiPresentationEntitiesCarParkOccupancy
  { tflApiPresentationEntitiesCarParkOccupancyId = Nothing
  , tflApiPresentationEntitiesCarParkOccupancyBays = Nothing
  , tflApiPresentationEntitiesCarParkOccupancyName = Nothing
  , tflApiPresentationEntitiesCarParkOccupancyCarParkDetailsUrl = Nothing
  }

-- ** TflApiPresentationEntitiesChargeConnectorOccupancy
-- | TflApiPresentationEntitiesChargeConnectorOccupancy
-- 
data TflApiPresentationEntitiesChargeConnectorOccupancy = TflApiPresentationEntitiesChargeConnectorOccupancy
  { tflApiPresentationEntitiesChargeConnectorOccupancyId :: !(Maybe Int) -- ^ "id" - 
  , tflApiPresentationEntitiesChargeConnectorOccupancySourceSystemPlaceId :: !(Maybe Text) -- ^ "sourceSystemPlaceId" - 
  , tflApiPresentationEntitiesChargeConnectorOccupancyStatus :: !(Maybe Text) -- ^ "status" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesChargeConnectorOccupancy
instance A.FromJSON TflApiPresentationEntitiesChargeConnectorOccupancy where
  parseJSON = A.withObject "TflApiPresentationEntitiesChargeConnectorOccupancy" $ \o ->
    TflApiPresentationEntitiesChargeConnectorOccupancy
      <$> (o .:? "id")
      <*> (o .:? "sourceSystemPlaceId")
      <*> (o .:? "status")

-- | ToJSON TflApiPresentationEntitiesChargeConnectorOccupancy
instance A.ToJSON TflApiPresentationEntitiesChargeConnectorOccupancy where
  toJSON TflApiPresentationEntitiesChargeConnectorOccupancy {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesChargeConnectorOccupancyId
      , "sourceSystemPlaceId" .= tflApiPresentationEntitiesChargeConnectorOccupancySourceSystemPlaceId
      , "status" .= tflApiPresentationEntitiesChargeConnectorOccupancyStatus
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesChargeConnectorOccupancy' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesChargeConnectorOccupancy
  :: TflApiPresentationEntitiesChargeConnectorOccupancy
mkTflApiPresentationEntitiesChargeConnectorOccupancy =
  TflApiPresentationEntitiesChargeConnectorOccupancy
  { tflApiPresentationEntitiesChargeConnectorOccupancyId = Nothing
  , tflApiPresentationEntitiesChargeConnectorOccupancySourceSystemPlaceId = Nothing
  , tflApiPresentationEntitiesChargeConnectorOccupancyStatus = Nothing
  }

-- ** TflApiPresentationEntitiesCoordinate
-- | TflApiPresentationEntitiesCoordinate
data TflApiPresentationEntitiesCoordinate = TflApiPresentationEntitiesCoordinate
  { tflApiPresentationEntitiesCoordinateLongitude :: !(Maybe Double) -- ^ "longitude"
  , tflApiPresentationEntitiesCoordinateLatitude :: !(Maybe Double) -- ^ "latitude"
  , tflApiPresentationEntitiesCoordinateEasting :: !(Maybe Double) -- ^ "easting"
  , tflApiPresentationEntitiesCoordinateNorthing :: !(Maybe Double) -- ^ "northing"
  , tflApiPresentationEntitiesCoordinateXCoord :: !(Maybe Int) -- ^ "xCoord"
  , tflApiPresentationEntitiesCoordinateYCoord :: !(Maybe Int) -- ^ "yCoord"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesCoordinate
instance A.FromJSON TflApiPresentationEntitiesCoordinate where
  parseJSON = A.withObject "TflApiPresentationEntitiesCoordinate" $ \o ->
    TflApiPresentationEntitiesCoordinate
      <$> (o .:? "longitude")
      <*> (o .:? "latitude")
      <*> (o .:? "easting")
      <*> (o .:? "northing")
      <*> (o .:? "xCoord")
      <*> (o .:? "yCoord")

-- | ToJSON TflApiPresentationEntitiesCoordinate
instance A.ToJSON TflApiPresentationEntitiesCoordinate where
  toJSON TflApiPresentationEntitiesCoordinate {..} =
   _omitNulls
      [ "longitude" .= tflApiPresentationEntitiesCoordinateLongitude
      , "latitude" .= tflApiPresentationEntitiesCoordinateLatitude
      , "easting" .= tflApiPresentationEntitiesCoordinateEasting
      , "northing" .= tflApiPresentationEntitiesCoordinateNorthing
      , "xCoord" .= tflApiPresentationEntitiesCoordinateXCoord
      , "yCoord" .= tflApiPresentationEntitiesCoordinateYCoord
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesCoordinate' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesCoordinate
  :: TflApiPresentationEntitiesCoordinate
mkTflApiPresentationEntitiesCoordinate =
  TflApiPresentationEntitiesCoordinate
  { tflApiPresentationEntitiesCoordinateLongitude = Nothing
  , tflApiPresentationEntitiesCoordinateLatitude = Nothing
  , tflApiPresentationEntitiesCoordinateEasting = Nothing
  , tflApiPresentationEntitiesCoordinateNorthing = Nothing
  , tflApiPresentationEntitiesCoordinateXCoord = Nothing
  , tflApiPresentationEntitiesCoordinateYCoord = Nothing
  }

-- ** TflApiPresentationEntitiesCrowding
-- | TflApiPresentationEntitiesCrowding
data TflApiPresentationEntitiesCrowding = TflApiPresentationEntitiesCrowding
  { tflApiPresentationEntitiesCrowdingPassengerFlows :: !(Maybe [TflApiPresentationEntitiesPassengerFlow]) -- ^ "passengerFlows" - Busiest times at a station (static information)
  , tflApiPresentationEntitiesCrowdingTrainLoadings :: !(Maybe [TflApiPresentationEntitiesTrainLoading]) -- ^ "trainLoadings" - Train Loading on a scale 1-6, 1 being \&quot;Very quiet\&quot; and 6 being \&quot;Exceptionally busy\&quot; (static information)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesCrowding
instance A.FromJSON TflApiPresentationEntitiesCrowding where
  parseJSON = A.withObject "TflApiPresentationEntitiesCrowding" $ \o ->
    TflApiPresentationEntitiesCrowding
      <$> (o .:? "passengerFlows")
      <*> (o .:? "trainLoadings")

-- | ToJSON TflApiPresentationEntitiesCrowding
instance A.ToJSON TflApiPresentationEntitiesCrowding where
  toJSON TflApiPresentationEntitiesCrowding {..} =
   _omitNulls
      [ "passengerFlows" .= tflApiPresentationEntitiesCrowdingPassengerFlows
      , "trainLoadings" .= tflApiPresentationEntitiesCrowdingTrainLoadings
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesCrowding' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesCrowding
  :: TflApiPresentationEntitiesCrowding
mkTflApiPresentationEntitiesCrowding =
  TflApiPresentationEntitiesCrowding
  { tflApiPresentationEntitiesCrowdingPassengerFlows = Nothing
  , tflApiPresentationEntitiesCrowdingTrainLoadings = Nothing
  }

-- ** TflApiPresentationEntitiesCycleSuperhighway
-- | TflApiPresentationEntitiesCycleSuperhighway
-- 
data TflApiPresentationEntitiesCycleSuperhighway = TflApiPresentationEntitiesCycleSuperhighway
  { tflApiPresentationEntitiesCycleSuperhighwayId :: !(Maybe Text) -- ^ "id" - The Id
  , tflApiPresentationEntitiesCycleSuperhighwayLabel :: !(Maybe Text) -- ^ "label" - The long label to show on maps when zoomed in
  , tflApiPresentationEntitiesCycleSuperhighwayLabelShort :: !(Maybe Text) -- ^ "labelShort" - The short label to show on maps
  , tflApiPresentationEntitiesCycleSuperhighwayGeography :: !(Maybe SystemDataSpatialDbGeography) -- ^ "geography" - A LineString or MultiLineString that forms the route of the highway
  , tflApiPresentationEntitiesCycleSuperhighwaySegmented :: !(Maybe Bool) -- ^ "segmented" - True if the route is split into segments
  , tflApiPresentationEntitiesCycleSuperhighwayModified :: !(Maybe DateTime) -- ^ "modified" - When the data was last updated
  , tflApiPresentationEntitiesCycleSuperhighwayStatus :: !(Maybe E'Status) -- ^ "status" - Cycle route status i.e Proposed, Existing etc
  , tflApiPresentationEntitiesCycleSuperhighwayRouteType :: !(Maybe E'RouteType) -- ^ "routeType" - Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesCycleSuperhighway
instance A.FromJSON TflApiPresentationEntitiesCycleSuperhighway where
  parseJSON = A.withObject "TflApiPresentationEntitiesCycleSuperhighway" $ \o ->
    TflApiPresentationEntitiesCycleSuperhighway
      <$> (o .:? "id")
      <*> (o .:? "label")
      <*> (o .:? "labelShort")
      <*> (o .:? "geography")
      <*> (o .:? "segmented")
      <*> (o .:? "modified")
      <*> (o .:? "status")
      <*> (o .:? "routeType")

-- | ToJSON TflApiPresentationEntitiesCycleSuperhighway
instance A.ToJSON TflApiPresentationEntitiesCycleSuperhighway where
  toJSON TflApiPresentationEntitiesCycleSuperhighway {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesCycleSuperhighwayId
      , "label" .= tflApiPresentationEntitiesCycleSuperhighwayLabel
      , "labelShort" .= tflApiPresentationEntitiesCycleSuperhighwayLabelShort
      , "geography" .= tflApiPresentationEntitiesCycleSuperhighwayGeography
      , "segmented" .= tflApiPresentationEntitiesCycleSuperhighwaySegmented
      , "modified" .= tflApiPresentationEntitiesCycleSuperhighwayModified
      , "status" .= tflApiPresentationEntitiesCycleSuperhighwayStatus
      , "routeType" .= tflApiPresentationEntitiesCycleSuperhighwayRouteType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesCycleSuperhighway' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesCycleSuperhighway
  :: TflApiPresentationEntitiesCycleSuperhighway
mkTflApiPresentationEntitiesCycleSuperhighway =
  TflApiPresentationEntitiesCycleSuperhighway
  { tflApiPresentationEntitiesCycleSuperhighwayId = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayLabel = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayLabelShort = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayGeography = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwaySegmented = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayModified = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayStatus = Nothing
  , tflApiPresentationEntitiesCycleSuperhighwayRouteType = Nothing
  }

-- ** TflApiPresentationEntitiesDisruptedPoint
-- | TflApiPresentationEntitiesDisruptedPoint
data TflApiPresentationEntitiesDisruptedPoint = TflApiPresentationEntitiesDisruptedPoint
  { tflApiPresentationEntitiesDisruptedPointAtcoCode :: !(Maybe Text) -- ^ "atcoCode"
  , tflApiPresentationEntitiesDisruptedPointFromDate :: !(Maybe DateTime) -- ^ "fromDate"
  , tflApiPresentationEntitiesDisruptedPointToDate :: !(Maybe DateTime) -- ^ "toDate"
  , tflApiPresentationEntitiesDisruptedPointDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesDisruptedPointCommonName :: !(Maybe Text) -- ^ "commonName"
  , tflApiPresentationEntitiesDisruptedPointType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesDisruptedPointMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesDisruptedPointStationAtcoCode :: !(Maybe Text) -- ^ "stationAtcoCode"
  , tflApiPresentationEntitiesDisruptedPointAppearance :: !(Maybe Text) -- ^ "appearance"
  , tflApiPresentationEntitiesDisruptedPointAdditionalInformation :: !(Maybe Text) -- ^ "additionalInformation"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesDisruptedPoint
instance A.FromJSON TflApiPresentationEntitiesDisruptedPoint where
  parseJSON = A.withObject "TflApiPresentationEntitiesDisruptedPoint" $ \o ->
    TflApiPresentationEntitiesDisruptedPoint
      <$> (o .:? "atcoCode")
      <*> (o .:? "fromDate")
      <*> (o .:? "toDate")
      <*> (o .:? "description")
      <*> (o .:? "commonName")
      <*> (o .:? "type")
      <*> (o .:? "mode")
      <*> (o .:? "stationAtcoCode")
      <*> (o .:? "appearance")
      <*> (o .:? "additionalInformation")

-- | ToJSON TflApiPresentationEntitiesDisruptedPoint
instance A.ToJSON TflApiPresentationEntitiesDisruptedPoint where
  toJSON TflApiPresentationEntitiesDisruptedPoint {..} =
   _omitNulls
      [ "atcoCode" .= tflApiPresentationEntitiesDisruptedPointAtcoCode
      , "fromDate" .= tflApiPresentationEntitiesDisruptedPointFromDate
      , "toDate" .= tflApiPresentationEntitiesDisruptedPointToDate
      , "description" .= tflApiPresentationEntitiesDisruptedPointDescription
      , "commonName" .= tflApiPresentationEntitiesDisruptedPointCommonName
      , "type" .= tflApiPresentationEntitiesDisruptedPointType
      , "mode" .= tflApiPresentationEntitiesDisruptedPointMode
      , "stationAtcoCode" .= tflApiPresentationEntitiesDisruptedPointStationAtcoCode
      , "appearance" .= tflApiPresentationEntitiesDisruptedPointAppearance
      , "additionalInformation" .= tflApiPresentationEntitiesDisruptedPointAdditionalInformation
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesDisruptedPoint' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesDisruptedPoint
  :: TflApiPresentationEntitiesDisruptedPoint
mkTflApiPresentationEntitiesDisruptedPoint =
  TflApiPresentationEntitiesDisruptedPoint
  { tflApiPresentationEntitiesDisruptedPointAtcoCode = Nothing
  , tflApiPresentationEntitiesDisruptedPointFromDate = Nothing
  , tflApiPresentationEntitiesDisruptedPointToDate = Nothing
  , tflApiPresentationEntitiesDisruptedPointDescription = Nothing
  , tflApiPresentationEntitiesDisruptedPointCommonName = Nothing
  , tflApiPresentationEntitiesDisruptedPointType = Nothing
  , tflApiPresentationEntitiesDisruptedPointMode = Nothing
  , tflApiPresentationEntitiesDisruptedPointStationAtcoCode = Nothing
  , tflApiPresentationEntitiesDisruptedPointAppearance = Nothing
  , tflApiPresentationEntitiesDisruptedPointAdditionalInformation = Nothing
  }

-- ** TflApiPresentationEntitiesDisruptedRoute
-- | TflApiPresentationEntitiesDisruptedRoute
-- keep old RouteSection name so as not to break contract
data TflApiPresentationEntitiesDisruptedRoute = TflApiPresentationEntitiesDisruptedRoute
  { tflApiPresentationEntitiesDisruptedRouteId :: !(Maybe Text) -- ^ "id" - The Id of the route
  , tflApiPresentationEntitiesDisruptedRouteLineId :: !(Maybe Text) -- ^ "lineId" - The Id of the Line
  , tflApiPresentationEntitiesDisruptedRouteRouteCode :: !(Maybe Text) -- ^ "routeCode" - The route code
  , tflApiPresentationEntitiesDisruptedRouteName :: !(Maybe Text) -- ^ "name" - Name such as \&quot;72\&quot;
  , tflApiPresentationEntitiesDisruptedRouteLineString :: !(Maybe Text) -- ^ "lineString" - The co-ordinates of the route&#39;s path as a geoJSON lineString
  , tflApiPresentationEntitiesDisruptedRouteDirection :: !(Maybe Text) -- ^ "direction" - Inbound or Outbound
  , tflApiPresentationEntitiesDisruptedRouteOriginationName :: !(Maybe Text) -- ^ "originationName" - The name of the Origin StopPoint
  , tflApiPresentationEntitiesDisruptedRouteDestinationName :: !(Maybe Text) -- ^ "destinationName" - The name of the Destination StopPoint
  , tflApiPresentationEntitiesDisruptedRouteVia :: !(Maybe TflApiPresentationEntitiesRouteSectionNaptanEntrySequence) -- ^ "via" - (where applicable) via Charing Cross / Bank / King&#39;s Cross / Embankment / Newbury Park / Woodford
  , tflApiPresentationEntitiesDisruptedRouteIsEntireRouteSection :: !(Maybe Bool) -- ^ "isEntireRouteSection" - Whether this represents the entire route section
  , tflApiPresentationEntitiesDisruptedRouteValidTo :: !(Maybe DateTime) -- ^ "validTo" - The DateTime that the Service containing this Route is valid until.
  , tflApiPresentationEntitiesDisruptedRouteValidFrom :: !(Maybe DateTime) -- ^ "validFrom" - The DateTime that the Service containing this Route is valid from.
  , tflApiPresentationEntitiesDisruptedRouteRouteSectionNaptanEntrySequence :: !(Maybe [TflApiPresentationEntitiesRouteSectionNaptanEntrySequence]) -- ^ "routeSectionNaptanEntrySequence"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesDisruptedRoute
instance A.FromJSON TflApiPresentationEntitiesDisruptedRoute where
  parseJSON = A.withObject "TflApiPresentationEntitiesDisruptedRoute" $ \o ->
    TflApiPresentationEntitiesDisruptedRoute
      <$> (o .:? "id")
      <*> (o .:? "lineId")
      <*> (o .:? "routeCode")
      <*> (o .:? "name")
      <*> (o .:? "lineString")
      <*> (o .:? "direction")
      <*> (o .:? "originationName")
      <*> (o .:? "destinationName")
      <*> (o .:? "via")
      <*> (o .:? "isEntireRouteSection")
      <*> (o .:? "validTo")
      <*> (o .:? "validFrom")
      <*> (o .:? "routeSectionNaptanEntrySequence")

-- | ToJSON TflApiPresentationEntitiesDisruptedRoute
instance A.ToJSON TflApiPresentationEntitiesDisruptedRoute where
  toJSON TflApiPresentationEntitiesDisruptedRoute {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesDisruptedRouteId
      , "lineId" .= tflApiPresentationEntitiesDisruptedRouteLineId
      , "routeCode" .= tflApiPresentationEntitiesDisruptedRouteRouteCode
      , "name" .= tflApiPresentationEntitiesDisruptedRouteName
      , "lineString" .= tflApiPresentationEntitiesDisruptedRouteLineString
      , "direction" .= tflApiPresentationEntitiesDisruptedRouteDirection
      , "originationName" .= tflApiPresentationEntitiesDisruptedRouteOriginationName
      , "destinationName" .= tflApiPresentationEntitiesDisruptedRouteDestinationName
      , "via" .= tflApiPresentationEntitiesDisruptedRouteVia
      , "isEntireRouteSection" .= tflApiPresentationEntitiesDisruptedRouteIsEntireRouteSection
      , "validTo" .= tflApiPresentationEntitiesDisruptedRouteValidTo
      , "validFrom" .= tflApiPresentationEntitiesDisruptedRouteValidFrom
      , "routeSectionNaptanEntrySequence" .= tflApiPresentationEntitiesDisruptedRouteRouteSectionNaptanEntrySequence
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesDisruptedRoute' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesDisruptedRoute
  :: TflApiPresentationEntitiesDisruptedRoute
mkTflApiPresentationEntitiesDisruptedRoute =
  TflApiPresentationEntitiesDisruptedRoute
  { tflApiPresentationEntitiesDisruptedRouteId = Nothing
  , tflApiPresentationEntitiesDisruptedRouteLineId = Nothing
  , tflApiPresentationEntitiesDisruptedRouteRouteCode = Nothing
  , tflApiPresentationEntitiesDisruptedRouteName = Nothing
  , tflApiPresentationEntitiesDisruptedRouteLineString = Nothing
  , tflApiPresentationEntitiesDisruptedRouteDirection = Nothing
  , tflApiPresentationEntitiesDisruptedRouteOriginationName = Nothing
  , tflApiPresentationEntitiesDisruptedRouteDestinationName = Nothing
  , tflApiPresentationEntitiesDisruptedRouteVia = Nothing
  , tflApiPresentationEntitiesDisruptedRouteIsEntireRouteSection = Nothing
  , tflApiPresentationEntitiesDisruptedRouteValidTo = Nothing
  , tflApiPresentationEntitiesDisruptedRouteValidFrom = Nothing
  , tflApiPresentationEntitiesDisruptedRouteRouteSectionNaptanEntrySequence = Nothing
  }

-- ** TflApiPresentationEntitiesDisruption
-- | TflApiPresentationEntitiesDisruption
-- Represents a disruption to a route within the transport network.
data TflApiPresentationEntitiesDisruption = TflApiPresentationEntitiesDisruption
  { tflApiPresentationEntitiesDisruptionCategory :: !(Maybe E'Category) -- ^ "category" - Gets or sets the category of this dispruption.
  , tflApiPresentationEntitiesDisruptionType :: !(Maybe Text) -- ^ "type" - Gets or sets the disruption type of this dispruption.
  , tflApiPresentationEntitiesDisruptionCategoryDescription :: !(Maybe Text) -- ^ "categoryDescription" - Gets or sets the description of the category.
  , tflApiPresentationEntitiesDisruptionDescription :: !(Maybe Text) -- ^ "description" - Gets or sets the description of this disruption.
  , tflApiPresentationEntitiesDisruptionSummary :: !(Maybe Text) -- ^ "summary" - Gets or sets the summary of this disruption.
  , tflApiPresentationEntitiesDisruptionAdditionalInfo :: !(Maybe Text) -- ^ "additionalInfo" - Gets or sets the additionaInfo of this disruption.
  , tflApiPresentationEntitiesDisruptionCreated :: !(Maybe DateTime) -- ^ "created" - Gets or sets the date/time when this disruption was created.
  , tflApiPresentationEntitiesDisruptionLastUpdate :: !(Maybe DateTime) -- ^ "lastUpdate" - Gets or sets the date/time when this disruption was last updated.
  , tflApiPresentationEntitiesDisruptionAffectedRoutes :: !(Maybe [TflApiPresentationEntitiesDisruptedRoute]) -- ^ "affectedRoutes" - Gets or sets the routes affected by this disruption
  , tflApiPresentationEntitiesDisruptionAffectedStops :: !(Maybe [TflApiPresentationEntitiesStopPoint]) -- ^ "affectedStops" - Gets or sets the stops affected by this disruption
  , tflApiPresentationEntitiesDisruptionClosureText :: !(Maybe Text) -- ^ "closureText" - Text describing the closure type
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesDisruption
instance A.FromJSON TflApiPresentationEntitiesDisruption where
  parseJSON = A.withObject "TflApiPresentationEntitiesDisruption" $ \o ->
    TflApiPresentationEntitiesDisruption
      <$> (o .:? "category")
      <*> (o .:? "type")
      <*> (o .:? "categoryDescription")
      <*> (o .:? "description")
      <*> (o .:? "summary")
      <*> (o .:? "additionalInfo")
      <*> (o .:? "created")
      <*> (o .:? "lastUpdate")
      <*> (o .:? "affectedRoutes")
      <*> (o .:? "affectedStops")
      <*> (o .:? "closureText")

-- | ToJSON TflApiPresentationEntitiesDisruption
instance A.ToJSON TflApiPresentationEntitiesDisruption where
  toJSON TflApiPresentationEntitiesDisruption {..} =
   _omitNulls
      [ "category" .= tflApiPresentationEntitiesDisruptionCategory
      , "type" .= tflApiPresentationEntitiesDisruptionType
      , "categoryDescription" .= tflApiPresentationEntitiesDisruptionCategoryDescription
      , "description" .= tflApiPresentationEntitiesDisruptionDescription
      , "summary" .= tflApiPresentationEntitiesDisruptionSummary
      , "additionalInfo" .= tflApiPresentationEntitiesDisruptionAdditionalInfo
      , "created" .= tflApiPresentationEntitiesDisruptionCreated
      , "lastUpdate" .= tflApiPresentationEntitiesDisruptionLastUpdate
      , "affectedRoutes" .= tflApiPresentationEntitiesDisruptionAffectedRoutes
      , "affectedStops" .= tflApiPresentationEntitiesDisruptionAffectedStops
      , "closureText" .= tflApiPresentationEntitiesDisruptionClosureText
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesDisruption' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesDisruption
  :: TflApiPresentationEntitiesDisruption
mkTflApiPresentationEntitiesDisruption =
  TflApiPresentationEntitiesDisruption
  { tflApiPresentationEntitiesDisruptionCategory = Nothing
  , tflApiPresentationEntitiesDisruptionType = Nothing
  , tflApiPresentationEntitiesDisruptionCategoryDescription = Nothing
  , tflApiPresentationEntitiesDisruptionDescription = Nothing
  , tflApiPresentationEntitiesDisruptionSummary = Nothing
  , tflApiPresentationEntitiesDisruptionAdditionalInfo = Nothing
  , tflApiPresentationEntitiesDisruptionCreated = Nothing
  , tflApiPresentationEntitiesDisruptionLastUpdate = Nothing
  , tflApiPresentationEntitiesDisruptionAffectedRoutes = Nothing
  , tflApiPresentationEntitiesDisruptionAffectedStops = Nothing
  , tflApiPresentationEntitiesDisruptionClosureText = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFare
-- | TflApiPresentationEntitiesFaresFare
data TflApiPresentationEntitiesFaresFare = TflApiPresentationEntitiesFaresFare
  { tflApiPresentationEntitiesFaresFareId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesFaresFarePassengerType :: !(Maybe Text) -- ^ "passengerType"
  , tflApiPresentationEntitiesFaresFareValidFrom :: !(Maybe DateTime) -- ^ "validFrom"
  , tflApiPresentationEntitiesFaresFareValidUntil :: !(Maybe DateTime) -- ^ "validUntil"
  , tflApiPresentationEntitiesFaresFareTicketTime :: !(Maybe Text) -- ^ "ticketTime"
  , tflApiPresentationEntitiesFaresFareTicketType :: !(Maybe Text) -- ^ "ticketType"
  , tflApiPresentationEntitiesFaresFareCost :: !(Maybe Text) -- ^ "cost"
  , tflApiPresentationEntitiesFaresFareCap :: !(Maybe Double) -- ^ "cap"
  , tflApiPresentationEntitiesFaresFareDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesFaresFareZone :: !(Maybe Text) -- ^ "zone"
  , tflApiPresentationEntitiesFaresFareMode :: !(Maybe Text) -- ^ "mode"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFare
instance A.FromJSON TflApiPresentationEntitiesFaresFare where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFare" $ \o ->
    TflApiPresentationEntitiesFaresFare
      <$> (o .:? "id")
      <*> (o .:? "passengerType")
      <*> (o .:? "validFrom")
      <*> (o .:? "validUntil")
      <*> (o .:? "ticketTime")
      <*> (o .:? "ticketType")
      <*> (o .:? "cost")
      <*> (o .:? "cap")
      <*> (o .:? "description")
      <*> (o .:? "zone")
      <*> (o .:? "mode")

-- | ToJSON TflApiPresentationEntitiesFaresFare
instance A.ToJSON TflApiPresentationEntitiesFaresFare where
  toJSON TflApiPresentationEntitiesFaresFare {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesFaresFareId
      , "passengerType" .= tflApiPresentationEntitiesFaresFarePassengerType
      , "validFrom" .= tflApiPresentationEntitiesFaresFareValidFrom
      , "validUntil" .= tflApiPresentationEntitiesFaresFareValidUntil
      , "ticketTime" .= tflApiPresentationEntitiesFaresFareTicketTime
      , "ticketType" .= tflApiPresentationEntitiesFaresFareTicketType
      , "cost" .= tflApiPresentationEntitiesFaresFareCost
      , "cap" .= tflApiPresentationEntitiesFaresFareCap
      , "description" .= tflApiPresentationEntitiesFaresFareDescription
      , "zone" .= tflApiPresentationEntitiesFaresFareZone
      , "mode" .= tflApiPresentationEntitiesFaresFareMode
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFare' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFare
  :: TflApiPresentationEntitiesFaresFare
mkTflApiPresentationEntitiesFaresFare =
  TflApiPresentationEntitiesFaresFare
  { tflApiPresentationEntitiesFaresFareId = Nothing
  , tflApiPresentationEntitiesFaresFarePassengerType = Nothing
  , tflApiPresentationEntitiesFaresFareValidFrom = Nothing
  , tflApiPresentationEntitiesFaresFareValidUntil = Nothing
  , tflApiPresentationEntitiesFaresFareTicketTime = Nothing
  , tflApiPresentationEntitiesFaresFareTicketType = Nothing
  , tflApiPresentationEntitiesFaresFareCost = Nothing
  , tflApiPresentationEntitiesFaresFareCap = Nothing
  , tflApiPresentationEntitiesFaresFareDescription = Nothing
  , tflApiPresentationEntitiesFaresFareZone = Nothing
  , tflApiPresentationEntitiesFaresFareMode = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFareBounds
-- | TflApiPresentationEntitiesFaresFareBounds
data TflApiPresentationEntitiesFaresFareBounds = TflApiPresentationEntitiesFaresFareBounds
  { tflApiPresentationEntitiesFaresFareBoundsId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesFaresFareBoundsFrom :: !(Maybe Text) -- ^ "from"
  , tflApiPresentationEntitiesFaresFareBoundsTo :: !(Maybe Text) -- ^ "to"
  , tflApiPresentationEntitiesFaresFareBoundsVia :: !(Maybe Text) -- ^ "via"
  , tflApiPresentationEntitiesFaresFareBoundsRouteCode :: !(Maybe Text) -- ^ "routeCode"
  , tflApiPresentationEntitiesFaresFareBoundsDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesFaresFareBoundsDisplayName :: !(Maybe Text) -- ^ "displayName"
  , tflApiPresentationEntitiesFaresFareBoundsOperator :: !(Maybe Text) -- ^ "operator"
  , tflApiPresentationEntitiesFaresFareBoundsDisplayOrder :: !(Maybe Int) -- ^ "displayOrder"
  , tflApiPresentationEntitiesFaresFareBoundsIsPopularFare :: !(Maybe Bool) -- ^ "isPopularFare"
  , tflApiPresentationEntitiesFaresFareBoundsIsPopularTravelCard :: !(Maybe Bool) -- ^ "isPopularTravelCard"
  , tflApiPresentationEntitiesFaresFareBoundsIsTour :: !(Maybe Bool) -- ^ "isTour"
  , tflApiPresentationEntitiesFaresFareBoundsMessages :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "messages"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFareBounds
instance A.FromJSON TflApiPresentationEntitiesFaresFareBounds where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFareBounds" $ \o ->
    TflApiPresentationEntitiesFaresFareBounds
      <$> (o .:? "id")
      <*> (o .:? "from")
      <*> (o .:? "to")
      <*> (o .:? "via")
      <*> (o .:? "routeCode")
      <*> (o .:? "description")
      <*> (o .:? "displayName")
      <*> (o .:? "operator")
      <*> (o .:? "displayOrder")
      <*> (o .:? "isPopularFare")
      <*> (o .:? "isPopularTravelCard")
      <*> (o .:? "isTour")
      <*> (o .:? "messages")

-- | ToJSON TflApiPresentationEntitiesFaresFareBounds
instance A.ToJSON TflApiPresentationEntitiesFaresFareBounds where
  toJSON TflApiPresentationEntitiesFaresFareBounds {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesFaresFareBoundsId
      , "from" .= tflApiPresentationEntitiesFaresFareBoundsFrom
      , "to" .= tflApiPresentationEntitiesFaresFareBoundsTo
      , "via" .= tflApiPresentationEntitiesFaresFareBoundsVia
      , "routeCode" .= tflApiPresentationEntitiesFaresFareBoundsRouteCode
      , "description" .= tflApiPresentationEntitiesFaresFareBoundsDescription
      , "displayName" .= tflApiPresentationEntitiesFaresFareBoundsDisplayName
      , "operator" .= tflApiPresentationEntitiesFaresFareBoundsOperator
      , "displayOrder" .= tflApiPresentationEntitiesFaresFareBoundsDisplayOrder
      , "isPopularFare" .= tflApiPresentationEntitiesFaresFareBoundsIsPopularFare
      , "isPopularTravelCard" .= tflApiPresentationEntitiesFaresFareBoundsIsPopularTravelCard
      , "isTour" .= tflApiPresentationEntitiesFaresFareBoundsIsTour
      , "messages" .= tflApiPresentationEntitiesFaresFareBoundsMessages
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFareBounds' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFareBounds
  :: TflApiPresentationEntitiesFaresFareBounds
mkTflApiPresentationEntitiesFaresFareBounds =
  TflApiPresentationEntitiesFaresFareBounds
  { tflApiPresentationEntitiesFaresFareBoundsId = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsFrom = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsTo = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsVia = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsRouteCode = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsDescription = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsDisplayName = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsOperator = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsDisplayOrder = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsIsPopularFare = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsIsPopularTravelCard = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsIsTour = Nothing
  , tflApiPresentationEntitiesFaresFareBoundsMessages = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFareDetails
-- | TflApiPresentationEntitiesFaresFareDetails
data TflApiPresentationEntitiesFaresFareDetails = TflApiPresentationEntitiesFaresFareDetails
  { tflApiPresentationEntitiesFaresFareDetailsBoundsId :: !(Maybe Int) -- ^ "boundsId"
  , tflApiPresentationEntitiesFaresFareDetailsStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiPresentationEntitiesFaresFareDetailsEndDate :: !(Maybe DateTime) -- ^ "endDate"
  , tflApiPresentationEntitiesFaresFareDetailsMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesFaresFareDetailsPassengerType :: !(Maybe Text) -- ^ "passengerType"
  , tflApiPresentationEntitiesFaresFareDetailsContactlessPaygOnlyFare :: !(Maybe Bool) -- ^ "contactlessPAYGOnlyFare"
  , tflApiPresentationEntitiesFaresFareDetailsFrom :: !(Maybe Text) -- ^ "from"
  , tflApiPresentationEntitiesFaresFareDetailsTo :: !(Maybe Text) -- ^ "to"
  , tflApiPresentationEntitiesFaresFareDetailsFromStation :: !(Maybe Text) -- ^ "fromStation"
  , tflApiPresentationEntitiesFaresFareDetailsToStation :: !(Maybe Text) -- ^ "toStation"
  , tflApiPresentationEntitiesFaresFareDetailsVia :: !(Maybe Text) -- ^ "via"
  , tflApiPresentationEntitiesFaresFareDetailsRouteCode :: !(Maybe Text) -- ^ "routeCode"
  , tflApiPresentationEntitiesFaresFareDetailsDisplayName :: !(Maybe Text) -- ^ "displayName"
  , tflApiPresentationEntitiesFaresFareDetailsDisplayOrder :: !(Maybe Int) -- ^ "displayOrder"
  , tflApiPresentationEntitiesFaresFareDetailsRouteDescription :: !(Maybe Text) -- ^ "routeDescription"
  , tflApiPresentationEntitiesFaresFareDetailsValidatorInformation :: !(Maybe Text) -- ^ "validatorInformation"
  , tflApiPresentationEntitiesFaresFareDetailsOperator :: !(Maybe Text) -- ^ "operator"
  , tflApiPresentationEntitiesFaresFareDetailsSpecialFare :: !(Maybe Bool) -- ^ "specialFare"
  , tflApiPresentationEntitiesFaresFareDetailsThroughFare :: !(Maybe Bool) -- ^ "throughFare"
  , tflApiPresentationEntitiesFaresFareDetailsIsTour :: !(Maybe Bool) -- ^ "isTour"
  , tflApiPresentationEntitiesFaresFareDetailsTicketsAvailable :: !(Maybe [TflApiPresentationEntitiesFaresTicket]) -- ^ "ticketsAvailable"
  , tflApiPresentationEntitiesFaresFareDetailsMessages :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "messages"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFareDetails
instance A.FromJSON TflApiPresentationEntitiesFaresFareDetails where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFareDetails" $ \o ->
    TflApiPresentationEntitiesFaresFareDetails
      <$> (o .:? "boundsId")
      <*> (o .:? "startDate")
      <*> (o .:? "endDate")
      <*> (o .:? "mode")
      <*> (o .:? "passengerType")
      <*> (o .:? "contactlessPAYGOnlyFare")
      <*> (o .:? "from")
      <*> (o .:? "to")
      <*> (o .:? "fromStation")
      <*> (o .:? "toStation")
      <*> (o .:? "via")
      <*> (o .:? "routeCode")
      <*> (o .:? "displayName")
      <*> (o .:? "displayOrder")
      <*> (o .:? "routeDescription")
      <*> (o .:? "validatorInformation")
      <*> (o .:? "operator")
      <*> (o .:? "specialFare")
      <*> (o .:? "throughFare")
      <*> (o .:? "isTour")
      <*> (o .:? "ticketsAvailable")
      <*> (o .:? "messages")

-- | ToJSON TflApiPresentationEntitiesFaresFareDetails
instance A.ToJSON TflApiPresentationEntitiesFaresFareDetails where
  toJSON TflApiPresentationEntitiesFaresFareDetails {..} =
   _omitNulls
      [ "boundsId" .= tflApiPresentationEntitiesFaresFareDetailsBoundsId
      , "startDate" .= tflApiPresentationEntitiesFaresFareDetailsStartDate
      , "endDate" .= tflApiPresentationEntitiesFaresFareDetailsEndDate
      , "mode" .= tflApiPresentationEntitiesFaresFareDetailsMode
      , "passengerType" .= tflApiPresentationEntitiesFaresFareDetailsPassengerType
      , "contactlessPAYGOnlyFare" .= tflApiPresentationEntitiesFaresFareDetailsContactlessPaygOnlyFare
      , "from" .= tflApiPresentationEntitiesFaresFareDetailsFrom
      , "to" .= tflApiPresentationEntitiesFaresFareDetailsTo
      , "fromStation" .= tflApiPresentationEntitiesFaresFareDetailsFromStation
      , "toStation" .= tflApiPresentationEntitiesFaresFareDetailsToStation
      , "via" .= tflApiPresentationEntitiesFaresFareDetailsVia
      , "routeCode" .= tflApiPresentationEntitiesFaresFareDetailsRouteCode
      , "displayName" .= tflApiPresentationEntitiesFaresFareDetailsDisplayName
      , "displayOrder" .= tflApiPresentationEntitiesFaresFareDetailsDisplayOrder
      , "routeDescription" .= tflApiPresentationEntitiesFaresFareDetailsRouteDescription
      , "validatorInformation" .= tflApiPresentationEntitiesFaresFareDetailsValidatorInformation
      , "operator" .= tflApiPresentationEntitiesFaresFareDetailsOperator
      , "specialFare" .= tflApiPresentationEntitiesFaresFareDetailsSpecialFare
      , "throughFare" .= tflApiPresentationEntitiesFaresFareDetailsThroughFare
      , "isTour" .= tflApiPresentationEntitiesFaresFareDetailsIsTour
      , "ticketsAvailable" .= tflApiPresentationEntitiesFaresFareDetailsTicketsAvailable
      , "messages" .= tflApiPresentationEntitiesFaresFareDetailsMessages
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFareDetails' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFareDetails
  :: TflApiPresentationEntitiesFaresFareDetails
mkTflApiPresentationEntitiesFaresFareDetails =
  TflApiPresentationEntitiesFaresFareDetails
  { tflApiPresentationEntitiesFaresFareDetailsBoundsId = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsStartDate = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsEndDate = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsMode = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsPassengerType = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsContactlessPaygOnlyFare = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsFrom = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsTo = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsFromStation = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsToStation = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsVia = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsRouteCode = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsDisplayName = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsDisplayOrder = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsRouteDescription = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsValidatorInformation = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsOperator = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsSpecialFare = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsThroughFare = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsIsTour = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsTicketsAvailable = Nothing
  , tflApiPresentationEntitiesFaresFareDetailsMessages = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFareStation
-- | TflApiPresentationEntitiesFaresFareStation
data TflApiPresentationEntitiesFaresFareStation = TflApiPresentationEntitiesFaresFareStation
  { tflApiPresentationEntitiesFaresFareStationAtcoCode :: !(Maybe Text) -- ^ "atcoCode"
  , tflApiPresentationEntitiesFaresFareStationCommonName :: !(Maybe Text) -- ^ "commonName"
  , tflApiPresentationEntitiesFaresFareStationFareCategory :: !(Maybe E'FareCategory) -- ^ "fareCategory"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFareStation
instance A.FromJSON TflApiPresentationEntitiesFaresFareStation where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFareStation" $ \o ->
    TflApiPresentationEntitiesFaresFareStation
      <$> (o .:? "atcoCode")
      <*> (o .:? "commonName")
      <*> (o .:? "fareCategory")

-- | ToJSON TflApiPresentationEntitiesFaresFareStation
instance A.ToJSON TflApiPresentationEntitiesFaresFareStation where
  toJSON TflApiPresentationEntitiesFaresFareStation {..} =
   _omitNulls
      [ "atcoCode" .= tflApiPresentationEntitiesFaresFareStationAtcoCode
      , "commonName" .= tflApiPresentationEntitiesFaresFareStationCommonName
      , "fareCategory" .= tflApiPresentationEntitiesFaresFareStationFareCategory
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFareStation' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFareStation
  :: TflApiPresentationEntitiesFaresFareStation
mkTflApiPresentationEntitiesFaresFareStation =
  TflApiPresentationEntitiesFaresFareStation
  { tflApiPresentationEntitiesFaresFareStationAtcoCode = Nothing
  , tflApiPresentationEntitiesFaresFareStationCommonName = Nothing
  , tflApiPresentationEntitiesFaresFareStationFareCategory = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFaresMode
-- | TflApiPresentationEntitiesFaresFaresMode
data TflApiPresentationEntitiesFaresFaresMode = TflApiPresentationEntitiesFaresFaresMode
  { tflApiPresentationEntitiesFaresFaresModeId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesFaresFaresModeName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesFaresFaresModeDescription :: !(Maybe Text) -- ^ "description"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFaresMode
instance A.FromJSON TflApiPresentationEntitiesFaresFaresMode where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFaresMode" $ \o ->
    TflApiPresentationEntitiesFaresFaresMode
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "description")

-- | ToJSON TflApiPresentationEntitiesFaresFaresMode
instance A.ToJSON TflApiPresentationEntitiesFaresFaresMode where
  toJSON TflApiPresentationEntitiesFaresFaresMode {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesFaresFaresModeId
      , "name" .= tflApiPresentationEntitiesFaresFaresModeName
      , "description" .= tflApiPresentationEntitiesFaresFaresModeDescription
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFaresMode' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFaresMode
  :: TflApiPresentationEntitiesFaresFaresMode
mkTflApiPresentationEntitiesFaresFaresMode =
  TflApiPresentationEntitiesFaresFaresMode
  { tflApiPresentationEntitiesFaresFaresModeId = Nothing
  , tflApiPresentationEntitiesFaresFaresModeName = Nothing
  , tflApiPresentationEntitiesFaresFaresModeDescription = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFaresPeriod
-- | TflApiPresentationEntitiesFaresFaresPeriod
data TflApiPresentationEntitiesFaresFaresPeriod = TflApiPresentationEntitiesFaresFaresPeriod
  { tflApiPresentationEntitiesFaresFaresPeriodId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesFaresFaresPeriodStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiPresentationEntitiesFaresFaresPeriodViewableDate :: !(Maybe DateTime) -- ^ "viewableDate"
  , tflApiPresentationEntitiesFaresFaresPeriodEndDate :: !(Maybe DateTime) -- ^ "endDate"
  , tflApiPresentationEntitiesFaresFaresPeriodIsFuture :: !(Maybe Bool) -- ^ "isFuture"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFaresPeriod
instance A.FromJSON TflApiPresentationEntitiesFaresFaresPeriod where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFaresPeriod" $ \o ->
    TflApiPresentationEntitiesFaresFaresPeriod
      <$> (o .:? "id")
      <*> (o .:? "startDate")
      <*> (o .:? "viewableDate")
      <*> (o .:? "endDate")
      <*> (o .:? "isFuture")

-- | ToJSON TflApiPresentationEntitiesFaresFaresPeriod
instance A.ToJSON TflApiPresentationEntitiesFaresFaresPeriod where
  toJSON TflApiPresentationEntitiesFaresFaresPeriod {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesFaresFaresPeriodId
      , "startDate" .= tflApiPresentationEntitiesFaresFaresPeriodStartDate
      , "viewableDate" .= tflApiPresentationEntitiesFaresFaresPeriodViewableDate
      , "endDate" .= tflApiPresentationEntitiesFaresFaresPeriodEndDate
      , "isFuture" .= tflApiPresentationEntitiesFaresFaresPeriodIsFuture
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFaresPeriod' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFaresPeriod
  :: TflApiPresentationEntitiesFaresFaresPeriod
mkTflApiPresentationEntitiesFaresFaresPeriod =
  TflApiPresentationEntitiesFaresFaresPeriod
  { tflApiPresentationEntitiesFaresFaresPeriodId = Nothing
  , tflApiPresentationEntitiesFaresFaresPeriodStartDate = Nothing
  , tflApiPresentationEntitiesFaresFaresPeriodViewableDate = Nothing
  , tflApiPresentationEntitiesFaresFaresPeriodEndDate = Nothing
  , tflApiPresentationEntitiesFaresFaresPeriodIsFuture = Nothing
  }

-- ** TflApiPresentationEntitiesFaresFaresSection
-- | TflApiPresentationEntitiesFaresFaresSection
data TflApiPresentationEntitiesFaresFaresSection = TflApiPresentationEntitiesFaresFaresSection
  { tflApiPresentationEntitiesFaresFaresSectionHeader :: !(Maybe Text) -- ^ "header"
  , tflApiPresentationEntitiesFaresFaresSectionIndex :: !(Maybe Int) -- ^ "index"
  , tflApiPresentationEntitiesFaresFaresSectionJourney :: !(Maybe TflApiPresentationEntitiesFaresJourney) -- ^ "journey"
  , tflApiPresentationEntitiesFaresFaresSectionRows :: !(Maybe [TflApiPresentationEntitiesFaresFareDetails]) -- ^ "rows"
  , tflApiPresentationEntitiesFaresFaresSectionMessages :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "messages"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresFaresSection
instance A.FromJSON TflApiPresentationEntitiesFaresFaresSection where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresFaresSection" $ \o ->
    TflApiPresentationEntitiesFaresFaresSection
      <$> (o .:? "header")
      <*> (o .:? "index")
      <*> (o .:? "journey")
      <*> (o .:? "rows")
      <*> (o .:? "messages")

-- | ToJSON TflApiPresentationEntitiesFaresFaresSection
instance A.ToJSON TflApiPresentationEntitiesFaresFaresSection where
  toJSON TflApiPresentationEntitiesFaresFaresSection {..} =
   _omitNulls
      [ "header" .= tflApiPresentationEntitiesFaresFaresSectionHeader
      , "index" .= tflApiPresentationEntitiesFaresFaresSectionIndex
      , "journey" .= tflApiPresentationEntitiesFaresFaresSectionJourney
      , "rows" .= tflApiPresentationEntitiesFaresFaresSectionRows
      , "messages" .= tflApiPresentationEntitiesFaresFaresSectionMessages
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresFaresSection' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresFaresSection
  :: TflApiPresentationEntitiesFaresFaresSection
mkTflApiPresentationEntitiesFaresFaresSection =
  TflApiPresentationEntitiesFaresFaresSection
  { tflApiPresentationEntitiesFaresFaresSectionHeader = Nothing
  , tflApiPresentationEntitiesFaresFaresSectionIndex = Nothing
  , tflApiPresentationEntitiesFaresFaresSectionJourney = Nothing
  , tflApiPresentationEntitiesFaresFaresSectionRows = Nothing
  , tflApiPresentationEntitiesFaresFaresSectionMessages = Nothing
  }

-- ** TflApiPresentationEntitiesFaresJourney
-- | TflApiPresentationEntitiesFaresJourney
data TflApiPresentationEntitiesFaresJourney = TflApiPresentationEntitiesFaresJourney
  { tflApiPresentationEntitiesFaresJourneyFromStation :: !(Maybe TflApiPresentationEntitiesFaresFareStation) -- ^ "fromStation"
  , tflApiPresentationEntitiesFaresJourneyToStation :: !(Maybe TflApiPresentationEntitiesFaresFareStation) -- ^ "toStation"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresJourney
instance A.FromJSON TflApiPresentationEntitiesFaresJourney where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresJourney" $ \o ->
    TflApiPresentationEntitiesFaresJourney
      <$> (o .:? "fromStation")
      <*> (o .:? "toStation")

-- | ToJSON TflApiPresentationEntitiesFaresJourney
instance A.ToJSON TflApiPresentationEntitiesFaresJourney where
  toJSON TflApiPresentationEntitiesFaresJourney {..} =
   _omitNulls
      [ "fromStation" .= tflApiPresentationEntitiesFaresJourneyFromStation
      , "toStation" .= tflApiPresentationEntitiesFaresJourneyToStation
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresJourney' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresJourney
  :: TflApiPresentationEntitiesFaresJourney
mkTflApiPresentationEntitiesFaresJourney =
  TflApiPresentationEntitiesFaresJourney
  { tflApiPresentationEntitiesFaresJourneyFromStation = Nothing
  , tflApiPresentationEntitiesFaresJourneyToStation = Nothing
  }

-- ** TflApiPresentationEntitiesFaresPassengerType
-- | TflApiPresentationEntitiesFaresPassengerType
data TflApiPresentationEntitiesFaresPassengerType = TflApiPresentationEntitiesFaresPassengerType
  { tflApiPresentationEntitiesFaresPassengerTypeType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesFaresPassengerTypeDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesFaresPassengerTypeDisplayName :: !(Maybe Text) -- ^ "displayName"
  , tflApiPresentationEntitiesFaresPassengerTypeDisplayOrder :: !(Maybe Int) -- ^ "displayOrder"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresPassengerType
instance A.FromJSON TflApiPresentationEntitiesFaresPassengerType where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresPassengerType" $ \o ->
    TflApiPresentationEntitiesFaresPassengerType
      <$> (o .:? "type")
      <*> (o .:? "description")
      <*> (o .:? "displayName")
      <*> (o .:? "displayOrder")

-- | ToJSON TflApiPresentationEntitiesFaresPassengerType
instance A.ToJSON TflApiPresentationEntitiesFaresPassengerType where
  toJSON TflApiPresentationEntitiesFaresPassengerType {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesFaresPassengerTypeType
      , "description" .= tflApiPresentationEntitiesFaresPassengerTypeDescription
      , "displayName" .= tflApiPresentationEntitiesFaresPassengerTypeDisplayName
      , "displayOrder" .= tflApiPresentationEntitiesFaresPassengerTypeDisplayOrder
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresPassengerType' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresPassengerType
  :: TflApiPresentationEntitiesFaresPassengerType
mkTflApiPresentationEntitiesFaresPassengerType =
  TflApiPresentationEntitiesFaresPassengerType
  { tflApiPresentationEntitiesFaresPassengerTypeType = Nothing
  , tflApiPresentationEntitiesFaresPassengerTypeDescription = Nothing
  , tflApiPresentationEntitiesFaresPassengerTypeDisplayName = Nothing
  , tflApiPresentationEntitiesFaresPassengerTypeDisplayOrder = Nothing
  }

-- ** TflApiPresentationEntitiesFaresRecommendation
-- | TflApiPresentationEntitiesFaresRecommendation
data TflApiPresentationEntitiesFaresRecommendation = TflApiPresentationEntitiesFaresRecommendation
  { tflApiPresentationEntitiesFaresRecommendationId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesFaresRecommendationRule :: !(Maybe Int) -- ^ "rule"
  , tflApiPresentationEntitiesFaresRecommendationRank :: !(Maybe Int) -- ^ "rank"
  , tflApiPresentationEntitiesFaresRecommendationFareType :: !(Maybe Text) -- ^ "fareType"
  , tflApiPresentationEntitiesFaresRecommendationProduct :: !(Maybe Text) -- ^ "product"
  , tflApiPresentationEntitiesFaresRecommendationTicketType :: !(Maybe Text) -- ^ "ticketType"
  , tflApiPresentationEntitiesFaresRecommendationTicketTime :: !(Maybe Text) -- ^ "ticketTime"
  , tflApiPresentationEntitiesFaresRecommendationProductType :: !(Maybe Text) -- ^ "productType"
  , tflApiPresentationEntitiesFaresRecommendationDiscountCard :: !(Maybe Text) -- ^ "discountCard"
  , tflApiPresentationEntitiesFaresRecommendationZones :: !(Maybe Text) -- ^ "zones"
  , tflApiPresentationEntitiesFaresRecommendationCost :: !(Maybe Text) -- ^ "cost"
  , tflApiPresentationEntitiesFaresRecommendationPriceDescription :: !(Maybe Text) -- ^ "priceDescription"
  , tflApiPresentationEntitiesFaresRecommendationPriceComparison :: !(Maybe Text) -- ^ "priceComparison"
  , tflApiPresentationEntitiesFaresRecommendationRecommendedTopUp :: !(Maybe Text) -- ^ "recommendedTopUp"
  , tflApiPresentationEntitiesFaresRecommendationNotes :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "notes"
  , tflApiPresentationEntitiesFaresRecommendationKeyFeatures :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "keyFeatures"
  , tflApiPresentationEntitiesFaresRecommendationGettingYourTicket :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "gettingYourTicket"
  , tflApiPresentationEntitiesFaresRecommendationSingleFare :: !(Maybe Double) -- ^ "singleFare"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresRecommendation
instance A.FromJSON TflApiPresentationEntitiesFaresRecommendation where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresRecommendation" $ \o ->
    TflApiPresentationEntitiesFaresRecommendation
      <$> (o .:? "id")
      <*> (o .:? "rule")
      <*> (o .:? "rank")
      <*> (o .:? "fareType")
      <*> (o .:? "product")
      <*> (o .:? "ticketType")
      <*> (o .:? "ticketTime")
      <*> (o .:? "productType")
      <*> (o .:? "discountCard")
      <*> (o .:? "zones")
      <*> (o .:? "cost")
      <*> (o .:? "priceDescription")
      <*> (o .:? "priceComparison")
      <*> (o .:? "recommendedTopUp")
      <*> (o .:? "notes")
      <*> (o .:? "keyFeatures")
      <*> (o .:? "gettingYourTicket")
      <*> (o .:? "singleFare")

-- | ToJSON TflApiPresentationEntitiesFaresRecommendation
instance A.ToJSON TflApiPresentationEntitiesFaresRecommendation where
  toJSON TflApiPresentationEntitiesFaresRecommendation {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesFaresRecommendationId
      , "rule" .= tflApiPresentationEntitiesFaresRecommendationRule
      , "rank" .= tflApiPresentationEntitiesFaresRecommendationRank
      , "fareType" .= tflApiPresentationEntitiesFaresRecommendationFareType
      , "product" .= tflApiPresentationEntitiesFaresRecommendationProduct
      , "ticketType" .= tflApiPresentationEntitiesFaresRecommendationTicketType
      , "ticketTime" .= tflApiPresentationEntitiesFaresRecommendationTicketTime
      , "productType" .= tflApiPresentationEntitiesFaresRecommendationProductType
      , "discountCard" .= tflApiPresentationEntitiesFaresRecommendationDiscountCard
      , "zones" .= tflApiPresentationEntitiesFaresRecommendationZones
      , "cost" .= tflApiPresentationEntitiesFaresRecommendationCost
      , "priceDescription" .= tflApiPresentationEntitiesFaresRecommendationPriceDescription
      , "priceComparison" .= tflApiPresentationEntitiesFaresRecommendationPriceComparison
      , "recommendedTopUp" .= tflApiPresentationEntitiesFaresRecommendationRecommendedTopUp
      , "notes" .= tflApiPresentationEntitiesFaresRecommendationNotes
      , "keyFeatures" .= tflApiPresentationEntitiesFaresRecommendationKeyFeatures
      , "gettingYourTicket" .= tflApiPresentationEntitiesFaresRecommendationGettingYourTicket
      , "singleFare" .= tflApiPresentationEntitiesFaresRecommendationSingleFare
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresRecommendation' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresRecommendation
  :: TflApiPresentationEntitiesFaresRecommendation
mkTflApiPresentationEntitiesFaresRecommendation =
  TflApiPresentationEntitiesFaresRecommendation
  { tflApiPresentationEntitiesFaresRecommendationId = Nothing
  , tflApiPresentationEntitiesFaresRecommendationRule = Nothing
  , tflApiPresentationEntitiesFaresRecommendationRank = Nothing
  , tflApiPresentationEntitiesFaresRecommendationFareType = Nothing
  , tflApiPresentationEntitiesFaresRecommendationProduct = Nothing
  , tflApiPresentationEntitiesFaresRecommendationTicketType = Nothing
  , tflApiPresentationEntitiesFaresRecommendationTicketTime = Nothing
  , tflApiPresentationEntitiesFaresRecommendationProductType = Nothing
  , tflApiPresentationEntitiesFaresRecommendationDiscountCard = Nothing
  , tflApiPresentationEntitiesFaresRecommendationZones = Nothing
  , tflApiPresentationEntitiesFaresRecommendationCost = Nothing
  , tflApiPresentationEntitiesFaresRecommendationPriceDescription = Nothing
  , tflApiPresentationEntitiesFaresRecommendationPriceComparison = Nothing
  , tflApiPresentationEntitiesFaresRecommendationRecommendedTopUp = Nothing
  , tflApiPresentationEntitiesFaresRecommendationNotes = Nothing
  , tflApiPresentationEntitiesFaresRecommendationKeyFeatures = Nothing
  , tflApiPresentationEntitiesFaresRecommendationGettingYourTicket = Nothing
  , tflApiPresentationEntitiesFaresRecommendationSingleFare = Nothing
  }

-- ** TflApiPresentationEntitiesFaresRecommendationResponse
-- | TflApiPresentationEntitiesFaresRecommendationResponse
data TflApiPresentationEntitiesFaresRecommendationResponse = TflApiPresentationEntitiesFaresRecommendationResponse
  { tflApiPresentationEntitiesFaresRecommendationResponseRecommendations :: !(Maybe [TflApiPresentationEntitiesFaresRecommendation]) -- ^ "recommendations"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresRecommendationResponse
instance A.FromJSON TflApiPresentationEntitiesFaresRecommendationResponse where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresRecommendationResponse" $ \o ->
    TflApiPresentationEntitiesFaresRecommendationResponse
      <$> (o .:? "recommendations")

-- | ToJSON TflApiPresentationEntitiesFaresRecommendationResponse
instance A.ToJSON TflApiPresentationEntitiesFaresRecommendationResponse where
  toJSON TflApiPresentationEntitiesFaresRecommendationResponse {..} =
   _omitNulls
      [ "recommendations" .= tflApiPresentationEntitiesFaresRecommendationResponseRecommendations
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresRecommendationResponse' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresRecommendationResponse
  :: TflApiPresentationEntitiesFaresRecommendationResponse
mkTflApiPresentationEntitiesFaresRecommendationResponse =
  TflApiPresentationEntitiesFaresRecommendationResponse
  { tflApiPresentationEntitiesFaresRecommendationResponseRecommendations = Nothing
  }

-- ** TflApiPresentationEntitiesFaresTicket
-- | TflApiPresentationEntitiesFaresTicket
data TflApiPresentationEntitiesFaresTicket = TflApiPresentationEntitiesFaresTicket
  { tflApiPresentationEntitiesFaresTicketPassengerType :: !(Maybe Text) -- ^ "passengerType"
  , tflApiPresentationEntitiesFaresTicketTicketType :: !(Maybe TflApiPresentationEntitiesFaresTicketType) -- ^ "ticketType"
  , tflApiPresentationEntitiesFaresTicketTicketTime :: !(Maybe TflApiPresentationEntitiesFaresTicketTime) -- ^ "ticketTime"
  , tflApiPresentationEntitiesFaresTicketCost :: !(Maybe Text) -- ^ "cost"
  , tflApiPresentationEntitiesFaresTicketDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesFaresTicketMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesFaresTicketDisplayOrder :: !(Maybe Int) -- ^ "displayOrder"
  , tflApiPresentationEntitiesFaresTicketMessages :: !(Maybe [TflApiPresentationEntitiesMessage]) -- ^ "messages"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresTicket
instance A.FromJSON TflApiPresentationEntitiesFaresTicket where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresTicket" $ \o ->
    TflApiPresentationEntitiesFaresTicket
      <$> (o .:? "passengerType")
      <*> (o .:? "ticketType")
      <*> (o .:? "ticketTime")
      <*> (o .:? "cost")
      <*> (o .:? "description")
      <*> (o .:? "mode")
      <*> (o .:? "displayOrder")
      <*> (o .:? "messages")

-- | ToJSON TflApiPresentationEntitiesFaresTicket
instance A.ToJSON TflApiPresentationEntitiesFaresTicket where
  toJSON TflApiPresentationEntitiesFaresTicket {..} =
   _omitNulls
      [ "passengerType" .= tflApiPresentationEntitiesFaresTicketPassengerType
      , "ticketType" .= tflApiPresentationEntitiesFaresTicketTicketType
      , "ticketTime" .= tflApiPresentationEntitiesFaresTicketTicketTime
      , "cost" .= tflApiPresentationEntitiesFaresTicketCost
      , "description" .= tflApiPresentationEntitiesFaresTicketDescription
      , "mode" .= tflApiPresentationEntitiesFaresTicketMode
      , "displayOrder" .= tflApiPresentationEntitiesFaresTicketDisplayOrder
      , "messages" .= tflApiPresentationEntitiesFaresTicketMessages
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresTicket' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresTicket
  :: TflApiPresentationEntitiesFaresTicket
mkTflApiPresentationEntitiesFaresTicket =
  TflApiPresentationEntitiesFaresTicket
  { tflApiPresentationEntitiesFaresTicketPassengerType = Nothing
  , tflApiPresentationEntitiesFaresTicketTicketType = Nothing
  , tflApiPresentationEntitiesFaresTicketTicketTime = Nothing
  , tflApiPresentationEntitiesFaresTicketCost = Nothing
  , tflApiPresentationEntitiesFaresTicketDescription = Nothing
  , tflApiPresentationEntitiesFaresTicketMode = Nothing
  , tflApiPresentationEntitiesFaresTicketDisplayOrder = Nothing
  , tflApiPresentationEntitiesFaresTicketMessages = Nothing
  }

-- ** TflApiPresentationEntitiesFaresTicketTime
-- | TflApiPresentationEntitiesFaresTicketTime
data TflApiPresentationEntitiesFaresTicketTime = TflApiPresentationEntitiesFaresTicketTime
  { tflApiPresentationEntitiesFaresTicketTimeType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesFaresTicketTimeDescription :: !(Maybe Text) -- ^ "description"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresTicketTime
instance A.FromJSON TflApiPresentationEntitiesFaresTicketTime where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresTicketTime" $ \o ->
    TflApiPresentationEntitiesFaresTicketTime
      <$> (o .:? "type")
      <*> (o .:? "description")

-- | ToJSON TflApiPresentationEntitiesFaresTicketTime
instance A.ToJSON TflApiPresentationEntitiesFaresTicketTime where
  toJSON TflApiPresentationEntitiesFaresTicketTime {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesFaresTicketTimeType
      , "description" .= tflApiPresentationEntitiesFaresTicketTimeDescription
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresTicketTime' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresTicketTime
  :: TflApiPresentationEntitiesFaresTicketTime
mkTflApiPresentationEntitiesFaresTicketTime =
  TflApiPresentationEntitiesFaresTicketTime
  { tflApiPresentationEntitiesFaresTicketTimeType = Nothing
  , tflApiPresentationEntitiesFaresTicketTimeDescription = Nothing
  }

-- ** TflApiPresentationEntitiesFaresTicketType
-- | TflApiPresentationEntitiesFaresTicketType
data TflApiPresentationEntitiesFaresTicketType = TflApiPresentationEntitiesFaresTicketType
  { tflApiPresentationEntitiesFaresTicketTypeType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesFaresTicketTypeDescription :: !(Maybe Text) -- ^ "description"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesFaresTicketType
instance A.FromJSON TflApiPresentationEntitiesFaresTicketType where
  parseJSON = A.withObject "TflApiPresentationEntitiesFaresTicketType" $ \o ->
    TflApiPresentationEntitiesFaresTicketType
      <$> (o .:? "type")
      <*> (o .:? "description")

-- | ToJSON TflApiPresentationEntitiesFaresTicketType
instance A.ToJSON TflApiPresentationEntitiesFaresTicketType where
  toJSON TflApiPresentationEntitiesFaresTicketType {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesFaresTicketTypeType
      , "description" .= tflApiPresentationEntitiesFaresTicketTypeDescription
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesFaresTicketType' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesFaresTicketType
  :: TflApiPresentationEntitiesFaresTicketType
mkTflApiPresentationEntitiesFaresTicketType =
  TflApiPresentationEntitiesFaresTicketType
  { tflApiPresentationEntitiesFaresTicketTypeType = Nothing
  , tflApiPresentationEntitiesFaresTicketTypeDescription = Nothing
  }

-- ** TflApiPresentationEntitiesGeoCodeSearchMatch
-- | TflApiPresentationEntitiesGeoCodeSearchMatch
data TflApiPresentationEntitiesGeoCodeSearchMatch = TflApiPresentationEntitiesGeoCodeSearchMatch
  { tflApiPresentationEntitiesGeoCodeSearchMatchTypes :: !(Maybe [Text]) -- ^ "types" - The type of the place e.g. \&quot;street_address\&quot;
  , tflApiPresentationEntitiesGeoCodeSearchMatchAddress :: !(Maybe Text) -- ^ "address" - A string describing the formatted address of the place. Adds additional context to the place&#39;s Name.
  , tflApiPresentationEntitiesGeoCodeSearchMatchId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesGeoCodeSearchMatchUrl :: !(Maybe Text) -- ^ "url"
  , tflApiPresentationEntitiesGeoCodeSearchMatchName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesGeoCodeSearchMatchLat :: !(Maybe Double) -- ^ "lat"
  , tflApiPresentationEntitiesGeoCodeSearchMatchLon :: !(Maybe Double) -- ^ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesGeoCodeSearchMatch
instance A.FromJSON TflApiPresentationEntitiesGeoCodeSearchMatch where
  parseJSON = A.withObject "TflApiPresentationEntitiesGeoCodeSearchMatch" $ \o ->
    TflApiPresentationEntitiesGeoCodeSearchMatch
      <$> (o .:? "types")
      <*> (o .:? "address")
      <*> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "name")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesGeoCodeSearchMatch
instance A.ToJSON TflApiPresentationEntitiesGeoCodeSearchMatch where
  toJSON TflApiPresentationEntitiesGeoCodeSearchMatch {..} =
   _omitNulls
      [ "types" .= tflApiPresentationEntitiesGeoCodeSearchMatchTypes
      , "address" .= tflApiPresentationEntitiesGeoCodeSearchMatchAddress
      , "id" .= tflApiPresentationEntitiesGeoCodeSearchMatchId
      , "url" .= tflApiPresentationEntitiesGeoCodeSearchMatchUrl
      , "name" .= tflApiPresentationEntitiesGeoCodeSearchMatchName
      , "lat" .= tflApiPresentationEntitiesGeoCodeSearchMatchLat
      , "lon" .= tflApiPresentationEntitiesGeoCodeSearchMatchLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesGeoCodeSearchMatch' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesGeoCodeSearchMatch
  :: TflApiPresentationEntitiesGeoCodeSearchMatch
mkTflApiPresentationEntitiesGeoCodeSearchMatch =
  TflApiPresentationEntitiesGeoCodeSearchMatch
  { tflApiPresentationEntitiesGeoCodeSearchMatchTypes = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchAddress = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchId = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchUrl = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchName = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchLat = Nothing
  , tflApiPresentationEntitiesGeoCodeSearchMatchLon = Nothing
  }

-- ** TflApiPresentationEntitiesIdentifier
-- | TflApiPresentationEntitiesIdentifier
data TflApiPresentationEntitiesIdentifier = TflApiPresentationEntitiesIdentifier
  { tflApiPresentationEntitiesIdentifierId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesIdentifierName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesIdentifierUri :: !(Maybe Text) -- ^ "uri"
  , tflApiPresentationEntitiesIdentifierFullName :: !(Maybe Text) -- ^ "fullName"
  , tflApiPresentationEntitiesIdentifierType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesIdentifierCrowding :: !(Maybe TflApiPresentationEntitiesCrowding) -- ^ "crowding"
  , tflApiPresentationEntitiesIdentifierRouteType :: !(Maybe E'RouteType) -- ^ "routeType"
  , tflApiPresentationEntitiesIdentifierStatus :: !(Maybe E'Status) -- ^ "status"
  , tflApiPresentationEntitiesIdentifierMotType :: !(Maybe Text) -- ^ "motType"
  , tflApiPresentationEntitiesIdentifierNetwork :: !(Maybe Text) -- ^ "network"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesIdentifier
instance A.FromJSON TflApiPresentationEntitiesIdentifier where
  parseJSON = A.withObject "TflApiPresentationEntitiesIdentifier" $ \o ->
    TflApiPresentationEntitiesIdentifier
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "uri")
      <*> (o .:? "fullName")
      <*> (o .:? "type")
      <*> (o .:? "crowding")
      <*> (o .:? "routeType")
      <*> (o .:? "status")
      <*> (o .:? "motType")
      <*> (o .:? "network")

-- | ToJSON TflApiPresentationEntitiesIdentifier
instance A.ToJSON TflApiPresentationEntitiesIdentifier where
  toJSON TflApiPresentationEntitiesIdentifier {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesIdentifierId
      , "name" .= tflApiPresentationEntitiesIdentifierName
      , "uri" .= tflApiPresentationEntitiesIdentifierUri
      , "fullName" .= tflApiPresentationEntitiesIdentifierFullName
      , "type" .= tflApiPresentationEntitiesIdentifierType
      , "crowding" .= tflApiPresentationEntitiesIdentifierCrowding
      , "routeType" .= tflApiPresentationEntitiesIdentifierRouteType
      , "status" .= tflApiPresentationEntitiesIdentifierStatus
      , "motType" .= tflApiPresentationEntitiesIdentifierMotType
      , "network" .= tflApiPresentationEntitiesIdentifierNetwork
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesIdentifier' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesIdentifier
  :: TflApiPresentationEntitiesIdentifier
mkTflApiPresentationEntitiesIdentifier =
  TflApiPresentationEntitiesIdentifier
  { tflApiPresentationEntitiesIdentifierId = Nothing
  , tflApiPresentationEntitiesIdentifierName = Nothing
  , tflApiPresentationEntitiesIdentifierUri = Nothing
  , tflApiPresentationEntitiesIdentifierFullName = Nothing
  , tflApiPresentationEntitiesIdentifierType = Nothing
  , tflApiPresentationEntitiesIdentifierCrowding = Nothing
  , tflApiPresentationEntitiesIdentifierRouteType = Nothing
  , tflApiPresentationEntitiesIdentifierStatus = Nothing
  , tflApiPresentationEntitiesIdentifierMotType = Nothing
  , tflApiPresentationEntitiesIdentifierNetwork = Nothing
  }

-- ** TflApiPresentationEntitiesInstruction
-- | TflApiPresentationEntitiesInstruction
data TflApiPresentationEntitiesInstruction = TflApiPresentationEntitiesInstruction
  { tflApiPresentationEntitiesInstructionSummary :: !(Maybe Text) -- ^ "summary"
  , tflApiPresentationEntitiesInstructionDetailed :: !(Maybe Text) -- ^ "detailed"
  , tflApiPresentationEntitiesInstructionSteps :: !(Maybe [TflApiPresentationEntitiesInstructionStep]) -- ^ "steps"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesInstruction
instance A.FromJSON TflApiPresentationEntitiesInstruction where
  parseJSON = A.withObject "TflApiPresentationEntitiesInstruction" $ \o ->
    TflApiPresentationEntitiesInstruction
      <$> (o .:? "summary")
      <*> (o .:? "detailed")
      <*> (o .:? "steps")

-- | ToJSON TflApiPresentationEntitiesInstruction
instance A.ToJSON TflApiPresentationEntitiesInstruction where
  toJSON TflApiPresentationEntitiesInstruction {..} =
   _omitNulls
      [ "summary" .= tflApiPresentationEntitiesInstructionSummary
      , "detailed" .= tflApiPresentationEntitiesInstructionDetailed
      , "steps" .= tflApiPresentationEntitiesInstructionSteps
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesInstruction' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesInstruction
  :: TflApiPresentationEntitiesInstruction
mkTflApiPresentationEntitiesInstruction =
  TflApiPresentationEntitiesInstruction
  { tflApiPresentationEntitiesInstructionSummary = Nothing
  , tflApiPresentationEntitiesInstructionDetailed = Nothing
  , tflApiPresentationEntitiesInstructionSteps = Nothing
  }

-- ** TflApiPresentationEntitiesInstructionStep
-- | TflApiPresentationEntitiesInstructionStep
data TflApiPresentationEntitiesInstructionStep = TflApiPresentationEntitiesInstructionStep
  { tflApiPresentationEntitiesInstructionStepDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesInstructionStepTurnDirection :: !(Maybe Text) -- ^ "turnDirection"
  , tflApiPresentationEntitiesInstructionStepStreetName :: !(Maybe Text) -- ^ "streetName"
  , tflApiPresentationEntitiesInstructionStepDistance :: !(Maybe Int) -- ^ "distance"
  , tflApiPresentationEntitiesInstructionStepCumulativeDistance :: !(Maybe Int) -- ^ "cumulativeDistance"
  , tflApiPresentationEntitiesInstructionStepSkyDirection :: !(Maybe Int) -- ^ "skyDirection"
  , tflApiPresentationEntitiesInstructionStepSkyDirectionDescription :: !(Maybe E'SkyDirectionDescription) -- ^ "skyDirectionDescription"
  , tflApiPresentationEntitiesInstructionStepCumulativeTravelTime :: !(Maybe Int) -- ^ "cumulativeTravelTime"
  , tflApiPresentationEntitiesInstructionStepLatitude :: !(Maybe Double) -- ^ "latitude"
  , tflApiPresentationEntitiesInstructionStepLongitude :: !(Maybe Double) -- ^ "longitude"
  , tflApiPresentationEntitiesInstructionStepPathAttribute :: !(Maybe TflApiPresentationEntitiesPathAttribute) -- ^ "pathAttribute"
  , tflApiPresentationEntitiesInstructionStepDescriptionHeading :: !(Maybe Text) -- ^ "descriptionHeading"
  , tflApiPresentationEntitiesInstructionStepTrackType :: !(Maybe E'TrackType) -- ^ "trackType"
  , tflApiPresentationEntitiesInstructionStepTravelTime :: !(Maybe Int) -- ^ "travelTime"
  , tflApiPresentationEntitiesInstructionStepAtcoCode :: !(Maybe Text) -- ^ "atcoCode"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesInstructionStep
instance A.FromJSON TflApiPresentationEntitiesInstructionStep where
  parseJSON = A.withObject "TflApiPresentationEntitiesInstructionStep" $ \o ->
    TflApiPresentationEntitiesInstructionStep
      <$> (o .:? "description")
      <*> (o .:? "turnDirection")
      <*> (o .:? "streetName")
      <*> (o .:? "distance")
      <*> (o .:? "cumulativeDistance")
      <*> (o .:? "skyDirection")
      <*> (o .:? "skyDirectionDescription")
      <*> (o .:? "cumulativeTravelTime")
      <*> (o .:? "latitude")
      <*> (o .:? "longitude")
      <*> (o .:? "pathAttribute")
      <*> (o .:? "descriptionHeading")
      <*> (o .:? "trackType")
      <*> (o .:? "travelTime")
      <*> (o .:? "atcoCode")

-- | ToJSON TflApiPresentationEntitiesInstructionStep
instance A.ToJSON TflApiPresentationEntitiesInstructionStep where
  toJSON TflApiPresentationEntitiesInstructionStep {..} =
   _omitNulls
      [ "description" .= tflApiPresentationEntitiesInstructionStepDescription
      , "turnDirection" .= tflApiPresentationEntitiesInstructionStepTurnDirection
      , "streetName" .= tflApiPresentationEntitiesInstructionStepStreetName
      , "distance" .= tflApiPresentationEntitiesInstructionStepDistance
      , "cumulativeDistance" .= tflApiPresentationEntitiesInstructionStepCumulativeDistance
      , "skyDirection" .= tflApiPresentationEntitiesInstructionStepSkyDirection
      , "skyDirectionDescription" .= tflApiPresentationEntitiesInstructionStepSkyDirectionDescription
      , "cumulativeTravelTime" .= tflApiPresentationEntitiesInstructionStepCumulativeTravelTime
      , "latitude" .= tflApiPresentationEntitiesInstructionStepLatitude
      , "longitude" .= tflApiPresentationEntitiesInstructionStepLongitude
      , "pathAttribute" .= tflApiPresentationEntitiesInstructionStepPathAttribute
      , "descriptionHeading" .= tflApiPresentationEntitiesInstructionStepDescriptionHeading
      , "trackType" .= tflApiPresentationEntitiesInstructionStepTrackType
      , "travelTime" .= tflApiPresentationEntitiesInstructionStepTravelTime
      , "atcoCode" .= tflApiPresentationEntitiesInstructionStepAtcoCode
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesInstructionStep' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesInstructionStep
  :: TflApiPresentationEntitiesInstructionStep
mkTflApiPresentationEntitiesInstructionStep =
  TflApiPresentationEntitiesInstructionStep
  { tflApiPresentationEntitiesInstructionStepDescription = Nothing
  , tflApiPresentationEntitiesInstructionStepTurnDirection = Nothing
  , tflApiPresentationEntitiesInstructionStepStreetName = Nothing
  , tflApiPresentationEntitiesInstructionStepDistance = Nothing
  , tflApiPresentationEntitiesInstructionStepCumulativeDistance = Nothing
  , tflApiPresentationEntitiesInstructionStepSkyDirection = Nothing
  , tflApiPresentationEntitiesInstructionStepSkyDirectionDescription = Nothing
  , tflApiPresentationEntitiesInstructionStepCumulativeTravelTime = Nothing
  , tflApiPresentationEntitiesInstructionStepLatitude = Nothing
  , tflApiPresentationEntitiesInstructionStepLongitude = Nothing
  , tflApiPresentationEntitiesInstructionStepPathAttribute = Nothing
  , tflApiPresentationEntitiesInstructionStepDescriptionHeading = Nothing
  , tflApiPresentationEntitiesInstructionStepTrackType = Nothing
  , tflApiPresentationEntitiesInstructionStepTravelTime = Nothing
  , tflApiPresentationEntitiesInstructionStepAtcoCode = Nothing
  }

-- ** TflApiPresentationEntitiesInterval
-- | TflApiPresentationEntitiesInterval
data TflApiPresentationEntitiesInterval = TflApiPresentationEntitiesInterval
  { tflApiPresentationEntitiesIntervalStopId :: !(Maybe Text) -- ^ "stopId"
  , tflApiPresentationEntitiesIntervalTimeToArrival :: !(Maybe Double) -- ^ "timeToArrival"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesInterval
instance A.FromJSON TflApiPresentationEntitiesInterval where
  parseJSON = A.withObject "TflApiPresentationEntitiesInterval" $ \o ->
    TflApiPresentationEntitiesInterval
      <$> (o .:? "stopId")
      <*> (o .:? "timeToArrival")

-- | ToJSON TflApiPresentationEntitiesInterval
instance A.ToJSON TflApiPresentationEntitiesInterval where
  toJSON TflApiPresentationEntitiesInterval {..} =
   _omitNulls
      [ "stopId" .= tflApiPresentationEntitiesIntervalStopId
      , "timeToArrival" .= tflApiPresentationEntitiesIntervalTimeToArrival
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesInterval' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesInterval
  :: TflApiPresentationEntitiesInterval
mkTflApiPresentationEntitiesInterval =
  TflApiPresentationEntitiesInterval
  { tflApiPresentationEntitiesIntervalStopId = Nothing
  , tflApiPresentationEntitiesIntervalTimeToArrival = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerFare
-- | TflApiPresentationEntitiesJourneyPlannerFare
data TflApiPresentationEntitiesJourneyPlannerFare = TflApiPresentationEntitiesJourneyPlannerFare
  { tflApiPresentationEntitiesJourneyPlannerFareLowZone :: !(Maybe Int) -- ^ "lowZone"
  , tflApiPresentationEntitiesJourneyPlannerFareHighZone :: !(Maybe Int) -- ^ "highZone"
  , tflApiPresentationEntitiesJourneyPlannerFareCost :: !(Maybe Int) -- ^ "cost"
  , tflApiPresentationEntitiesJourneyPlannerFareChargeProfileName :: !(Maybe Text) -- ^ "chargeProfileName"
  , tflApiPresentationEntitiesJourneyPlannerFareIsHopperFare :: !(Maybe Bool) -- ^ "isHopperFare"
  , tflApiPresentationEntitiesJourneyPlannerFareChargeLevel :: !(Maybe Text) -- ^ "chargeLevel"
  , tflApiPresentationEntitiesJourneyPlannerFarePeak :: !(Maybe Int) -- ^ "peak"
  , tflApiPresentationEntitiesJourneyPlannerFareOffPeak :: !(Maybe Int) -- ^ "offPeak"
  , tflApiPresentationEntitiesJourneyPlannerFareTaps :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerFareTap]) -- ^ "taps"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerFare
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerFare where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerFare" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerFare
      <$> (o .:? "lowZone")
      <*> (o .:? "highZone")
      <*> (o .:? "cost")
      <*> (o .:? "chargeProfileName")
      <*> (o .:? "isHopperFare")
      <*> (o .:? "chargeLevel")
      <*> (o .:? "peak")
      <*> (o .:? "offPeak")
      <*> (o .:? "taps")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerFare
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerFare where
  toJSON TflApiPresentationEntitiesJourneyPlannerFare {..} =
   _omitNulls
      [ "lowZone" .= tflApiPresentationEntitiesJourneyPlannerFareLowZone
      , "highZone" .= tflApiPresentationEntitiesJourneyPlannerFareHighZone
      , "cost" .= tflApiPresentationEntitiesJourneyPlannerFareCost
      , "chargeProfileName" .= tflApiPresentationEntitiesJourneyPlannerFareChargeProfileName
      , "isHopperFare" .= tflApiPresentationEntitiesJourneyPlannerFareIsHopperFare
      , "chargeLevel" .= tflApiPresentationEntitiesJourneyPlannerFareChargeLevel
      , "peak" .= tflApiPresentationEntitiesJourneyPlannerFarePeak
      , "offPeak" .= tflApiPresentationEntitiesJourneyPlannerFareOffPeak
      , "taps" .= tflApiPresentationEntitiesJourneyPlannerFareTaps
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerFare' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerFare
  :: TflApiPresentationEntitiesJourneyPlannerFare
mkTflApiPresentationEntitiesJourneyPlannerFare =
  TflApiPresentationEntitiesJourneyPlannerFare
  { tflApiPresentationEntitiesJourneyPlannerFareLowZone = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareHighZone = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareCost = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareChargeProfileName = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareIsHopperFare = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareChargeLevel = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFarePeak = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareOffPeak = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTaps = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerFareCaveat
-- | TflApiPresentationEntitiesJourneyPlannerFareCaveat
data TflApiPresentationEntitiesJourneyPlannerFareCaveat = TflApiPresentationEntitiesJourneyPlannerFareCaveat
  { tflApiPresentationEntitiesJourneyPlannerFareCaveatText :: !(Maybe Text) -- ^ "text"
  , tflApiPresentationEntitiesJourneyPlannerFareCaveatType :: !(Maybe Text) -- ^ "type"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerFareCaveat
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerFareCaveat where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerFareCaveat" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerFareCaveat
      <$> (o .:? "text")
      <*> (o .:? "type")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerFareCaveat
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerFareCaveat where
  toJSON TflApiPresentationEntitiesJourneyPlannerFareCaveat {..} =
   _omitNulls
      [ "text" .= tflApiPresentationEntitiesJourneyPlannerFareCaveatText
      , "type" .= tflApiPresentationEntitiesJourneyPlannerFareCaveatType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerFareCaveat' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerFareCaveat
  :: TflApiPresentationEntitiesJourneyPlannerFareCaveat
mkTflApiPresentationEntitiesJourneyPlannerFareCaveat =
  TflApiPresentationEntitiesJourneyPlannerFareCaveat
  { tflApiPresentationEntitiesJourneyPlannerFareCaveatText = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareCaveatType = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerFareTap
-- | TflApiPresentationEntitiesJourneyPlannerFareTap
data TflApiPresentationEntitiesJourneyPlannerFareTap = TflApiPresentationEntitiesJourneyPlannerFareTap
  { tflApiPresentationEntitiesJourneyPlannerFareTapAtcoCode :: !(Maybe Text) -- ^ "atcoCode"
  , tflApiPresentationEntitiesJourneyPlannerFareTapTapDetails :: !(Maybe TflApiPresentationEntitiesJourneyPlannerFareTapDetails) -- ^ "tapDetails"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerFareTap
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerFareTap where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerFareTap" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerFareTap
      <$> (o .:? "atcoCode")
      <*> (o .:? "tapDetails")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerFareTap
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerFareTap where
  toJSON TflApiPresentationEntitiesJourneyPlannerFareTap {..} =
   _omitNulls
      [ "atcoCode" .= tflApiPresentationEntitiesJourneyPlannerFareTapAtcoCode
      , "tapDetails" .= tflApiPresentationEntitiesJourneyPlannerFareTapTapDetails
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerFareTap' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerFareTap
  :: TflApiPresentationEntitiesJourneyPlannerFareTap
mkTflApiPresentationEntitiesJourneyPlannerFareTap =
  TflApiPresentationEntitiesJourneyPlannerFareTap
  { tflApiPresentationEntitiesJourneyPlannerFareTapAtcoCode = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapTapDetails = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerFareTapDetails
-- | TflApiPresentationEntitiesJourneyPlannerFareTapDetails
data TflApiPresentationEntitiesJourneyPlannerFareTapDetails = TflApiPresentationEntitiesJourneyPlannerFareTapDetails
  { tflApiPresentationEntitiesJourneyPlannerFareTapDetailsModeType :: !(Maybe Text) -- ^ "modeType"
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsValidationType :: !(Maybe Text) -- ^ "validationType"
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsHostDeviceType :: !(Maybe Text) -- ^ "hostDeviceType"
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsBusRouteId :: !(Maybe Text) -- ^ "busRouteId"
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsNationalLocationCode :: !(Maybe Int) -- ^ "nationalLocationCode"
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsTapTimestamp :: !(Maybe DateTime) -- ^ "tapTimestamp"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerFareTapDetails
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerFareTapDetails where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerFareTapDetails" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerFareTapDetails
      <$> (o .:? "modeType")
      <*> (o .:? "validationType")
      <*> (o .:? "hostDeviceType")
      <*> (o .:? "busRouteId")
      <*> (o .:? "nationalLocationCode")
      <*> (o .:? "tapTimestamp")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerFareTapDetails
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerFareTapDetails where
  toJSON TflApiPresentationEntitiesJourneyPlannerFareTapDetails {..} =
   _omitNulls
      [ "modeType" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsModeType
      , "validationType" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsValidationType
      , "hostDeviceType" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsHostDeviceType
      , "busRouteId" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsBusRouteId
      , "nationalLocationCode" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsNationalLocationCode
      , "tapTimestamp" .= tflApiPresentationEntitiesJourneyPlannerFareTapDetailsTapTimestamp
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerFareTapDetails' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerFareTapDetails
  :: TflApiPresentationEntitiesJourneyPlannerFareTapDetails
mkTflApiPresentationEntitiesJourneyPlannerFareTapDetails =
  TflApiPresentationEntitiesJourneyPlannerFareTapDetails
  { tflApiPresentationEntitiesJourneyPlannerFareTapDetailsModeType = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsValidationType = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsHostDeviceType = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsBusRouteId = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsNationalLocationCode = Nothing
  , tflApiPresentationEntitiesJourneyPlannerFareTapDetailsTapTimestamp = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerItineraryResult
-- | TflApiPresentationEntitiesJourneyPlannerItineraryResult
-- A DTO representing a list of possible journeys.
data TflApiPresentationEntitiesJourneyPlannerItineraryResult = TflApiPresentationEntitiesJourneyPlannerItineraryResult
  { tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneys :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerJourney]) -- ^ "journeys"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultLines :: !(Maybe [TflApiPresentationEntitiesLine]) -- ^ "lines"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultCycleHireDockingStationData :: !(Maybe TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData) -- ^ "cycleHireDockingStationData"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultStopMessages :: !(Maybe [Text]) -- ^ "stopMessages"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultRecommendedMaxAgeMinutes :: !(Maybe Int) -- ^ "recommendedMaxAgeMinutes"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultSearchCriteria :: !(Maybe TflApiPresentationEntitiesJourneyPlannerSearchCriteria) -- ^ "searchCriteria"
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneyVector :: !(Maybe TflApiPresentationEntitiesJourneyPlannerJourneyVector) -- ^ "journeyVector"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerItineraryResult
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerItineraryResult where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerItineraryResult" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerItineraryResult
      <$> (o .:? "journeys")
      <*> (o .:? "lines")
      <*> (o .:? "cycleHireDockingStationData")
      <*> (o .:? "stopMessages")
      <*> (o .:? "recommendedMaxAgeMinutes")
      <*> (o .:? "searchCriteria")
      <*> (o .:? "journeyVector")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerItineraryResult
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerItineraryResult where
  toJSON TflApiPresentationEntitiesJourneyPlannerItineraryResult {..} =
   _omitNulls
      [ "journeys" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneys
      , "lines" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultLines
      , "cycleHireDockingStationData" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultCycleHireDockingStationData
      , "stopMessages" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultStopMessages
      , "recommendedMaxAgeMinutes" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultRecommendedMaxAgeMinutes
      , "searchCriteria" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultSearchCriteria
      , "journeyVector" .= tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneyVector
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerItineraryResult' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerItineraryResult
  :: TflApiPresentationEntitiesJourneyPlannerItineraryResult
mkTflApiPresentationEntitiesJourneyPlannerItineraryResult =
  TflApiPresentationEntitiesJourneyPlannerItineraryResult
  { tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneys = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultLines = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultCycleHireDockingStationData = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultStopMessages = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultRecommendedMaxAgeMinutes = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultSearchCriteria = Nothing
  , tflApiPresentationEntitiesJourneyPlannerItineraryResultJourneyVector = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerJourney
-- | TflApiPresentationEntitiesJourneyPlannerJourney
-- Object that represents an end to end journey (see schematic).
data TflApiPresentationEntitiesJourneyPlannerJourney = TflApiPresentationEntitiesJourneyPlannerJourney
  { tflApiPresentationEntitiesJourneyPlannerJourneyStartDateTime :: !(Maybe DateTime) -- ^ "startDateTime"
  , tflApiPresentationEntitiesJourneyPlannerJourneyDuration :: !(Maybe Int) -- ^ "duration"
  , tflApiPresentationEntitiesJourneyPlannerJourneyArrivalDateTime :: !(Maybe DateTime) -- ^ "arrivalDateTime"
  , tflApiPresentationEntitiesJourneyPlannerJourneyDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesJourneyPlannerJourneyAlternativeRoute :: !(Maybe Bool) -- ^ "alternativeRoute"
  , tflApiPresentationEntitiesJourneyPlannerJourneyLegs :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerLeg]) -- ^ "legs"
  , tflApiPresentationEntitiesJourneyPlannerJourneyFare :: !(Maybe TflApiPresentationEntitiesJourneyPlannerJourneyFare) -- ^ "fare"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerJourney
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerJourney where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerJourney" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerJourney
      <$> (o .:? "startDateTime")
      <*> (o .:? "duration")
      <*> (o .:? "arrivalDateTime")
      <*> (o .:? "description")
      <*> (o .:? "alternativeRoute")
      <*> (o .:? "legs")
      <*> (o .:? "fare")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerJourney
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerJourney where
  toJSON TflApiPresentationEntitiesJourneyPlannerJourney {..} =
   _omitNulls
      [ "startDateTime" .= tflApiPresentationEntitiesJourneyPlannerJourneyStartDateTime
      , "duration" .= tflApiPresentationEntitiesJourneyPlannerJourneyDuration
      , "arrivalDateTime" .= tflApiPresentationEntitiesJourneyPlannerJourneyArrivalDateTime
      , "description" .= tflApiPresentationEntitiesJourneyPlannerJourneyDescription
      , "alternativeRoute" .= tflApiPresentationEntitiesJourneyPlannerJourneyAlternativeRoute
      , "legs" .= tflApiPresentationEntitiesJourneyPlannerJourneyLegs
      , "fare" .= tflApiPresentationEntitiesJourneyPlannerJourneyFare
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerJourney' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerJourney
  :: TflApiPresentationEntitiesJourneyPlannerJourney
mkTflApiPresentationEntitiesJourneyPlannerJourney =
  TflApiPresentationEntitiesJourneyPlannerJourney
  { tflApiPresentationEntitiesJourneyPlannerJourneyStartDateTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyDuration = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyArrivalDateTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyDescription = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyAlternativeRoute = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyLegs = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyFare = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerJourneyFare
-- | TflApiPresentationEntitiesJourneyPlannerJourneyFare
data TflApiPresentationEntitiesJourneyPlannerJourneyFare = TflApiPresentationEntitiesJourneyPlannerJourneyFare
  { tflApiPresentationEntitiesJourneyPlannerJourneyFareTotalCost :: !(Maybe Int) -- ^ "totalCost"
  , tflApiPresentationEntitiesJourneyPlannerJourneyFareFares :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerFare]) -- ^ "fares"
  , tflApiPresentationEntitiesJourneyPlannerJourneyFareCaveats :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerFareCaveat]) -- ^ "caveats"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyFare
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyFare where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerJourneyFare" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerJourneyFare
      <$> (o .:? "totalCost")
      <*> (o .:? "fares")
      <*> (o .:? "caveats")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyFare
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyFare where
  toJSON TflApiPresentationEntitiesJourneyPlannerJourneyFare {..} =
   _omitNulls
      [ "totalCost" .= tflApiPresentationEntitiesJourneyPlannerJourneyFareTotalCost
      , "fares" .= tflApiPresentationEntitiesJourneyPlannerJourneyFareFares
      , "caveats" .= tflApiPresentationEntitiesJourneyPlannerJourneyFareCaveats
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerJourneyFare' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerJourneyFare
  :: TflApiPresentationEntitiesJourneyPlannerJourneyFare
mkTflApiPresentationEntitiesJourneyPlannerJourneyFare =
  TflApiPresentationEntitiesJourneyPlannerJourneyFare
  { tflApiPresentationEntitiesJourneyPlannerJourneyFareTotalCost = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyFareFares = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyFareCaveats = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
-- | TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
data TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData = TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
  { tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfBikes :: !(Maybe Int) -- ^ "originNumberOfBikes"
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfBikes :: !(Maybe Int) -- ^ "destinationNumberOfBikes"
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfEmptySlots :: !(Maybe Int) -- ^ "originNumberOfEmptySlots"
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfEmptySlots :: !(Maybe Int) -- ^ "destinationNumberOfEmptySlots"
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginId :: !(Maybe Text) -- ^ "originId"
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationId :: !(Maybe Text) -- ^ "destinationId"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
      <$> (o .:? "originNumberOfBikes")
      <*> (o .:? "destinationNumberOfBikes")
      <*> (o .:? "originNumberOfEmptySlots")
      <*> (o .:? "destinationNumberOfEmptySlots")
      <*> (o .:? "originId")
      <*> (o .:? "destinationId")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData where
  toJSON TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData {..} =
   _omitNulls
      [ "originNumberOfBikes" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfBikes
      , "destinationNumberOfBikes" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfBikes
      , "originNumberOfEmptySlots" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfEmptySlots
      , "destinationNumberOfEmptySlots" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfEmptySlots
      , "originId" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginId
      , "destinationId" .= tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationId
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
  :: TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
mkTflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData =
  TflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData
  { tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfBikes = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfBikes = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginNumberOfEmptySlots = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationNumberOfEmptySlots = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataOriginId = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationDataDestinationId = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerJourneyVector
-- | TflApiPresentationEntitiesJourneyPlannerJourneyVector
data TflApiPresentationEntitiesJourneyPlannerJourneyVector = TflApiPresentationEntitiesJourneyPlannerJourneyVector
  { tflApiPresentationEntitiesJourneyPlannerJourneyVectorFrom :: !(Maybe Text) -- ^ "from"
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorTo :: !(Maybe Text) -- ^ "to"
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorVia :: !(Maybe Text) -- ^ "via"
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorUri :: !(Maybe Text) -- ^ "uri"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyVector
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerJourneyVector where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerJourneyVector" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerJourneyVector
      <$> (o .:? "from")
      <*> (o .:? "to")
      <*> (o .:? "via")
      <*> (o .:? "uri")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyVector
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerJourneyVector where
  toJSON TflApiPresentationEntitiesJourneyPlannerJourneyVector {..} =
   _omitNulls
      [ "from" .= tflApiPresentationEntitiesJourneyPlannerJourneyVectorFrom
      , "to" .= tflApiPresentationEntitiesJourneyPlannerJourneyVectorTo
      , "via" .= tflApiPresentationEntitiesJourneyPlannerJourneyVectorVia
      , "uri" .= tflApiPresentationEntitiesJourneyPlannerJourneyVectorUri
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerJourneyVector' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerJourneyVector
  :: TflApiPresentationEntitiesJourneyPlannerJourneyVector
mkTflApiPresentationEntitiesJourneyPlannerJourneyVector =
  TflApiPresentationEntitiesJourneyPlannerJourneyVector
  { tflApiPresentationEntitiesJourneyPlannerJourneyVectorFrom = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorTo = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorVia = Nothing
  , tflApiPresentationEntitiesJourneyPlannerJourneyVectorUri = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerLeg
-- | TflApiPresentationEntitiesJourneyPlannerLeg
data TflApiPresentationEntitiesJourneyPlannerLeg = TflApiPresentationEntitiesJourneyPlannerLeg
  { tflApiPresentationEntitiesJourneyPlannerLegDuration :: !(Maybe Int) -- ^ "duration"
  , tflApiPresentationEntitiesJourneyPlannerLegSpeed :: !(Maybe Text) -- ^ "speed"
  , tflApiPresentationEntitiesJourneyPlannerLegInstruction :: !(Maybe TflApiPresentationEntitiesInstruction) -- ^ "instruction" - Describes the action the user need to take for this section, E.g. \&quot;walk to the              district line\&quot;
  , tflApiPresentationEntitiesJourneyPlannerLegObstacles :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerObstacle]) -- ^ "obstacles"
  , tflApiPresentationEntitiesJourneyPlannerLegDepartureTime :: !(Maybe DateTime) -- ^ "departureTime"
  , tflApiPresentationEntitiesJourneyPlannerLegArrivalTime :: !(Maybe DateTime) -- ^ "arrivalTime"
  , tflApiPresentationEntitiesJourneyPlannerLegDeparturePoint :: !(Maybe TflApiPresentationEntitiesPoint) -- ^ "departurePoint"
  , tflApiPresentationEntitiesJourneyPlannerLegArrivalPoint :: !(Maybe TflApiPresentationEntitiesPoint) -- ^ "arrivalPoint"
  , tflApiPresentationEntitiesJourneyPlannerLegPath :: !(Maybe TflApiPresentationEntitiesJourneyPlannerPath) -- ^ "path"
  , tflApiPresentationEntitiesJourneyPlannerLegRouteOptions :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerRouteOption]) -- ^ "routeOptions"
  , tflApiPresentationEntitiesJourneyPlannerLegMode :: !(Maybe TflApiPresentationEntitiesIdentifier) -- ^ "mode"
  , tflApiPresentationEntitiesJourneyPlannerLegDisruptions :: !(Maybe [TflApiPresentationEntitiesDisruption]) -- ^ "disruptions"
  , tflApiPresentationEntitiesJourneyPlannerLegPlannedWorks :: !(Maybe [TflApiPresentationEntitiesJourneyPlannerPlannedWork]) -- ^ "plannedWorks"
  , tflApiPresentationEntitiesJourneyPlannerLegDistance :: !(Maybe Double) -- ^ "distance"
  , tflApiPresentationEntitiesJourneyPlannerLegIsDisrupted :: !(Maybe Bool) -- ^ "isDisrupted"
  , tflApiPresentationEntitiesJourneyPlannerLegHasFixedLocations :: !(Maybe Bool) -- ^ "hasFixedLocations"
  , tflApiPresentationEntitiesJourneyPlannerLegScheduledDepartureTime :: !(Maybe DateTime) -- ^ "scheduledDepartureTime"
  , tflApiPresentationEntitiesJourneyPlannerLegScheduledArrivalTime :: !(Maybe DateTime) -- ^ "scheduledArrivalTime"
  , tflApiPresentationEntitiesJourneyPlannerLegInterChangeDuration :: !(Maybe Text) -- ^ "interChangeDuration"
  , tflApiPresentationEntitiesJourneyPlannerLegInterChangePosition :: !(Maybe Text) -- ^ "interChangePosition"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerLeg
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerLeg where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerLeg" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerLeg
      <$> (o .:? "duration")
      <*> (o .:? "speed")
      <*> (o .:? "instruction")
      <*> (o .:? "obstacles")
      <*> (o .:? "departureTime")
      <*> (o .:? "arrivalTime")
      <*> (o .:? "departurePoint")
      <*> (o .:? "arrivalPoint")
      <*> (o .:? "path")
      <*> (o .:? "routeOptions")
      <*> (o .:? "mode")
      <*> (o .:? "disruptions")
      <*> (o .:? "plannedWorks")
      <*> (o .:? "distance")
      <*> (o .:? "isDisrupted")
      <*> (o .:? "hasFixedLocations")
      <*> (o .:? "scheduledDepartureTime")
      <*> (o .:? "scheduledArrivalTime")
      <*> (o .:? "interChangeDuration")
      <*> (o .:? "interChangePosition")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerLeg
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerLeg where
  toJSON TflApiPresentationEntitiesJourneyPlannerLeg {..} =
   _omitNulls
      [ "duration" .= tflApiPresentationEntitiesJourneyPlannerLegDuration
      , "speed" .= tflApiPresentationEntitiesJourneyPlannerLegSpeed
      , "instruction" .= tflApiPresentationEntitiesJourneyPlannerLegInstruction
      , "obstacles" .= tflApiPresentationEntitiesJourneyPlannerLegObstacles
      , "departureTime" .= tflApiPresentationEntitiesJourneyPlannerLegDepartureTime
      , "arrivalTime" .= tflApiPresentationEntitiesJourneyPlannerLegArrivalTime
      , "departurePoint" .= tflApiPresentationEntitiesJourneyPlannerLegDeparturePoint
      , "arrivalPoint" .= tflApiPresentationEntitiesJourneyPlannerLegArrivalPoint
      , "path" .= tflApiPresentationEntitiesJourneyPlannerLegPath
      , "routeOptions" .= tflApiPresentationEntitiesJourneyPlannerLegRouteOptions
      , "mode" .= tflApiPresentationEntitiesJourneyPlannerLegMode
      , "disruptions" .= tflApiPresentationEntitiesJourneyPlannerLegDisruptions
      , "plannedWorks" .= tflApiPresentationEntitiesJourneyPlannerLegPlannedWorks
      , "distance" .= tflApiPresentationEntitiesJourneyPlannerLegDistance
      , "isDisrupted" .= tflApiPresentationEntitiesJourneyPlannerLegIsDisrupted
      , "hasFixedLocations" .= tflApiPresentationEntitiesJourneyPlannerLegHasFixedLocations
      , "scheduledDepartureTime" .= tflApiPresentationEntitiesJourneyPlannerLegScheduledDepartureTime
      , "scheduledArrivalTime" .= tflApiPresentationEntitiesJourneyPlannerLegScheduledArrivalTime
      , "interChangeDuration" .= tflApiPresentationEntitiesJourneyPlannerLegInterChangeDuration
      , "interChangePosition" .= tflApiPresentationEntitiesJourneyPlannerLegInterChangePosition
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerLeg' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerLeg
  :: TflApiPresentationEntitiesJourneyPlannerLeg
mkTflApiPresentationEntitiesJourneyPlannerLeg =
  TflApiPresentationEntitiesJourneyPlannerLeg
  { tflApiPresentationEntitiesJourneyPlannerLegDuration = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegSpeed = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegInstruction = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegObstacles = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegDepartureTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegArrivalTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegDeparturePoint = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegArrivalPoint = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegPath = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegRouteOptions = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegMode = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegDisruptions = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegPlannedWorks = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegDistance = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegIsDisrupted = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegHasFixedLocations = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegScheduledDepartureTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegScheduledArrivalTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegInterChangeDuration = Nothing
  , tflApiPresentationEntitiesJourneyPlannerLegInterChangePosition = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerObstacle
-- | TflApiPresentationEntitiesJourneyPlannerObstacle
data TflApiPresentationEntitiesJourneyPlannerObstacle = TflApiPresentationEntitiesJourneyPlannerObstacle
  { tflApiPresentationEntitiesJourneyPlannerObstacleType :: !(Maybe Text) -- ^ "type"
  , tflApiPresentationEntitiesJourneyPlannerObstacleIncline :: !(Maybe Text) -- ^ "incline"
  , tflApiPresentationEntitiesJourneyPlannerObstacleStopId :: !(Maybe Int) -- ^ "stopId"
  , tflApiPresentationEntitiesJourneyPlannerObstaclePosition :: !(Maybe Text) -- ^ "position"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerObstacle
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerObstacle where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerObstacle" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerObstacle
      <$> (o .:? "type")
      <*> (o .:? "incline")
      <*> (o .:? "stopId")
      <*> (o .:? "position")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerObstacle
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerObstacle where
  toJSON TflApiPresentationEntitiesJourneyPlannerObstacle {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesJourneyPlannerObstacleType
      , "incline" .= tflApiPresentationEntitiesJourneyPlannerObstacleIncline
      , "stopId" .= tflApiPresentationEntitiesJourneyPlannerObstacleStopId
      , "position" .= tflApiPresentationEntitiesJourneyPlannerObstaclePosition
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerObstacle' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerObstacle
  :: TflApiPresentationEntitiesJourneyPlannerObstacle
mkTflApiPresentationEntitiesJourneyPlannerObstacle =
  TflApiPresentationEntitiesJourneyPlannerObstacle
  { tflApiPresentationEntitiesJourneyPlannerObstacleType = Nothing
  , tflApiPresentationEntitiesJourneyPlannerObstacleIncline = Nothing
  , tflApiPresentationEntitiesJourneyPlannerObstacleStopId = Nothing
  , tflApiPresentationEntitiesJourneyPlannerObstaclePosition = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerPath
-- | TflApiPresentationEntitiesJourneyPlannerPath
data TflApiPresentationEntitiesJourneyPlannerPath = TflApiPresentationEntitiesJourneyPlannerPath
  { tflApiPresentationEntitiesJourneyPlannerPathLineString :: !(Maybe Text) -- ^ "lineString"
  , tflApiPresentationEntitiesJourneyPlannerPathStopPoints :: !(Maybe [TflApiPresentationEntitiesIdentifier]) -- ^ "stopPoints"
  , tflApiPresentationEntitiesJourneyPlannerPathElevation :: !(Maybe [TflApiCommonJourneyPlannerJpElevation]) -- ^ "elevation"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerPath
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerPath where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerPath" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerPath
      <$> (o .:? "lineString")
      <*> (o .:? "stopPoints")
      <*> (o .:? "elevation")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerPath
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerPath where
  toJSON TflApiPresentationEntitiesJourneyPlannerPath {..} =
   _omitNulls
      [ "lineString" .= tflApiPresentationEntitiesJourneyPlannerPathLineString
      , "stopPoints" .= tflApiPresentationEntitiesJourneyPlannerPathStopPoints
      , "elevation" .= tflApiPresentationEntitiesJourneyPlannerPathElevation
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerPath' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerPath
  :: TflApiPresentationEntitiesJourneyPlannerPath
mkTflApiPresentationEntitiesJourneyPlannerPath =
  TflApiPresentationEntitiesJourneyPlannerPath
  { tflApiPresentationEntitiesJourneyPlannerPathLineString = Nothing
  , tflApiPresentationEntitiesJourneyPlannerPathStopPoints = Nothing
  , tflApiPresentationEntitiesJourneyPlannerPathElevation = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerPlannedWork
-- | TflApiPresentationEntitiesJourneyPlannerPlannedWork
data TflApiPresentationEntitiesJourneyPlannerPlannedWork = TflApiPresentationEntitiesJourneyPlannerPlannedWork
  { tflApiPresentationEntitiesJourneyPlannerPlannedWorkId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkCreatedDateTime :: !(Maybe DateTime) -- ^ "createdDateTime"
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkLastUpdateDateTime :: !(Maybe DateTime) -- ^ "lastUpdateDateTime"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerPlannedWork
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerPlannedWork where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerPlannedWork" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerPlannedWork
      <$> (o .:? "id")
      <*> (o .:? "description")
      <*> (o .:? "createdDateTime")
      <*> (o .:? "lastUpdateDateTime")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerPlannedWork
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerPlannedWork where
  toJSON TflApiPresentationEntitiesJourneyPlannerPlannedWork {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesJourneyPlannerPlannedWorkId
      , "description" .= tflApiPresentationEntitiesJourneyPlannerPlannedWorkDescription
      , "createdDateTime" .= tflApiPresentationEntitiesJourneyPlannerPlannedWorkCreatedDateTime
      , "lastUpdateDateTime" .= tflApiPresentationEntitiesJourneyPlannerPlannedWorkLastUpdateDateTime
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerPlannedWork' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerPlannedWork
  :: TflApiPresentationEntitiesJourneyPlannerPlannedWork
mkTflApiPresentationEntitiesJourneyPlannerPlannedWork =
  TflApiPresentationEntitiesJourneyPlannerPlannedWork
  { tflApiPresentationEntitiesJourneyPlannerPlannedWorkId = Nothing
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkDescription = Nothing
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkCreatedDateTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerPlannedWorkLastUpdateDateTime = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerRouteOption
-- | TflApiPresentationEntitiesJourneyPlannerRouteOption
data TflApiPresentationEntitiesJourneyPlannerRouteOption = TflApiPresentationEntitiesJourneyPlannerRouteOption
  { tflApiPresentationEntitiesJourneyPlannerRouteOptionId :: !(Maybe Text) -- ^ "id" - The Id of the route
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionName :: !(Maybe Text) -- ^ "name" - Name such as \&quot;72\&quot;
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionDirections :: !(Maybe [Text]) -- ^ "directions"
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionLineIdentifier :: !(Maybe TflApiPresentationEntitiesIdentifier) -- ^ "lineIdentifier" - The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \&quot;good service\&quot;.
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionDirection :: !(Maybe Text) -- ^ "direction" - The direction of the route, i.e. outbound or inbound.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerRouteOption
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerRouteOption where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerRouteOption" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerRouteOption
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "directions")
      <*> (o .:? "lineIdentifier")
      <*> (o .:? "direction")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerRouteOption
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerRouteOption where
  toJSON TflApiPresentationEntitiesJourneyPlannerRouteOption {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesJourneyPlannerRouteOptionId
      , "name" .= tflApiPresentationEntitiesJourneyPlannerRouteOptionName
      , "directions" .= tflApiPresentationEntitiesJourneyPlannerRouteOptionDirections
      , "lineIdentifier" .= tflApiPresentationEntitiesJourneyPlannerRouteOptionLineIdentifier
      , "direction" .= tflApiPresentationEntitiesJourneyPlannerRouteOptionDirection
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerRouteOption' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerRouteOption
  :: TflApiPresentationEntitiesJourneyPlannerRouteOption
mkTflApiPresentationEntitiesJourneyPlannerRouteOption =
  TflApiPresentationEntitiesJourneyPlannerRouteOption
  { tflApiPresentationEntitiesJourneyPlannerRouteOptionId = Nothing
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionName = Nothing
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionDirections = Nothing
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionLineIdentifier = Nothing
  , tflApiPresentationEntitiesJourneyPlannerRouteOptionDirection = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerSearchCriteria
-- | TflApiPresentationEntitiesJourneyPlannerSearchCriteria
data TflApiPresentationEntitiesJourneyPlannerSearchCriteria = TflApiPresentationEntitiesJourneyPlannerSearchCriteria
  { tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTime :: !(Maybe DateTime) -- ^ "dateTime"
  , tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType :: !(Maybe E'DateTimeType) -- ^ "dateTimeType"
  , tflApiPresentationEntitiesJourneyPlannerSearchCriteriaTimeAdjustments :: !(Maybe TflApiPresentationEntitiesJourneyPlannerTimeAdjustments) -- ^ "timeAdjustments"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerSearchCriteria
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerSearchCriteria where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerSearchCriteria" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerSearchCriteria
      <$> (o .:? "dateTime")
      <*> (o .:? "dateTimeType")
      <*> (o .:? "timeAdjustments")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerSearchCriteria
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerSearchCriteria where
  toJSON TflApiPresentationEntitiesJourneyPlannerSearchCriteria {..} =
   _omitNulls
      [ "dateTime" .= tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTime
      , "dateTimeType" .= tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType
      , "timeAdjustments" .= tflApiPresentationEntitiesJourneyPlannerSearchCriteriaTimeAdjustments
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerSearchCriteria' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerSearchCriteria
  :: TflApiPresentationEntitiesJourneyPlannerSearchCriteria
mkTflApiPresentationEntitiesJourneyPlannerSearchCriteria =
  TflApiPresentationEntitiesJourneyPlannerSearchCriteria
  { tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerSearchCriteriaDateTimeType = Nothing
  , tflApiPresentationEntitiesJourneyPlannerSearchCriteriaTimeAdjustments = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
-- | TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
data TflApiPresentationEntitiesJourneyPlannerTimeAdjustment = TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
  { tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentDate :: !(Maybe Text) -- ^ "date"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTime :: !(Maybe Text) -- ^ "time"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTimeIs :: !(Maybe Text) -- ^ "timeIs"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentUri :: !(Maybe Text) -- ^ "uri"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustment where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerTimeAdjustment" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
      <$> (o .:? "date")
      <*> (o .:? "time")
      <*> (o .:? "timeIs")
      <*> (o .:? "uri")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustment where
  toJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustment {..} =
   _omitNulls
      [ "date" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentDate
      , "time" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTime
      , "timeIs" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTimeIs
      , "uri" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentUri
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerTimeAdjustment' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerTimeAdjustment
  :: TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
mkTflApiPresentationEntitiesJourneyPlannerTimeAdjustment =
  TflApiPresentationEntitiesJourneyPlannerTimeAdjustment
  { tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentDate = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTime = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentTimeIs = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentUri = Nothing
  }

-- ** TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
-- | TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
data TflApiPresentationEntitiesJourneyPlannerTimeAdjustments = TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
  { tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarliest :: !(Maybe TflApiPresentationEntitiesJourneyPlannerTimeAdjustment) -- ^ "earliest"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarlier :: !(Maybe TflApiPresentationEntitiesJourneyPlannerTimeAdjustment) -- ^ "earlier"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLater :: !(Maybe TflApiPresentationEntitiesJourneyPlannerTimeAdjustment) -- ^ "later"
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLatest :: !(Maybe TflApiPresentationEntitiesJourneyPlannerTimeAdjustment) -- ^ "latest"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
instance A.FromJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustments where
  parseJSON = A.withObject "TflApiPresentationEntitiesJourneyPlannerTimeAdjustments" $ \o ->
    TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
      <$> (o .:? "earliest")
      <*> (o .:? "earlier")
      <*> (o .:? "later")
      <*> (o .:? "latest")

-- | ToJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
instance A.ToJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustments where
  toJSON TflApiPresentationEntitiesJourneyPlannerTimeAdjustments {..} =
   _omitNulls
      [ "earliest" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarliest
      , "earlier" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarlier
      , "later" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLater
      , "latest" .= tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLatest
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesJourneyPlannerTimeAdjustments' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesJourneyPlannerTimeAdjustments
  :: TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
mkTflApiPresentationEntitiesJourneyPlannerTimeAdjustments =
  TflApiPresentationEntitiesJourneyPlannerTimeAdjustments
  { tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarliest = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsEarlier = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLater = Nothing
  , tflApiPresentationEntitiesJourneyPlannerTimeAdjustmentsLatest = Nothing
  }

-- ** TflApiPresentationEntitiesKnownJourney
-- | TflApiPresentationEntitiesKnownJourney
data TflApiPresentationEntitiesKnownJourney = TflApiPresentationEntitiesKnownJourney
  { tflApiPresentationEntitiesKnownJourneyHour :: !(Maybe Text) -- ^ "hour"
  , tflApiPresentationEntitiesKnownJourneyMinute :: !(Maybe Text) -- ^ "minute"
  , tflApiPresentationEntitiesKnownJourneyIntervalId :: !(Maybe Int) -- ^ "intervalId"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesKnownJourney
instance A.FromJSON TflApiPresentationEntitiesKnownJourney where
  parseJSON = A.withObject "TflApiPresentationEntitiesKnownJourney" $ \o ->
    TflApiPresentationEntitiesKnownJourney
      <$> (o .:? "hour")
      <*> (o .:? "minute")
      <*> (o .:? "intervalId")

-- | ToJSON TflApiPresentationEntitiesKnownJourney
instance A.ToJSON TflApiPresentationEntitiesKnownJourney where
  toJSON TflApiPresentationEntitiesKnownJourney {..} =
   _omitNulls
      [ "hour" .= tflApiPresentationEntitiesKnownJourneyHour
      , "minute" .= tflApiPresentationEntitiesKnownJourneyMinute
      , "intervalId" .= tflApiPresentationEntitiesKnownJourneyIntervalId
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesKnownJourney' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesKnownJourney
  :: TflApiPresentationEntitiesKnownJourney
mkTflApiPresentationEntitiesKnownJourney =
  TflApiPresentationEntitiesKnownJourney
  { tflApiPresentationEntitiesKnownJourneyHour = Nothing
  , tflApiPresentationEntitiesKnownJourneyMinute = Nothing
  , tflApiPresentationEntitiesKnownJourneyIntervalId = Nothing
  }

-- ** TflApiPresentationEntitiesLine
-- | TflApiPresentationEntitiesLine
data TflApiPresentationEntitiesLine = TflApiPresentationEntitiesLine
  { tflApiPresentationEntitiesLineId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesLineName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesLineModeName :: !(Maybe Text) -- ^ "modeName"
  , tflApiPresentationEntitiesLineDisruptions :: !(Maybe [TflApiPresentationEntitiesDisruption]) -- ^ "disruptions"
  , tflApiPresentationEntitiesLineCreated :: !(Maybe DateTime) -- ^ "created"
  , tflApiPresentationEntitiesLineModified :: !(Maybe DateTime) -- ^ "modified"
  , tflApiPresentationEntitiesLineLineStatuses :: !(Maybe [TflApiPresentationEntitiesLineStatus]) -- ^ "lineStatuses"
  , tflApiPresentationEntitiesLineRouteSections :: !(Maybe [TflApiPresentationEntitiesMatchedRoute]) -- ^ "routeSections"
  , tflApiPresentationEntitiesLineServiceTypes :: !(Maybe [TflApiPresentationEntitiesLineServiceTypeInfo]) -- ^ "serviceTypes"
  , tflApiPresentationEntitiesLineCrowding :: !(Maybe TflApiPresentationEntitiesCrowding) -- ^ "crowding"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLine
instance A.FromJSON TflApiPresentationEntitiesLine where
  parseJSON = A.withObject "TflApiPresentationEntitiesLine" $ \o ->
    TflApiPresentationEntitiesLine
      <$> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "modeName")
      <*> (o .:? "disruptions")
      <*> (o .:? "created")
      <*> (o .:? "modified")
      <*> (o .:? "lineStatuses")
      <*> (o .:? "routeSections")
      <*> (o .:? "serviceTypes")
      <*> (o .:? "crowding")

-- | ToJSON TflApiPresentationEntitiesLine
instance A.ToJSON TflApiPresentationEntitiesLine where
  toJSON TflApiPresentationEntitiesLine {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesLineId
      , "name" .= tflApiPresentationEntitiesLineName
      , "modeName" .= tflApiPresentationEntitiesLineModeName
      , "disruptions" .= tflApiPresentationEntitiesLineDisruptions
      , "created" .= tflApiPresentationEntitiesLineCreated
      , "modified" .= tflApiPresentationEntitiesLineModified
      , "lineStatuses" .= tflApiPresentationEntitiesLineLineStatuses
      , "routeSections" .= tflApiPresentationEntitiesLineRouteSections
      , "serviceTypes" .= tflApiPresentationEntitiesLineServiceTypes
      , "crowding" .= tflApiPresentationEntitiesLineCrowding
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLine' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLine
  :: TflApiPresentationEntitiesLine
mkTflApiPresentationEntitiesLine =
  TflApiPresentationEntitiesLine
  { tflApiPresentationEntitiesLineId = Nothing
  , tflApiPresentationEntitiesLineName = Nothing
  , tflApiPresentationEntitiesLineModeName = Nothing
  , tflApiPresentationEntitiesLineDisruptions = Nothing
  , tflApiPresentationEntitiesLineCreated = Nothing
  , tflApiPresentationEntitiesLineModified = Nothing
  , tflApiPresentationEntitiesLineLineStatuses = Nothing
  , tflApiPresentationEntitiesLineRouteSections = Nothing
  , tflApiPresentationEntitiesLineServiceTypes = Nothing
  , tflApiPresentationEntitiesLineCrowding = Nothing
  }

-- ** TflApiPresentationEntitiesLineGroup
-- | TflApiPresentationEntitiesLineGroup
data TflApiPresentationEntitiesLineGroup = TflApiPresentationEntitiesLineGroup
  { tflApiPresentationEntitiesLineGroupNaptanIdReference :: !(Maybe Text) -- ^ "naptanIdReference"
  , tflApiPresentationEntitiesLineGroupStationAtcoCode :: !(Maybe Text) -- ^ "stationAtcoCode"
  , tflApiPresentationEntitiesLineGroupLineIdentifier :: !(Maybe [Text]) -- ^ "lineIdentifier"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineGroup
instance A.FromJSON TflApiPresentationEntitiesLineGroup where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineGroup" $ \o ->
    TflApiPresentationEntitiesLineGroup
      <$> (o .:? "naptanIdReference")
      <*> (o .:? "stationAtcoCode")
      <*> (o .:? "lineIdentifier")

-- | ToJSON TflApiPresentationEntitiesLineGroup
instance A.ToJSON TflApiPresentationEntitiesLineGroup where
  toJSON TflApiPresentationEntitiesLineGroup {..} =
   _omitNulls
      [ "naptanIdReference" .= tflApiPresentationEntitiesLineGroupNaptanIdReference
      , "stationAtcoCode" .= tflApiPresentationEntitiesLineGroupStationAtcoCode
      , "lineIdentifier" .= tflApiPresentationEntitiesLineGroupLineIdentifier
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineGroup' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineGroup
  :: TflApiPresentationEntitiesLineGroup
mkTflApiPresentationEntitiesLineGroup =
  TflApiPresentationEntitiesLineGroup
  { tflApiPresentationEntitiesLineGroupNaptanIdReference = Nothing
  , tflApiPresentationEntitiesLineGroupStationAtcoCode = Nothing
  , tflApiPresentationEntitiesLineGroupLineIdentifier = Nothing
  }

-- ** TflApiPresentationEntitiesLineModeGroup
-- | TflApiPresentationEntitiesLineModeGroup
data TflApiPresentationEntitiesLineModeGroup = TflApiPresentationEntitiesLineModeGroup
  { tflApiPresentationEntitiesLineModeGroupModeName :: !(Maybe Text) -- ^ "modeName"
  , tflApiPresentationEntitiesLineModeGroupLineIdentifier :: !(Maybe [Text]) -- ^ "lineIdentifier"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineModeGroup
instance A.FromJSON TflApiPresentationEntitiesLineModeGroup where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineModeGroup" $ \o ->
    TflApiPresentationEntitiesLineModeGroup
      <$> (o .:? "modeName")
      <*> (o .:? "lineIdentifier")

-- | ToJSON TflApiPresentationEntitiesLineModeGroup
instance A.ToJSON TflApiPresentationEntitiesLineModeGroup where
  toJSON TflApiPresentationEntitiesLineModeGroup {..} =
   _omitNulls
      [ "modeName" .= tflApiPresentationEntitiesLineModeGroupModeName
      , "lineIdentifier" .= tflApiPresentationEntitiesLineModeGroupLineIdentifier
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineModeGroup' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineModeGroup
  :: TflApiPresentationEntitiesLineModeGroup
mkTflApiPresentationEntitiesLineModeGroup =
  TflApiPresentationEntitiesLineModeGroup
  { tflApiPresentationEntitiesLineModeGroupModeName = Nothing
  , tflApiPresentationEntitiesLineModeGroupLineIdentifier = Nothing
  }

-- ** TflApiPresentationEntitiesLineRouteSection
-- | TflApiPresentationEntitiesLineRouteSection
data TflApiPresentationEntitiesLineRouteSection = TflApiPresentationEntitiesLineRouteSection
  { tflApiPresentationEntitiesLineRouteSectionRouteId :: !(Maybe Int) -- ^ "routeId"
  , tflApiPresentationEntitiesLineRouteSectionDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesLineRouteSectionDestination :: !(Maybe Text) -- ^ "destination"
  , tflApiPresentationEntitiesLineRouteSectionFromStation :: !(Maybe Text) -- ^ "fromStation"
  , tflApiPresentationEntitiesLineRouteSectionToStation :: !(Maybe Text) -- ^ "toStation"
  , tflApiPresentationEntitiesLineRouteSectionServiceType :: !(Maybe Text) -- ^ "serviceType"
  , tflApiPresentationEntitiesLineRouteSectionVehicleDestinationText :: !(Maybe Text) -- ^ "vehicleDestinationText"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineRouteSection
instance A.FromJSON TflApiPresentationEntitiesLineRouteSection where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineRouteSection" $ \o ->
    TflApiPresentationEntitiesLineRouteSection
      <$> (o .:? "routeId")
      <*> (o .:? "direction")
      <*> (o .:? "destination")
      <*> (o .:? "fromStation")
      <*> (o .:? "toStation")
      <*> (o .:? "serviceType")
      <*> (o .:? "vehicleDestinationText")

-- | ToJSON TflApiPresentationEntitiesLineRouteSection
instance A.ToJSON TflApiPresentationEntitiesLineRouteSection where
  toJSON TflApiPresentationEntitiesLineRouteSection {..} =
   _omitNulls
      [ "routeId" .= tflApiPresentationEntitiesLineRouteSectionRouteId
      , "direction" .= tflApiPresentationEntitiesLineRouteSectionDirection
      , "destination" .= tflApiPresentationEntitiesLineRouteSectionDestination
      , "fromStation" .= tflApiPresentationEntitiesLineRouteSectionFromStation
      , "toStation" .= tflApiPresentationEntitiesLineRouteSectionToStation
      , "serviceType" .= tflApiPresentationEntitiesLineRouteSectionServiceType
      , "vehicleDestinationText" .= tflApiPresentationEntitiesLineRouteSectionVehicleDestinationText
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineRouteSection' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineRouteSection
  :: TflApiPresentationEntitiesLineRouteSection
mkTflApiPresentationEntitiesLineRouteSection =
  TflApiPresentationEntitiesLineRouteSection
  { tflApiPresentationEntitiesLineRouteSectionRouteId = Nothing
  , tflApiPresentationEntitiesLineRouteSectionDirection = Nothing
  , tflApiPresentationEntitiesLineRouteSectionDestination = Nothing
  , tflApiPresentationEntitiesLineRouteSectionFromStation = Nothing
  , tflApiPresentationEntitiesLineRouteSectionToStation = Nothing
  , tflApiPresentationEntitiesLineRouteSectionServiceType = Nothing
  , tflApiPresentationEntitiesLineRouteSectionVehicleDestinationText = Nothing
  }

-- ** TflApiPresentationEntitiesLineServiceType
-- | TflApiPresentationEntitiesLineServiceType
data TflApiPresentationEntitiesLineServiceType = TflApiPresentationEntitiesLineServiceType
  { tflApiPresentationEntitiesLineServiceTypeLineName :: !(Maybe Text) -- ^ "lineName"
  , tflApiPresentationEntitiesLineServiceTypeLineSpecificServiceTypes :: !(Maybe [TflApiPresentationEntitiesLineSpecificServiceType]) -- ^ "lineSpecificServiceTypes"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineServiceType
instance A.FromJSON TflApiPresentationEntitiesLineServiceType where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineServiceType" $ \o ->
    TflApiPresentationEntitiesLineServiceType
      <$> (o .:? "lineName")
      <*> (o .:? "lineSpecificServiceTypes")

-- | ToJSON TflApiPresentationEntitiesLineServiceType
instance A.ToJSON TflApiPresentationEntitiesLineServiceType where
  toJSON TflApiPresentationEntitiesLineServiceType {..} =
   _omitNulls
      [ "lineName" .= tflApiPresentationEntitiesLineServiceTypeLineName
      , "lineSpecificServiceTypes" .= tflApiPresentationEntitiesLineServiceTypeLineSpecificServiceTypes
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineServiceType' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineServiceType
  :: TflApiPresentationEntitiesLineServiceType
mkTflApiPresentationEntitiesLineServiceType =
  TflApiPresentationEntitiesLineServiceType
  { tflApiPresentationEntitiesLineServiceTypeLineName = Nothing
  , tflApiPresentationEntitiesLineServiceTypeLineSpecificServiceTypes = Nothing
  }

-- ** TflApiPresentationEntitiesLineServiceTypeInfo
-- | TflApiPresentationEntitiesLineServiceTypeInfo
data TflApiPresentationEntitiesLineServiceTypeInfo = TflApiPresentationEntitiesLineServiceTypeInfo
  { tflApiPresentationEntitiesLineServiceTypeInfoName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesLineServiceTypeInfoUri :: !(Maybe Text) -- ^ "uri"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineServiceTypeInfo
instance A.FromJSON TflApiPresentationEntitiesLineServiceTypeInfo where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineServiceTypeInfo" $ \o ->
    TflApiPresentationEntitiesLineServiceTypeInfo
      <$> (o .:? "name")
      <*> (o .:? "uri")

-- | ToJSON TflApiPresentationEntitiesLineServiceTypeInfo
instance A.ToJSON TflApiPresentationEntitiesLineServiceTypeInfo where
  toJSON TflApiPresentationEntitiesLineServiceTypeInfo {..} =
   _omitNulls
      [ "name" .= tflApiPresentationEntitiesLineServiceTypeInfoName
      , "uri" .= tflApiPresentationEntitiesLineServiceTypeInfoUri
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineServiceTypeInfo' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineServiceTypeInfo
  :: TflApiPresentationEntitiesLineServiceTypeInfo
mkTflApiPresentationEntitiesLineServiceTypeInfo =
  TflApiPresentationEntitiesLineServiceTypeInfo
  { tflApiPresentationEntitiesLineServiceTypeInfoName = Nothing
  , tflApiPresentationEntitiesLineServiceTypeInfoUri = Nothing
  }

-- ** TflApiPresentationEntitiesLineSpecificServiceType
-- | TflApiPresentationEntitiesLineSpecificServiceType
data TflApiPresentationEntitiesLineSpecificServiceType = TflApiPresentationEntitiesLineSpecificServiceType
  { tflApiPresentationEntitiesLineSpecificServiceTypeServiceType :: !(Maybe TflApiPresentationEntitiesLineServiceTypeInfo) -- ^ "serviceType"
  , tflApiPresentationEntitiesLineSpecificServiceTypeStopServesServiceType :: !(Maybe Bool) -- ^ "stopServesServiceType"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineSpecificServiceType
instance A.FromJSON TflApiPresentationEntitiesLineSpecificServiceType where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineSpecificServiceType" $ \o ->
    TflApiPresentationEntitiesLineSpecificServiceType
      <$> (o .:? "serviceType")
      <*> (o .:? "stopServesServiceType")

-- | ToJSON TflApiPresentationEntitiesLineSpecificServiceType
instance A.ToJSON TflApiPresentationEntitiesLineSpecificServiceType where
  toJSON TflApiPresentationEntitiesLineSpecificServiceType {..} =
   _omitNulls
      [ "serviceType" .= tflApiPresentationEntitiesLineSpecificServiceTypeServiceType
      , "stopServesServiceType" .= tflApiPresentationEntitiesLineSpecificServiceTypeStopServesServiceType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineSpecificServiceType' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineSpecificServiceType
  :: TflApiPresentationEntitiesLineSpecificServiceType
mkTflApiPresentationEntitiesLineSpecificServiceType =
  TflApiPresentationEntitiesLineSpecificServiceType
  { tflApiPresentationEntitiesLineSpecificServiceTypeServiceType = Nothing
  , tflApiPresentationEntitiesLineSpecificServiceTypeStopServesServiceType = Nothing
  }

-- ** TflApiPresentationEntitiesLineStatus
-- | TflApiPresentationEntitiesLineStatus
data TflApiPresentationEntitiesLineStatus = TflApiPresentationEntitiesLineStatus
  { tflApiPresentationEntitiesLineStatusId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesLineStatusLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesLineStatusStatusSeverity :: !(Maybe Int) -- ^ "statusSeverity"
  , tflApiPresentationEntitiesLineStatusStatusSeverityDescription :: !(Maybe Text) -- ^ "statusSeverityDescription"
  , tflApiPresentationEntitiesLineStatusReason :: !(Maybe Text) -- ^ "reason"
  , tflApiPresentationEntitiesLineStatusCreated :: !(Maybe DateTime) -- ^ "created"
  , tflApiPresentationEntitiesLineStatusModified :: !(Maybe DateTime) -- ^ "modified"
  , tflApiPresentationEntitiesLineStatusValidityPeriods :: !(Maybe [TflApiPresentationEntitiesValidityPeriod]) -- ^ "validityPeriods"
  , tflApiPresentationEntitiesLineStatusDisruption :: !(Maybe TflApiPresentationEntitiesDisruption) -- ^ "disruption"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesLineStatus
instance A.FromJSON TflApiPresentationEntitiesLineStatus where
  parseJSON = A.withObject "TflApiPresentationEntitiesLineStatus" $ \o ->
    TflApiPresentationEntitiesLineStatus
      <$> (o .:? "id")
      <*> (o .:? "lineId")
      <*> (o .:? "statusSeverity")
      <*> (o .:? "statusSeverityDescription")
      <*> (o .:? "reason")
      <*> (o .:? "created")
      <*> (o .:? "modified")
      <*> (o .:? "validityPeriods")
      <*> (o .:? "disruption")

-- | ToJSON TflApiPresentationEntitiesLineStatus
instance A.ToJSON TflApiPresentationEntitiesLineStatus where
  toJSON TflApiPresentationEntitiesLineStatus {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesLineStatusId
      , "lineId" .= tflApiPresentationEntitiesLineStatusLineId
      , "statusSeverity" .= tflApiPresentationEntitiesLineStatusStatusSeverity
      , "statusSeverityDescription" .= tflApiPresentationEntitiesLineStatusStatusSeverityDescription
      , "reason" .= tflApiPresentationEntitiesLineStatusReason
      , "created" .= tflApiPresentationEntitiesLineStatusCreated
      , "modified" .= tflApiPresentationEntitiesLineStatusModified
      , "validityPeriods" .= tflApiPresentationEntitiesLineStatusValidityPeriods
      , "disruption" .= tflApiPresentationEntitiesLineStatusDisruption
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesLineStatus' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesLineStatus
  :: TflApiPresentationEntitiesLineStatus
mkTflApiPresentationEntitiesLineStatus =
  TflApiPresentationEntitiesLineStatus
  { tflApiPresentationEntitiesLineStatusId = Nothing
  , tflApiPresentationEntitiesLineStatusLineId = Nothing
  , tflApiPresentationEntitiesLineStatusStatusSeverity = Nothing
  , tflApiPresentationEntitiesLineStatusStatusSeverityDescription = Nothing
  , tflApiPresentationEntitiesLineStatusReason = Nothing
  , tflApiPresentationEntitiesLineStatusCreated = Nothing
  , tflApiPresentationEntitiesLineStatusModified = Nothing
  , tflApiPresentationEntitiesLineStatusValidityPeriods = Nothing
  , tflApiPresentationEntitiesLineStatusDisruption = Nothing
  }

-- ** TflApiPresentationEntitiesMatchedRoute
-- | TflApiPresentationEntitiesMatchedRoute
-- Description of a Route used in Route search results.
data TflApiPresentationEntitiesMatchedRoute = TflApiPresentationEntitiesMatchedRoute
  { tflApiPresentationEntitiesMatchedRouteRouteCode :: !(Maybe Text) -- ^ "routeCode" - The route code
  , tflApiPresentationEntitiesMatchedRouteName :: !(Maybe Text) -- ^ "name" - Name such as \&quot;72\&quot;
  , tflApiPresentationEntitiesMatchedRouteDirection :: !(Maybe Text) -- ^ "direction" - Inbound or Outbound
  , tflApiPresentationEntitiesMatchedRouteOriginationName :: !(Maybe Text) -- ^ "originationName" - The name of the Origin StopPoint
  , tflApiPresentationEntitiesMatchedRouteDestinationName :: !(Maybe Text) -- ^ "destinationName" - The name of the Destination StopPoint
  , tflApiPresentationEntitiesMatchedRouteOriginator :: !(Maybe Text) -- ^ "originator" - The Id (NaPTAN code) of the Origin StopPoint
  , tflApiPresentationEntitiesMatchedRouteDestination :: !(Maybe Text) -- ^ "destination" - The Id (NaPTAN code) or the Destination StopPoint
  , tflApiPresentationEntitiesMatchedRouteServiceType :: !(Maybe Text) -- ^ "serviceType" - Regular or Night
  , tflApiPresentationEntitiesMatchedRouteValidTo :: !(Maybe DateTime) -- ^ "validTo" - The DateTime that the Service containing this Route is valid until.
  , tflApiPresentationEntitiesMatchedRouteValidFrom :: !(Maybe DateTime) -- ^ "validFrom" - The DateTime that the Service containing this Route is valid from.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesMatchedRoute
instance A.FromJSON TflApiPresentationEntitiesMatchedRoute where
  parseJSON = A.withObject "TflApiPresentationEntitiesMatchedRoute" $ \o ->
    TflApiPresentationEntitiesMatchedRoute
      <$> (o .:? "routeCode")
      <*> (o .:? "name")
      <*> (o .:? "direction")
      <*> (o .:? "originationName")
      <*> (o .:? "destinationName")
      <*> (o .:? "originator")
      <*> (o .:? "destination")
      <*> (o .:? "serviceType")
      <*> (o .:? "validTo")
      <*> (o .:? "validFrom")

-- | ToJSON TflApiPresentationEntitiesMatchedRoute
instance A.ToJSON TflApiPresentationEntitiesMatchedRoute where
  toJSON TflApiPresentationEntitiesMatchedRoute {..} =
   _omitNulls
      [ "routeCode" .= tflApiPresentationEntitiesMatchedRouteRouteCode
      , "name" .= tflApiPresentationEntitiesMatchedRouteName
      , "direction" .= tflApiPresentationEntitiesMatchedRouteDirection
      , "originationName" .= tflApiPresentationEntitiesMatchedRouteOriginationName
      , "destinationName" .= tflApiPresentationEntitiesMatchedRouteDestinationName
      , "originator" .= tflApiPresentationEntitiesMatchedRouteOriginator
      , "destination" .= tflApiPresentationEntitiesMatchedRouteDestination
      , "serviceType" .= tflApiPresentationEntitiesMatchedRouteServiceType
      , "validTo" .= tflApiPresentationEntitiesMatchedRouteValidTo
      , "validFrom" .= tflApiPresentationEntitiesMatchedRouteValidFrom
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesMatchedRoute' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesMatchedRoute
  :: TflApiPresentationEntitiesMatchedRoute
mkTflApiPresentationEntitiesMatchedRoute =
  TflApiPresentationEntitiesMatchedRoute
  { tflApiPresentationEntitiesMatchedRouteRouteCode = Nothing
  , tflApiPresentationEntitiesMatchedRouteName = Nothing
  , tflApiPresentationEntitiesMatchedRouteDirection = Nothing
  , tflApiPresentationEntitiesMatchedRouteOriginationName = Nothing
  , tflApiPresentationEntitiesMatchedRouteDestinationName = Nothing
  , tflApiPresentationEntitiesMatchedRouteOriginator = Nothing
  , tflApiPresentationEntitiesMatchedRouteDestination = Nothing
  , tflApiPresentationEntitiesMatchedRouteServiceType = Nothing
  , tflApiPresentationEntitiesMatchedRouteValidTo = Nothing
  , tflApiPresentationEntitiesMatchedRouteValidFrom = Nothing
  }

-- ** TflApiPresentationEntitiesMatchedRouteSections
-- | TflApiPresentationEntitiesMatchedRouteSections
data TflApiPresentationEntitiesMatchedRouteSections = TflApiPresentationEntitiesMatchedRouteSections
  { tflApiPresentationEntitiesMatchedRouteSectionsId :: !(Maybe Int) -- ^ "id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesMatchedRouteSections
instance A.FromJSON TflApiPresentationEntitiesMatchedRouteSections where
  parseJSON = A.withObject "TflApiPresentationEntitiesMatchedRouteSections" $ \o ->
    TflApiPresentationEntitiesMatchedRouteSections
      <$> (o .:? "id")

-- | ToJSON TflApiPresentationEntitiesMatchedRouteSections
instance A.ToJSON TflApiPresentationEntitiesMatchedRouteSections where
  toJSON TflApiPresentationEntitiesMatchedRouteSections {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesMatchedRouteSectionsId
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesMatchedRouteSections' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesMatchedRouteSections
  :: TflApiPresentationEntitiesMatchedRouteSections
mkTflApiPresentationEntitiesMatchedRouteSections =
  TflApiPresentationEntitiesMatchedRouteSections
  { tflApiPresentationEntitiesMatchedRouteSectionsId = Nothing
  }

-- ** TflApiPresentationEntitiesMatchedStop
-- | TflApiPresentationEntitiesMatchedStop
data TflApiPresentationEntitiesMatchedStop = TflApiPresentationEntitiesMatchedStop
  { tflApiPresentationEntitiesMatchedStopRouteId :: !(Maybe Int) -- ^ "routeId"
  , tflApiPresentationEntitiesMatchedStopParentId :: !(Maybe Text) -- ^ "parentId"
  , tflApiPresentationEntitiesMatchedStopStationId :: !(Maybe Text) -- ^ "stationId"
  , tflApiPresentationEntitiesMatchedStopIcsId :: !(Maybe Text) -- ^ "icsId"
  , tflApiPresentationEntitiesMatchedStopTopMostParentId :: !(Maybe Text) -- ^ "topMostParentId"
  , tflApiPresentationEntitiesMatchedStopDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesMatchedStopTowards :: !(Maybe Text) -- ^ "towards"
  , tflApiPresentationEntitiesMatchedStopModes :: !(Maybe [Text]) -- ^ "modes"
  , tflApiPresentationEntitiesMatchedStopStopType :: !(Maybe Text) -- ^ "stopType"
  , tflApiPresentationEntitiesMatchedStopStopLetter :: !(Maybe Text) -- ^ "stopLetter"
  , tflApiPresentationEntitiesMatchedStopZone :: !(Maybe Text) -- ^ "zone"
  , tflApiPresentationEntitiesMatchedStopAccessibilitySummary :: !(Maybe Text) -- ^ "accessibilitySummary"
  , tflApiPresentationEntitiesMatchedStopHasDisruption :: !(Maybe Bool) -- ^ "hasDisruption"
  , tflApiPresentationEntitiesMatchedStopLines :: !(Maybe [TflApiPresentationEntitiesIdentifier]) -- ^ "lines"
  , tflApiPresentationEntitiesMatchedStopStatus :: !(Maybe Bool) -- ^ "status"
  , tflApiPresentationEntitiesMatchedStopId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesMatchedStopUrl :: !(Maybe Text) -- ^ "url"
  , tflApiPresentationEntitiesMatchedStopName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesMatchedStopLat :: !(Maybe Double) -- ^ "lat"
  , tflApiPresentationEntitiesMatchedStopLon :: !(Maybe Double) -- ^ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesMatchedStop
instance A.FromJSON TflApiPresentationEntitiesMatchedStop where
  parseJSON = A.withObject "TflApiPresentationEntitiesMatchedStop" $ \o ->
    TflApiPresentationEntitiesMatchedStop
      <$> (o .:? "routeId")
      <*> (o .:? "parentId")
      <*> (o .:? "stationId")
      <*> (o .:? "icsId")
      <*> (o .:? "topMostParentId")
      <*> (o .:? "direction")
      <*> (o .:? "towards")
      <*> (o .:? "modes")
      <*> (o .:? "stopType")
      <*> (o .:? "stopLetter")
      <*> (o .:? "zone")
      <*> (o .:? "accessibilitySummary")
      <*> (o .:? "hasDisruption")
      <*> (o .:? "lines")
      <*> (o .:? "status")
      <*> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "name")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesMatchedStop
instance A.ToJSON TflApiPresentationEntitiesMatchedStop where
  toJSON TflApiPresentationEntitiesMatchedStop {..} =
   _omitNulls
      [ "routeId" .= tflApiPresentationEntitiesMatchedStopRouteId
      , "parentId" .= tflApiPresentationEntitiesMatchedStopParentId
      , "stationId" .= tflApiPresentationEntitiesMatchedStopStationId
      , "icsId" .= tflApiPresentationEntitiesMatchedStopIcsId
      , "topMostParentId" .= tflApiPresentationEntitiesMatchedStopTopMostParentId
      , "direction" .= tflApiPresentationEntitiesMatchedStopDirection
      , "towards" .= tflApiPresentationEntitiesMatchedStopTowards
      , "modes" .= tflApiPresentationEntitiesMatchedStopModes
      , "stopType" .= tflApiPresentationEntitiesMatchedStopStopType
      , "stopLetter" .= tflApiPresentationEntitiesMatchedStopStopLetter
      , "zone" .= tflApiPresentationEntitiesMatchedStopZone
      , "accessibilitySummary" .= tflApiPresentationEntitiesMatchedStopAccessibilitySummary
      , "hasDisruption" .= tflApiPresentationEntitiesMatchedStopHasDisruption
      , "lines" .= tflApiPresentationEntitiesMatchedStopLines
      , "status" .= tflApiPresentationEntitiesMatchedStopStatus
      , "id" .= tflApiPresentationEntitiesMatchedStopId
      , "url" .= tflApiPresentationEntitiesMatchedStopUrl
      , "name" .= tflApiPresentationEntitiesMatchedStopName
      , "lat" .= tflApiPresentationEntitiesMatchedStopLat
      , "lon" .= tflApiPresentationEntitiesMatchedStopLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesMatchedStop' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesMatchedStop
  :: TflApiPresentationEntitiesMatchedStop
mkTflApiPresentationEntitiesMatchedStop =
  TflApiPresentationEntitiesMatchedStop
  { tflApiPresentationEntitiesMatchedStopRouteId = Nothing
  , tflApiPresentationEntitiesMatchedStopParentId = Nothing
  , tflApiPresentationEntitiesMatchedStopStationId = Nothing
  , tflApiPresentationEntitiesMatchedStopIcsId = Nothing
  , tflApiPresentationEntitiesMatchedStopTopMostParentId = Nothing
  , tflApiPresentationEntitiesMatchedStopDirection = Nothing
  , tflApiPresentationEntitiesMatchedStopTowards = Nothing
  , tflApiPresentationEntitiesMatchedStopModes = Nothing
  , tflApiPresentationEntitiesMatchedStopStopType = Nothing
  , tflApiPresentationEntitiesMatchedStopStopLetter = Nothing
  , tflApiPresentationEntitiesMatchedStopZone = Nothing
  , tflApiPresentationEntitiesMatchedStopAccessibilitySummary = Nothing
  , tflApiPresentationEntitiesMatchedStopHasDisruption = Nothing
  , tflApiPresentationEntitiesMatchedStopLines = Nothing
  , tflApiPresentationEntitiesMatchedStopStatus = Nothing
  , tflApiPresentationEntitiesMatchedStopId = Nothing
  , tflApiPresentationEntitiesMatchedStopUrl = Nothing
  , tflApiPresentationEntitiesMatchedStopName = Nothing
  , tflApiPresentationEntitiesMatchedStopLat = Nothing
  , tflApiPresentationEntitiesMatchedStopLon = Nothing
  }

-- ** TflApiPresentationEntitiesMessage
-- | TflApiPresentationEntitiesMessage
data TflApiPresentationEntitiesMessage = TflApiPresentationEntitiesMessage
  { tflApiPresentationEntitiesMessageBulletOrder :: !(Maybe Int) -- ^ "bulletOrder"
  , tflApiPresentationEntitiesMessageHeader :: !(Maybe Bool) -- ^ "header"
  , tflApiPresentationEntitiesMessageMessageText :: !(Maybe Text) -- ^ "messageText"
  , tflApiPresentationEntitiesMessageLinkText :: !(Maybe Text) -- ^ "linkText"
  , tflApiPresentationEntitiesMessageUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesMessage
instance A.FromJSON TflApiPresentationEntitiesMessage where
  parseJSON = A.withObject "TflApiPresentationEntitiesMessage" $ \o ->
    TflApiPresentationEntitiesMessage
      <$> (o .:? "bulletOrder")
      <*> (o .:? "header")
      <*> (o .:? "messageText")
      <*> (o .:? "linkText")
      <*> (o .:? "url")

-- | ToJSON TflApiPresentationEntitiesMessage
instance A.ToJSON TflApiPresentationEntitiesMessage where
  toJSON TflApiPresentationEntitiesMessage {..} =
   _omitNulls
      [ "bulletOrder" .= tflApiPresentationEntitiesMessageBulletOrder
      , "header" .= tflApiPresentationEntitiesMessageHeader
      , "messageText" .= tflApiPresentationEntitiesMessageMessageText
      , "linkText" .= tflApiPresentationEntitiesMessageLinkText
      , "url" .= tflApiPresentationEntitiesMessageUrl
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesMessage' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesMessage
  :: TflApiPresentationEntitiesMessage
mkTflApiPresentationEntitiesMessage =
  TflApiPresentationEntitiesMessage
  { tflApiPresentationEntitiesMessageBulletOrder = Nothing
  , tflApiPresentationEntitiesMessageHeader = Nothing
  , tflApiPresentationEntitiesMessageMessageText = Nothing
  , tflApiPresentationEntitiesMessageLinkText = Nothing
  , tflApiPresentationEntitiesMessageUrl = Nothing
  }

-- ** TflApiPresentationEntitiesMode
-- | TflApiPresentationEntitiesMode
data TflApiPresentationEntitiesMode = TflApiPresentationEntitiesMode
  { tflApiPresentationEntitiesModeIsTflService :: !(Maybe Bool) -- ^ "isTflService"
  , tflApiPresentationEntitiesModeIsFarePaying :: !(Maybe Bool) -- ^ "isFarePaying"
  , tflApiPresentationEntitiesModeIsScheduledService :: !(Maybe Bool) -- ^ "isScheduledService"
  , tflApiPresentationEntitiesModeModeName :: !(Maybe Text) -- ^ "modeName"
  , tflApiPresentationEntitiesModeMotType :: !(Maybe Text) -- ^ "motType"
  , tflApiPresentationEntitiesModeNetwork :: !(Maybe Text) -- ^ "network"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesMode
instance A.FromJSON TflApiPresentationEntitiesMode where
  parseJSON = A.withObject "TflApiPresentationEntitiesMode" $ \o ->
    TflApiPresentationEntitiesMode
      <$> (o .:? "isTflService")
      <*> (o .:? "isFarePaying")
      <*> (o .:? "isScheduledService")
      <*> (o .:? "modeName")
      <*> (o .:? "motType")
      <*> (o .:? "network")

-- | ToJSON TflApiPresentationEntitiesMode
instance A.ToJSON TflApiPresentationEntitiesMode where
  toJSON TflApiPresentationEntitiesMode {..} =
   _omitNulls
      [ "isTflService" .= tflApiPresentationEntitiesModeIsTflService
      , "isFarePaying" .= tflApiPresentationEntitiesModeIsFarePaying
      , "isScheduledService" .= tflApiPresentationEntitiesModeIsScheduledService
      , "modeName" .= tflApiPresentationEntitiesModeModeName
      , "motType" .= tflApiPresentationEntitiesModeMotType
      , "network" .= tflApiPresentationEntitiesModeNetwork
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesMode' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesMode
  :: TflApiPresentationEntitiesMode
mkTflApiPresentationEntitiesMode =
  TflApiPresentationEntitiesMode
  { tflApiPresentationEntitiesModeIsTflService = Nothing
  , tflApiPresentationEntitiesModeIsFarePaying = Nothing
  , tflApiPresentationEntitiesModeIsScheduledService = Nothing
  , tflApiPresentationEntitiesModeModeName = Nothing
  , tflApiPresentationEntitiesModeMotType = Nothing
  , tflApiPresentationEntitiesModeNetwork = Nothing
  }

-- ** TflApiPresentationEntitiesNetworkStatus
-- | TflApiPresentationEntitiesNetworkStatus
-- Represent travel network status
data TflApiPresentationEntitiesNetworkStatus = TflApiPresentationEntitiesNetworkStatus
  { tflApiPresentationEntitiesNetworkStatusOperator :: !(Maybe Text) -- ^ "operator"
  , tflApiPresentationEntitiesNetworkStatusStatus :: !(Maybe Text) -- ^ "status"
  , tflApiPresentationEntitiesNetworkStatusMessage :: !(Maybe Text) -- ^ "message"
  , tflApiPresentationEntitiesNetworkStatusStatusLevel :: !(Maybe Int) -- ^ "statusLevel"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesNetworkStatus
instance A.FromJSON TflApiPresentationEntitiesNetworkStatus where
  parseJSON = A.withObject "TflApiPresentationEntitiesNetworkStatus" $ \o ->
    TflApiPresentationEntitiesNetworkStatus
      <$> (o .:? "operator")
      <*> (o .:? "status")
      <*> (o .:? "message")
      <*> (o .:? "statusLevel")

-- | ToJSON TflApiPresentationEntitiesNetworkStatus
instance A.ToJSON TflApiPresentationEntitiesNetworkStatus where
  toJSON TflApiPresentationEntitiesNetworkStatus {..} =
   _omitNulls
      [ "operator" .= tflApiPresentationEntitiesNetworkStatusOperator
      , "status" .= tflApiPresentationEntitiesNetworkStatusStatus
      , "message" .= tflApiPresentationEntitiesNetworkStatusMessage
      , "statusLevel" .= tflApiPresentationEntitiesNetworkStatusStatusLevel
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesNetworkStatus' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesNetworkStatus
  :: TflApiPresentationEntitiesNetworkStatus
mkTflApiPresentationEntitiesNetworkStatus =
  TflApiPresentationEntitiesNetworkStatus
  { tflApiPresentationEntitiesNetworkStatusOperator = Nothing
  , tflApiPresentationEntitiesNetworkStatusStatus = Nothing
  , tflApiPresentationEntitiesNetworkStatusMessage = Nothing
  , tflApiPresentationEntitiesNetworkStatusStatusLevel = Nothing
  }

-- ** TflApiPresentationEntitiesOrderedRoute
-- | TflApiPresentationEntitiesOrderedRoute
data TflApiPresentationEntitiesOrderedRoute = TflApiPresentationEntitiesOrderedRoute
  { tflApiPresentationEntitiesOrderedRouteName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesOrderedRouteNaptanIds :: !(Maybe [Text]) -- ^ "naptanIds"
  , tflApiPresentationEntitiesOrderedRouteServiceType :: !(Maybe Text) -- ^ "serviceType"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesOrderedRoute
instance A.FromJSON TflApiPresentationEntitiesOrderedRoute where
  parseJSON = A.withObject "TflApiPresentationEntitiesOrderedRoute" $ \o ->
    TflApiPresentationEntitiesOrderedRoute
      <$> (o .:? "name")
      <*> (o .:? "naptanIds")
      <*> (o .:? "serviceType")

-- | ToJSON TflApiPresentationEntitiesOrderedRoute
instance A.ToJSON TflApiPresentationEntitiesOrderedRoute where
  toJSON TflApiPresentationEntitiesOrderedRoute {..} =
   _omitNulls
      [ "name" .= tflApiPresentationEntitiesOrderedRouteName
      , "naptanIds" .= tflApiPresentationEntitiesOrderedRouteNaptanIds
      , "serviceType" .= tflApiPresentationEntitiesOrderedRouteServiceType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesOrderedRoute' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesOrderedRoute
  :: TflApiPresentationEntitiesOrderedRoute
mkTflApiPresentationEntitiesOrderedRoute =
  TflApiPresentationEntitiesOrderedRoute
  { tflApiPresentationEntitiesOrderedRouteName = Nothing
  , tflApiPresentationEntitiesOrderedRouteNaptanIds = Nothing
  , tflApiPresentationEntitiesOrderedRouteServiceType = Nothing
  }

-- ** TflApiPresentationEntitiesPassengerFlow
-- | TflApiPresentationEntitiesPassengerFlow
data TflApiPresentationEntitiesPassengerFlow = TflApiPresentationEntitiesPassengerFlow
  { tflApiPresentationEntitiesPassengerFlowTimeSlice :: !(Maybe Text) -- ^ "timeSlice" - Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
  , tflApiPresentationEntitiesPassengerFlowValue :: !(Maybe Int) -- ^ "value" - Count of passenger flow towards a platform
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPassengerFlow
instance A.FromJSON TflApiPresentationEntitiesPassengerFlow where
  parseJSON = A.withObject "TflApiPresentationEntitiesPassengerFlow" $ \o ->
    TflApiPresentationEntitiesPassengerFlow
      <$> (o .:? "timeSlice")
      <*> (o .:? "value")

-- | ToJSON TflApiPresentationEntitiesPassengerFlow
instance A.ToJSON TflApiPresentationEntitiesPassengerFlow where
  toJSON TflApiPresentationEntitiesPassengerFlow {..} =
   _omitNulls
      [ "timeSlice" .= tflApiPresentationEntitiesPassengerFlowTimeSlice
      , "value" .= tflApiPresentationEntitiesPassengerFlowValue
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPassengerFlow' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPassengerFlow
  :: TflApiPresentationEntitiesPassengerFlow
mkTflApiPresentationEntitiesPassengerFlow =
  TflApiPresentationEntitiesPassengerFlow
  { tflApiPresentationEntitiesPassengerFlowTimeSlice = Nothing
  , tflApiPresentationEntitiesPassengerFlowValue = Nothing
  }

-- ** TflApiPresentationEntitiesPathAttribute
-- | TflApiPresentationEntitiesPathAttribute
data TflApiPresentationEntitiesPathAttribute = TflApiPresentationEntitiesPathAttribute
  { tflApiPresentationEntitiesPathAttributeName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesPathAttributeValue :: !(Maybe Text) -- ^ "value"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPathAttribute
instance A.FromJSON TflApiPresentationEntitiesPathAttribute where
  parseJSON = A.withObject "TflApiPresentationEntitiesPathAttribute" $ \o ->
    TflApiPresentationEntitiesPathAttribute
      <$> (o .:? "name")
      <*> (o .:? "value")

-- | ToJSON TflApiPresentationEntitiesPathAttribute
instance A.ToJSON TflApiPresentationEntitiesPathAttribute where
  toJSON TflApiPresentationEntitiesPathAttribute {..} =
   _omitNulls
      [ "name" .= tflApiPresentationEntitiesPathAttributeName
      , "value" .= tflApiPresentationEntitiesPathAttributeValue
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPathAttribute' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPathAttribute
  :: TflApiPresentationEntitiesPathAttribute
mkTflApiPresentationEntitiesPathAttribute =
  TflApiPresentationEntitiesPathAttribute
  { tflApiPresentationEntitiesPathAttributeName = Nothing
  , tflApiPresentationEntitiesPathAttributeValue = Nothing
  }

-- ** TflApiPresentationEntitiesPeriod
-- | TflApiPresentationEntitiesPeriod
data TflApiPresentationEntitiesPeriod = TflApiPresentationEntitiesPeriod
  { tflApiPresentationEntitiesPeriodType :: !(Maybe E'Type) -- ^ "type"
  , tflApiPresentationEntitiesPeriodFromTime :: !(Maybe TflApiPresentationEntitiesTwentyFourHourClockTime) -- ^ "fromTime"
  , tflApiPresentationEntitiesPeriodToTime :: !(Maybe TflApiPresentationEntitiesTwentyFourHourClockTime) -- ^ "toTime"
  , tflApiPresentationEntitiesPeriodFrequency :: !(Maybe TflApiPresentationEntitiesServiceFrequency) -- ^ "frequency"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPeriod
instance A.FromJSON TflApiPresentationEntitiesPeriod where
  parseJSON = A.withObject "TflApiPresentationEntitiesPeriod" $ \o ->
    TflApiPresentationEntitiesPeriod
      <$> (o .:? "type")
      <*> (o .:? "fromTime")
      <*> (o .:? "toTime")
      <*> (o .:? "frequency")

-- | ToJSON TflApiPresentationEntitiesPeriod
instance A.ToJSON TflApiPresentationEntitiesPeriod where
  toJSON TflApiPresentationEntitiesPeriod {..} =
   _omitNulls
      [ "type" .= tflApiPresentationEntitiesPeriodType
      , "fromTime" .= tflApiPresentationEntitiesPeriodFromTime
      , "toTime" .= tflApiPresentationEntitiesPeriodToTime
      , "frequency" .= tflApiPresentationEntitiesPeriodFrequency
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPeriod' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPeriod
  :: TflApiPresentationEntitiesPeriod
mkTflApiPresentationEntitiesPeriod =
  TflApiPresentationEntitiesPeriod
  { tflApiPresentationEntitiesPeriodType = Nothing
  , tflApiPresentationEntitiesPeriodFromTime = Nothing
  , tflApiPresentationEntitiesPeriodToTime = Nothing
  , tflApiPresentationEntitiesPeriodFrequency = Nothing
  }

-- ** TflApiPresentationEntitiesPlace
-- | TflApiPresentationEntitiesPlace
data TflApiPresentationEntitiesPlace = TflApiPresentationEntitiesPlace
  { tflApiPresentationEntitiesPlaceId :: !(Maybe Text) -- ^ "id" - A unique identifier.
  , tflApiPresentationEntitiesPlaceUrl :: !(Maybe Text) -- ^ "url" - The unique location of this resource.
  , tflApiPresentationEntitiesPlaceCommonName :: !(Maybe Text) -- ^ "commonName" - A human readable name.
  , tflApiPresentationEntitiesPlaceDistance :: !(Maybe Double) -- ^ "distance" - The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
  , tflApiPresentationEntitiesPlacePlaceType :: !(Maybe Text) -- ^ "placeType" - The type of Place. See /Place/Meta/placeTypes for possible values.
  , tflApiPresentationEntitiesPlaceAdditionalProperties :: !(Maybe [TflApiPresentationEntitiesAdditionalProperties]) -- ^ "additionalProperties" - A bag of additional key/value pairs with extra information about this place.
  , tflApiPresentationEntitiesPlaceChildren :: !(Maybe [TflApiPresentationEntitiesPlace]) -- ^ "children"
  , tflApiPresentationEntitiesPlaceChildrenUrls :: !(Maybe [Text]) -- ^ "childrenUrls"
  , tflApiPresentationEntitiesPlaceLat :: !(Maybe Double) -- ^ "lat" - WGS84 latitude of the location.
  , tflApiPresentationEntitiesPlaceLon :: !(Maybe Double) -- ^ "lon" - WGS84 longitude of the location.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPlace
instance A.FromJSON TflApiPresentationEntitiesPlace where
  parseJSON = A.withObject "TflApiPresentationEntitiesPlace" $ \o ->
    TflApiPresentationEntitiesPlace
      <$> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "commonName")
      <*> (o .:? "distance")
      <*> (o .:? "placeType")
      <*> (o .:? "additionalProperties")
      <*> (o .:? "children")
      <*> (o .:? "childrenUrls")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesPlace
instance A.ToJSON TflApiPresentationEntitiesPlace where
  toJSON TflApiPresentationEntitiesPlace {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesPlaceId
      , "url" .= tflApiPresentationEntitiesPlaceUrl
      , "commonName" .= tflApiPresentationEntitiesPlaceCommonName
      , "distance" .= tflApiPresentationEntitiesPlaceDistance
      , "placeType" .= tflApiPresentationEntitiesPlacePlaceType
      , "additionalProperties" .= tflApiPresentationEntitiesPlaceAdditionalProperties
      , "children" .= tflApiPresentationEntitiesPlaceChildren
      , "childrenUrls" .= tflApiPresentationEntitiesPlaceChildrenUrls
      , "lat" .= tflApiPresentationEntitiesPlaceLat
      , "lon" .= tflApiPresentationEntitiesPlaceLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPlace' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPlace
  :: TflApiPresentationEntitiesPlace
mkTflApiPresentationEntitiesPlace =
  TflApiPresentationEntitiesPlace
  { tflApiPresentationEntitiesPlaceId = Nothing
  , tflApiPresentationEntitiesPlaceUrl = Nothing
  , tflApiPresentationEntitiesPlaceCommonName = Nothing
  , tflApiPresentationEntitiesPlaceDistance = Nothing
  , tflApiPresentationEntitiesPlacePlaceType = Nothing
  , tflApiPresentationEntitiesPlaceAdditionalProperties = Nothing
  , tflApiPresentationEntitiesPlaceChildren = Nothing
  , tflApiPresentationEntitiesPlaceChildrenUrls = Nothing
  , tflApiPresentationEntitiesPlaceLat = Nothing
  , tflApiPresentationEntitiesPlaceLon = Nothing
  }

-- ** TflApiPresentationEntitiesPlaceCategory
-- | TflApiPresentationEntitiesPlaceCategory
data TflApiPresentationEntitiesPlaceCategory = TflApiPresentationEntitiesPlaceCategory
  { tflApiPresentationEntitiesPlaceCategoryCategory :: !(Maybe Text) -- ^ "category"
  , tflApiPresentationEntitiesPlaceCategoryAvailableKeys :: !(Maybe [Text]) -- ^ "availableKeys"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPlaceCategory
instance A.FromJSON TflApiPresentationEntitiesPlaceCategory where
  parseJSON = A.withObject "TflApiPresentationEntitiesPlaceCategory" $ \o ->
    TflApiPresentationEntitiesPlaceCategory
      <$> (o .:? "category")
      <*> (o .:? "availableKeys")

-- | ToJSON TflApiPresentationEntitiesPlaceCategory
instance A.ToJSON TflApiPresentationEntitiesPlaceCategory where
  toJSON TflApiPresentationEntitiesPlaceCategory {..} =
   _omitNulls
      [ "category" .= tflApiPresentationEntitiesPlaceCategoryCategory
      , "availableKeys" .= tflApiPresentationEntitiesPlaceCategoryAvailableKeys
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPlaceCategory' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPlaceCategory
  :: TflApiPresentationEntitiesPlaceCategory
mkTflApiPresentationEntitiesPlaceCategory =
  TflApiPresentationEntitiesPlaceCategory
  { tflApiPresentationEntitiesPlaceCategoryCategory = Nothing
  , tflApiPresentationEntitiesPlaceCategoryAvailableKeys = Nothing
  }

-- ** TflApiPresentationEntitiesPlacePolygon
-- | TflApiPresentationEntitiesPlacePolygon
data TflApiPresentationEntitiesPlacePolygon = TflApiPresentationEntitiesPlacePolygon
  { tflApiPresentationEntitiesPlacePolygonGeoPoints :: !(Maybe [TflApiCommonGeoPoint]) -- ^ "geoPoints"
  , tflApiPresentationEntitiesPlacePolygonCommonName :: !(Maybe Text) -- ^ "commonName"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPlacePolygon
instance A.FromJSON TflApiPresentationEntitiesPlacePolygon where
  parseJSON = A.withObject "TflApiPresentationEntitiesPlacePolygon" $ \o ->
    TflApiPresentationEntitiesPlacePolygon
      <$> (o .:? "geoPoints")
      <*> (o .:? "commonName")

-- | ToJSON TflApiPresentationEntitiesPlacePolygon
instance A.ToJSON TflApiPresentationEntitiesPlacePolygon where
  toJSON TflApiPresentationEntitiesPlacePolygon {..} =
   _omitNulls
      [ "geoPoints" .= tflApiPresentationEntitiesPlacePolygonGeoPoints
      , "commonName" .= tflApiPresentationEntitiesPlacePolygonCommonName
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPlacePolygon' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPlacePolygon
  :: TflApiPresentationEntitiesPlacePolygon
mkTflApiPresentationEntitiesPlacePolygon =
  TflApiPresentationEntitiesPlacePolygon
  { tflApiPresentationEntitiesPlacePolygonGeoPoints = Nothing
  , tflApiPresentationEntitiesPlacePolygonCommonName = Nothing
  }

-- ** TflApiPresentationEntitiesPoint
-- | TflApiPresentationEntitiesPoint
-- Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
data TflApiPresentationEntitiesPoint = TflApiPresentationEntitiesPoint
  { tflApiPresentationEntitiesPointLat :: !(Maybe Double) -- ^ "lat" - WGS84 latitude of the location.
  , tflApiPresentationEntitiesPointLon :: !(Maybe Double) -- ^ "lon" - WGS84 longitude of the location.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPoint
instance A.FromJSON TflApiPresentationEntitiesPoint where
  parseJSON = A.withObject "TflApiPresentationEntitiesPoint" $ \o ->
    TflApiPresentationEntitiesPoint
      <$> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesPoint
instance A.ToJSON TflApiPresentationEntitiesPoint where
  toJSON TflApiPresentationEntitiesPoint {..} =
   _omitNulls
      [ "lat" .= tflApiPresentationEntitiesPointLat
      , "lon" .= tflApiPresentationEntitiesPointLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPoint' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPoint
  :: TflApiPresentationEntitiesPoint
mkTflApiPresentationEntitiesPoint =
  TflApiPresentationEntitiesPoint
  { tflApiPresentationEntitiesPointLat = Nothing
  , tflApiPresentationEntitiesPointLon = Nothing
  }

-- ** TflApiPresentationEntitiesPrediction
-- | TflApiPresentationEntitiesPrediction
-- DTO to capture the prediction details
data TflApiPresentationEntitiesPrediction = TflApiPresentationEntitiesPrediction
  { tflApiPresentationEntitiesPredictionId :: !(Maybe Text) -- ^ "id" - The identitier for the prediction
  , tflApiPresentationEntitiesPredictionOperationType :: !(Maybe Int) -- ^ "operationType" - The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
  , tflApiPresentationEntitiesPredictionVehicleId :: !(Maybe Text) -- ^ "vehicleId" - The actual vehicle in transit (for train modes, the leading car of the rolling set)
  , tflApiPresentationEntitiesPredictionNaptanId :: !(Maybe Text) -- ^ "naptanId" - Identifier for the prediction
  , tflApiPresentationEntitiesPredictionStationName :: !(Maybe Text) -- ^ "stationName" - Station name
  , tflApiPresentationEntitiesPredictionLineId :: !(Maybe Text) -- ^ "lineId" - Unique identifier for the Line
  , tflApiPresentationEntitiesPredictionLineName :: !(Maybe Text) -- ^ "lineName" - Line Name
  , tflApiPresentationEntitiesPredictionPlatformName :: !(Maybe Text) -- ^ "platformName" - Platform name (for bus, this is the stop letter)
  , tflApiPresentationEntitiesPredictionDirection :: !(Maybe Text) -- ^ "direction" - Direction (unified to inbound/outbound)
  , tflApiPresentationEntitiesPredictionBearing :: !(Maybe Text) -- ^ "bearing" - Bearing (between 0 to 359)
  , tflApiPresentationEntitiesPredictionTripId :: !(Maybe Text) -- ^ "tripId" - TripId is used to assemble the primary key
  , tflApiPresentationEntitiesPredictionBaseVersion :: !(Maybe Text) -- ^ "baseVersion" - Data base version
  , tflApiPresentationEntitiesPredictionDestinationNaptanId :: !(Maybe Text) -- ^ "destinationNaptanId" - Naptan Identifier for the prediction&#39;s destination
  , tflApiPresentationEntitiesPredictionDestinationName :: !(Maybe Text) -- ^ "destinationName" - Name of the destination
  , tflApiPresentationEntitiesPredictionTimestamp :: !(Maybe DateTime) -- ^ "timestamp" - Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
  , tflApiPresentationEntitiesPredictionTimeToStation :: !(Maybe Int) -- ^ "timeToStation" - Prediction of the Time to station in seconds
  , tflApiPresentationEntitiesPredictionCurrentLocation :: !(Maybe Text) -- ^ "currentLocation" - The current location of the vehicle.
  , tflApiPresentationEntitiesPredictionTowards :: !(Maybe Text) -- ^ "towards" - Routing information or other descriptive text about the path of the vehicle towards the destination
  , tflApiPresentationEntitiesPredictionExpectedArrival :: !(Maybe DateTime) -- ^ "expectedArrival" - The expected arrival time of the vehicle at the stop/station
  , tflApiPresentationEntitiesPredictionTimeToLive :: !(Maybe DateTime) -- ^ "timeToLive" - The expiry time for the prediction
  , tflApiPresentationEntitiesPredictionModeName :: !(Maybe Text) -- ^ "modeName" - The mode name of the station/line the prediction relates to
  , tflApiPresentationEntitiesPredictionTiming :: !(Maybe TflApiPresentationEntitiesPredictionTiming) -- ^ "timing" - Keep the original timestamp from MongoDb fo debugging purposes
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPrediction
instance A.FromJSON TflApiPresentationEntitiesPrediction where
  parseJSON = A.withObject "TflApiPresentationEntitiesPrediction" $ \o ->
    TflApiPresentationEntitiesPrediction
      <$> (o .:? "id")
      <*> (o .:? "operationType")
      <*> (o .:? "vehicleId")
      <*> (o .:? "naptanId")
      <*> (o .:? "stationName")
      <*> (o .:? "lineId")
      <*> (o .:? "lineName")
      <*> (o .:? "platformName")
      <*> (o .:? "direction")
      <*> (o .:? "bearing")
      <*> (o .:? "tripId")
      <*> (o .:? "baseVersion")
      <*> (o .:? "destinationNaptanId")
      <*> (o .:? "destinationName")
      <*> (o .:? "timestamp")
      <*> (o .:? "timeToStation")
      <*> (o .:? "currentLocation")
      <*> (o .:? "towards")
      <*> (o .:? "expectedArrival")
      <*> (o .:? "timeToLive")
      <*> (o .:? "modeName")
      <*> (o .:? "timing")

-- | ToJSON TflApiPresentationEntitiesPrediction
instance A.ToJSON TflApiPresentationEntitiesPrediction where
  toJSON TflApiPresentationEntitiesPrediction {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesPredictionId
      , "operationType" .= tflApiPresentationEntitiesPredictionOperationType
      , "vehicleId" .= tflApiPresentationEntitiesPredictionVehicleId
      , "naptanId" .= tflApiPresentationEntitiesPredictionNaptanId
      , "stationName" .= tflApiPresentationEntitiesPredictionStationName
      , "lineId" .= tflApiPresentationEntitiesPredictionLineId
      , "lineName" .= tflApiPresentationEntitiesPredictionLineName
      , "platformName" .= tflApiPresentationEntitiesPredictionPlatformName
      , "direction" .= tflApiPresentationEntitiesPredictionDirection
      , "bearing" .= tflApiPresentationEntitiesPredictionBearing
      , "tripId" .= tflApiPresentationEntitiesPredictionTripId
      , "baseVersion" .= tflApiPresentationEntitiesPredictionBaseVersion
      , "destinationNaptanId" .= tflApiPresentationEntitiesPredictionDestinationNaptanId
      , "destinationName" .= tflApiPresentationEntitiesPredictionDestinationName
      , "timestamp" .= tflApiPresentationEntitiesPredictionTimestamp
      , "timeToStation" .= tflApiPresentationEntitiesPredictionTimeToStation
      , "currentLocation" .= tflApiPresentationEntitiesPredictionCurrentLocation
      , "towards" .= tflApiPresentationEntitiesPredictionTowards
      , "expectedArrival" .= tflApiPresentationEntitiesPredictionExpectedArrival
      , "timeToLive" .= tflApiPresentationEntitiesPredictionTimeToLive
      , "modeName" .= tflApiPresentationEntitiesPredictionModeName
      , "timing" .= tflApiPresentationEntitiesPredictionTiming
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPrediction' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPrediction
  :: TflApiPresentationEntitiesPrediction
mkTflApiPresentationEntitiesPrediction =
  TflApiPresentationEntitiesPrediction
  { tflApiPresentationEntitiesPredictionId = Nothing
  , tflApiPresentationEntitiesPredictionOperationType = Nothing
  , tflApiPresentationEntitiesPredictionVehicleId = Nothing
  , tflApiPresentationEntitiesPredictionNaptanId = Nothing
  , tflApiPresentationEntitiesPredictionStationName = Nothing
  , tflApiPresentationEntitiesPredictionLineId = Nothing
  , tflApiPresentationEntitiesPredictionLineName = Nothing
  , tflApiPresentationEntitiesPredictionPlatformName = Nothing
  , tflApiPresentationEntitiesPredictionDirection = Nothing
  , tflApiPresentationEntitiesPredictionBearing = Nothing
  , tflApiPresentationEntitiesPredictionTripId = Nothing
  , tflApiPresentationEntitiesPredictionBaseVersion = Nothing
  , tflApiPresentationEntitiesPredictionDestinationNaptanId = Nothing
  , tflApiPresentationEntitiesPredictionDestinationName = Nothing
  , tflApiPresentationEntitiesPredictionTimestamp = Nothing
  , tflApiPresentationEntitiesPredictionTimeToStation = Nothing
  , tflApiPresentationEntitiesPredictionCurrentLocation = Nothing
  , tflApiPresentationEntitiesPredictionTowards = Nothing
  , tflApiPresentationEntitiesPredictionExpectedArrival = Nothing
  , tflApiPresentationEntitiesPredictionTimeToLive = Nothing
  , tflApiPresentationEntitiesPredictionModeName = Nothing
  , tflApiPresentationEntitiesPredictionTiming = Nothing
  }

-- ** TflApiPresentationEntitiesPredictionTiming
-- | TflApiPresentationEntitiesPredictionTiming
data TflApiPresentationEntitiesPredictionTiming = TflApiPresentationEntitiesPredictionTiming
  { tflApiPresentationEntitiesPredictionTimingCountdownServerAdjustment :: !(Maybe Text) -- ^ "countdownServerAdjustment"
  , tflApiPresentationEntitiesPredictionTimingSource :: !(Maybe DateTime) -- ^ "source"
  , tflApiPresentationEntitiesPredictionTimingInsert :: !(Maybe DateTime) -- ^ "insert"
  , tflApiPresentationEntitiesPredictionTimingRead :: !(Maybe DateTime) -- ^ "read"
  , tflApiPresentationEntitiesPredictionTimingSent :: !(Maybe DateTime) -- ^ "sent"
  , tflApiPresentationEntitiesPredictionTimingReceived :: !(Maybe DateTime) -- ^ "received"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesPredictionTiming
instance A.FromJSON TflApiPresentationEntitiesPredictionTiming where
  parseJSON = A.withObject "TflApiPresentationEntitiesPredictionTiming" $ \o ->
    TflApiPresentationEntitiesPredictionTiming
      <$> (o .:? "countdownServerAdjustment")
      <*> (o .:? "source")
      <*> (o .:? "insert")
      <*> (o .:? "read")
      <*> (o .:? "sent")
      <*> (o .:? "received")

-- | ToJSON TflApiPresentationEntitiesPredictionTiming
instance A.ToJSON TflApiPresentationEntitiesPredictionTiming where
  toJSON TflApiPresentationEntitiesPredictionTiming {..} =
   _omitNulls
      [ "countdownServerAdjustment" .= tflApiPresentationEntitiesPredictionTimingCountdownServerAdjustment
      , "source" .= tflApiPresentationEntitiesPredictionTimingSource
      , "insert" .= tflApiPresentationEntitiesPredictionTimingInsert
      , "read" .= tflApiPresentationEntitiesPredictionTimingRead
      , "sent" .= tflApiPresentationEntitiesPredictionTimingSent
      , "received" .= tflApiPresentationEntitiesPredictionTimingReceived
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesPredictionTiming' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesPredictionTiming
  :: TflApiPresentationEntitiesPredictionTiming
mkTflApiPresentationEntitiesPredictionTiming =
  TflApiPresentationEntitiesPredictionTiming
  { tflApiPresentationEntitiesPredictionTimingCountdownServerAdjustment = Nothing
  , tflApiPresentationEntitiesPredictionTimingSource = Nothing
  , tflApiPresentationEntitiesPredictionTimingInsert = Nothing
  , tflApiPresentationEntitiesPredictionTimingRead = Nothing
  , tflApiPresentationEntitiesPredictionTimingSent = Nothing
  , tflApiPresentationEntitiesPredictionTimingReceived = Nothing
  }

-- ** TflApiPresentationEntitiesRedirect
-- | TflApiPresentationEntitiesRedirect
data TflApiPresentationEntitiesRedirect = TflApiPresentationEntitiesRedirect
  { tflApiPresentationEntitiesRedirectShortUrl :: !(Maybe Text) -- ^ "shortUrl"
  , tflApiPresentationEntitiesRedirectLongUrl :: !(Maybe Text) -- ^ "longUrl"
  , tflApiPresentationEntitiesRedirectActive :: !(Maybe Bool) -- ^ "active"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRedirect
instance A.FromJSON TflApiPresentationEntitiesRedirect where
  parseJSON = A.withObject "TflApiPresentationEntitiesRedirect" $ \o ->
    TflApiPresentationEntitiesRedirect
      <$> (o .:? "shortUrl")
      <*> (o .:? "longUrl")
      <*> (o .:? "active")

-- | ToJSON TflApiPresentationEntitiesRedirect
instance A.ToJSON TflApiPresentationEntitiesRedirect where
  toJSON TflApiPresentationEntitiesRedirect {..} =
   _omitNulls
      [ "shortUrl" .= tflApiPresentationEntitiesRedirectShortUrl
      , "longUrl" .= tflApiPresentationEntitiesRedirectLongUrl
      , "active" .= tflApiPresentationEntitiesRedirectActive
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRedirect' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRedirect
  :: TflApiPresentationEntitiesRedirect
mkTflApiPresentationEntitiesRedirect =
  TflApiPresentationEntitiesRedirect
  { tflApiPresentationEntitiesRedirectShortUrl = Nothing
  , tflApiPresentationEntitiesRedirectLongUrl = Nothing
  , tflApiPresentationEntitiesRedirectActive = Nothing
  }

-- ** TflApiPresentationEntitiesRoadCorridor
-- | TflApiPresentationEntitiesRoadCorridor
data TflApiPresentationEntitiesRoadCorridor = TflApiPresentationEntitiesRoadCorridor
  { tflApiPresentationEntitiesRoadCorridorId :: !(Maybe Text) -- ^ "id" - The Id of the Corridor e.g. \&quot;A406\&quot;
  , tflApiPresentationEntitiesRoadCorridorDisplayName :: !(Maybe Text) -- ^ "displayName" - The display name of the Corridor e.g. \&quot;North Circular (A406)\&quot;. This              may be identical to the Id.
  , tflApiPresentationEntitiesRoadCorridorGroup :: !(Maybe Text) -- ^ "group" - The group name of the Corridor e.g. \&quot;Central London\&quot;. Most corridors are not grouped, in which case this field can be null.
  , tflApiPresentationEntitiesRoadCorridorStatusSeverity :: !(Maybe Text) -- ^ "statusSeverity" - Standard multi-mode status severity code
  , tflApiPresentationEntitiesRoadCorridorStatusSeverityDescription :: !(Maybe Text) -- ^ "statusSeverityDescription" - Description of the status severity as applied to RoadCorridors
  , tflApiPresentationEntitiesRoadCorridorBounds :: !(Maybe Text) -- ^ "bounds" - The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[1.641223,53.765721]]\&quot;
  , tflApiPresentationEntitiesRoadCorridorEnvelope :: !(Maybe Text) -- ^ "envelope" - The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \&quot;[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\&quot;
  , tflApiPresentationEntitiesRoadCorridorStatusAggregationStartDate :: !(Maybe DateTime) -- ^ "statusAggregationStartDate" - The start of the period over which status has been aggregated, or null if this is the current corridor status.
  , tflApiPresentationEntitiesRoadCorridorStatusAggregationEndDate :: !(Maybe DateTime) -- ^ "statusAggregationEndDate" - The end of the period over which status has been aggregated, or null if this is the current corridor status.
  , tflApiPresentationEntitiesRoadCorridorUrl :: !(Maybe Text) -- ^ "url" - URL to retrieve this Corridor.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadCorridor
instance A.FromJSON TflApiPresentationEntitiesRoadCorridor where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadCorridor" $ \o ->
    TflApiPresentationEntitiesRoadCorridor
      <$> (o .:? "id")
      <*> (o .:? "displayName")
      <*> (o .:? "group")
      <*> (o .:? "statusSeverity")
      <*> (o .:? "statusSeverityDescription")
      <*> (o .:? "bounds")
      <*> (o .:? "envelope")
      <*> (o .:? "statusAggregationStartDate")
      <*> (o .:? "statusAggregationEndDate")
      <*> (o .:? "url")

-- | ToJSON TflApiPresentationEntitiesRoadCorridor
instance A.ToJSON TflApiPresentationEntitiesRoadCorridor where
  toJSON TflApiPresentationEntitiesRoadCorridor {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesRoadCorridorId
      , "displayName" .= tflApiPresentationEntitiesRoadCorridorDisplayName
      , "group" .= tflApiPresentationEntitiesRoadCorridorGroup
      , "statusSeverity" .= tflApiPresentationEntitiesRoadCorridorStatusSeverity
      , "statusSeverityDescription" .= tflApiPresentationEntitiesRoadCorridorStatusSeverityDescription
      , "bounds" .= tflApiPresentationEntitiesRoadCorridorBounds
      , "envelope" .= tflApiPresentationEntitiesRoadCorridorEnvelope
      , "statusAggregationStartDate" .= tflApiPresentationEntitiesRoadCorridorStatusAggregationStartDate
      , "statusAggregationEndDate" .= tflApiPresentationEntitiesRoadCorridorStatusAggregationEndDate
      , "url" .= tflApiPresentationEntitiesRoadCorridorUrl
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadCorridor' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadCorridor
  :: TflApiPresentationEntitiesRoadCorridor
mkTflApiPresentationEntitiesRoadCorridor =
  TflApiPresentationEntitiesRoadCorridor
  { tflApiPresentationEntitiesRoadCorridorId = Nothing
  , tflApiPresentationEntitiesRoadCorridorDisplayName = Nothing
  , tflApiPresentationEntitiesRoadCorridorGroup = Nothing
  , tflApiPresentationEntitiesRoadCorridorStatusSeverity = Nothing
  , tflApiPresentationEntitiesRoadCorridorStatusSeverityDescription = Nothing
  , tflApiPresentationEntitiesRoadCorridorBounds = Nothing
  , tflApiPresentationEntitiesRoadCorridorEnvelope = Nothing
  , tflApiPresentationEntitiesRoadCorridorStatusAggregationStartDate = Nothing
  , tflApiPresentationEntitiesRoadCorridorStatusAggregationEndDate = Nothing
  , tflApiPresentationEntitiesRoadCorridorUrl = Nothing
  }

-- ** TflApiPresentationEntitiesRoadDisruption
-- | TflApiPresentationEntitiesRoadDisruption
data TflApiPresentationEntitiesRoadDisruption = TflApiPresentationEntitiesRoadDisruption
  { tflApiPresentationEntitiesRoadDisruptionId :: !(Maybe Text) -- ^ "id" - Unique identifier for the road disruption
  , tflApiPresentationEntitiesRoadDisruptionUrl :: !(Maybe Text) -- ^ "url" - URL to retrieve this road disruption
  , tflApiPresentationEntitiesRoadDisruptionPoint :: !(Maybe Text) -- ^ "point" - Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.
  , tflApiPresentationEntitiesRoadDisruptionSeverity :: !(Maybe Text) -- ^ "severity" - A description of the severity of the disruption.
  , tflApiPresentationEntitiesRoadDisruptionOrdinal :: !(Maybe Int) -- ^ "ordinal" - An ordinal of the disruption based on severity, level of interest and corridor.
  , tflApiPresentationEntitiesRoadDisruptionCategory :: !(Maybe Text) -- ^ "category" - Describes the nature of disruption e.g. Traffic Incidents, Works
  , tflApiPresentationEntitiesRoadDisruptionSubCategory :: !(Maybe Text) -- ^ "subCategory" - Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load
  , tflApiPresentationEntitiesRoadDisruptionComments :: !(Maybe Text) -- ^ "comments" - Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.
  , tflApiPresentationEntitiesRoadDisruptionCurrentUpdate :: !(Maybe Text) -- ^ "currentUpdate" - Text of the most recent update from the LSTCC on the state of the               disruption, including the current traffic impact and any advice to               road users.
  , tflApiPresentationEntitiesRoadDisruptionCurrentUpdateDateTime :: !(Maybe DateTime) -- ^ "currentUpdateDateTime" - The time when the last CurrentUpdate description was recorded,               or null if no CurrentUpdate has been applied.
  , tflApiPresentationEntitiesRoadDisruptionCorridorIds :: !(Maybe [Text]) -- ^ "corridorIds" - The Ids of affected corridors, if any.
  , tflApiPresentationEntitiesRoadDisruptionStartDateTime :: !(Maybe DateTime) -- ^ "startDateTime" - The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.              For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.
  , tflApiPresentationEntitiesRoadDisruptionEndDateTime :: !(Maybe DateTime) -- ^ "endDateTime" - The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned               disruptions in progress, this field will be omitted.
  , tflApiPresentationEntitiesRoadDisruptionLastModifiedTime :: !(Maybe DateTime) -- ^ "lastModifiedTime" - The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly              compare two instances of the same disruption to determine if it has been changed.
  , tflApiPresentationEntitiesRoadDisruptionLevelOfInterest :: !(Maybe Text) -- ^ "levelOfInterest" - This describes the level of potential impact on traffic operations of the disruption.               High &#x3D; e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention               Medium &#x3D; This is the default value               Low &#x3D; e.g. a frequently occurring disruption which is well known
  , tflApiPresentationEntitiesRoadDisruptionLocation :: !(Maybe Text) -- ^ "location" - Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.
  , tflApiPresentationEntitiesRoadDisruptionStatus :: !(Maybe Text) -- ^ "status" - This describes the status of the disruption.                Active &#x3D; currently in progress               Active Long Term &#x3D; currently in progress and long term              Scheduled &#x3D; scheduled to start within the next 180 days              Recurring Works &#x3D; planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.              Recently Cleared &#x3D; recently cleared in the last 24 hours              Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.
  , tflApiPresentationEntitiesRoadDisruptionGeography :: !(Maybe SystemDataSpatialDbGeography) -- ^ "geography" - Geography version of Point for output as GeoJSON.              Can not use Geometry in a consistent way as non-TIMS disruptions do not have a polygon
  , tflApiPresentationEntitiesRoadDisruptionGeometry :: !(Maybe SystemDataSpatialDbGeography) -- ^ "geometry" - GeoJSON formatted latitude/longitude (WGS84) pairs forming an enclosed polyline or polygon. The polygon will only be included where affected streets information              is not available for the disruption, would be inappropriate (e.g. a very large number of streets), or is centred on an area without streets (e.g. a football stadium).
  , tflApiPresentationEntitiesRoadDisruptionStreets :: !(Maybe [TflApiPresentationEntitiesStreet]) -- ^ "streets" - A collection of zero or more streets affected by the disruption.
  , tflApiPresentationEntitiesRoadDisruptionIsProvisional :: !(Maybe Bool) -- ^ "isProvisional" - True if the disruption is planned on a future date that is open to change
  , tflApiPresentationEntitiesRoadDisruptionHasClosures :: !(Maybe Bool) -- ^ "hasClosures" - True if any of the affected Streets have a \&quot;Full Closure\&quot; status, false otherwise. A RoadDisruption that has HasClosures is considered a               Severe or Serious disruption for severity filtering purposes.
  , tflApiPresentationEntitiesRoadDisruptionLinkText :: !(Maybe Text) -- ^ "linkText" - The text of any associated link
  , tflApiPresentationEntitiesRoadDisruptionLinkUrl :: !(Maybe Text) -- ^ "linkUrl" - The url of any associated link
  , tflApiPresentationEntitiesRoadDisruptionRoadProject :: !(Maybe TflApiPresentationEntitiesRoadProject) -- ^ "roadProject" - Any associated road project
  , tflApiPresentationEntitiesRoadDisruptionPublishStartDate :: !(Maybe DateTime) -- ^ "publishStartDate" - TDM Additional properties
  , tflApiPresentationEntitiesRoadDisruptionPublishEndDate :: !(Maybe DateTime) -- ^ "publishEndDate"
  , tflApiPresentationEntitiesRoadDisruptionTimeFrame :: !(Maybe Text) -- ^ "timeFrame"
  , tflApiPresentationEntitiesRoadDisruptionRoadDisruptionLines :: !(Maybe [TflApiPresentationEntitiesRoadDisruptionLine]) -- ^ "roadDisruptionLines"
  , tflApiPresentationEntitiesRoadDisruptionRoadDisruptionImpactAreas :: !(Maybe [TflApiPresentationEntitiesRoadDisruptionImpactArea]) -- ^ "roadDisruptionImpactAreas"
  , tflApiPresentationEntitiesRoadDisruptionRecurringSchedules :: !(Maybe [TflApiPresentationEntitiesRoadDisruptionSchedule]) -- ^ "recurringSchedules"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadDisruption
instance A.FromJSON TflApiPresentationEntitiesRoadDisruption where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadDisruption" $ \o ->
    TflApiPresentationEntitiesRoadDisruption
      <$> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "point")
      <*> (o .:? "severity")
      <*> (o .:? "ordinal")
      <*> (o .:? "category")
      <*> (o .:? "subCategory")
      <*> (o .:? "comments")
      <*> (o .:? "currentUpdate")
      <*> (o .:? "currentUpdateDateTime")
      <*> (o .:? "corridorIds")
      <*> (o .:? "startDateTime")
      <*> (o .:? "endDateTime")
      <*> (o .:? "lastModifiedTime")
      <*> (o .:? "levelOfInterest")
      <*> (o .:? "location")
      <*> (o .:? "status")
      <*> (o .:? "geography")
      <*> (o .:? "geometry")
      <*> (o .:? "streets")
      <*> (o .:? "isProvisional")
      <*> (o .:? "hasClosures")
      <*> (o .:? "linkText")
      <*> (o .:? "linkUrl")
      <*> (o .:? "roadProject")
      <*> (o .:? "publishStartDate")
      <*> (o .:? "publishEndDate")
      <*> (o .:? "timeFrame")
      <*> (o .:? "roadDisruptionLines")
      <*> (o .:? "roadDisruptionImpactAreas")
      <*> (o .:? "recurringSchedules")

-- | ToJSON TflApiPresentationEntitiesRoadDisruption
instance A.ToJSON TflApiPresentationEntitiesRoadDisruption where
  toJSON TflApiPresentationEntitiesRoadDisruption {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesRoadDisruptionId
      , "url" .= tflApiPresentationEntitiesRoadDisruptionUrl
      , "point" .= tflApiPresentationEntitiesRoadDisruptionPoint
      , "severity" .= tflApiPresentationEntitiesRoadDisruptionSeverity
      , "ordinal" .= tflApiPresentationEntitiesRoadDisruptionOrdinal
      , "category" .= tflApiPresentationEntitiesRoadDisruptionCategory
      , "subCategory" .= tflApiPresentationEntitiesRoadDisruptionSubCategory
      , "comments" .= tflApiPresentationEntitiesRoadDisruptionComments
      , "currentUpdate" .= tflApiPresentationEntitiesRoadDisruptionCurrentUpdate
      , "currentUpdateDateTime" .= tflApiPresentationEntitiesRoadDisruptionCurrentUpdateDateTime
      , "corridorIds" .= tflApiPresentationEntitiesRoadDisruptionCorridorIds
      , "startDateTime" .= tflApiPresentationEntitiesRoadDisruptionStartDateTime
      , "endDateTime" .= tflApiPresentationEntitiesRoadDisruptionEndDateTime
      , "lastModifiedTime" .= tflApiPresentationEntitiesRoadDisruptionLastModifiedTime
      , "levelOfInterest" .= tflApiPresentationEntitiesRoadDisruptionLevelOfInterest
      , "location" .= tflApiPresentationEntitiesRoadDisruptionLocation
      , "status" .= tflApiPresentationEntitiesRoadDisruptionStatus
      , "geography" .= tflApiPresentationEntitiesRoadDisruptionGeography
      , "geometry" .= tflApiPresentationEntitiesRoadDisruptionGeometry
      , "streets" .= tflApiPresentationEntitiesRoadDisruptionStreets
      , "isProvisional" .= tflApiPresentationEntitiesRoadDisruptionIsProvisional
      , "hasClosures" .= tflApiPresentationEntitiesRoadDisruptionHasClosures
      , "linkText" .= tflApiPresentationEntitiesRoadDisruptionLinkText
      , "linkUrl" .= tflApiPresentationEntitiesRoadDisruptionLinkUrl
      , "roadProject" .= tflApiPresentationEntitiesRoadDisruptionRoadProject
      , "publishStartDate" .= tflApiPresentationEntitiesRoadDisruptionPublishStartDate
      , "publishEndDate" .= tflApiPresentationEntitiesRoadDisruptionPublishEndDate
      , "timeFrame" .= tflApiPresentationEntitiesRoadDisruptionTimeFrame
      , "roadDisruptionLines" .= tflApiPresentationEntitiesRoadDisruptionRoadDisruptionLines
      , "roadDisruptionImpactAreas" .= tflApiPresentationEntitiesRoadDisruptionRoadDisruptionImpactAreas
      , "recurringSchedules" .= tflApiPresentationEntitiesRoadDisruptionRecurringSchedules
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadDisruption' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadDisruption
  :: TflApiPresentationEntitiesRoadDisruption
mkTflApiPresentationEntitiesRoadDisruption =
  TflApiPresentationEntitiesRoadDisruption
  { tflApiPresentationEntitiesRoadDisruptionId = Nothing
  , tflApiPresentationEntitiesRoadDisruptionUrl = Nothing
  , tflApiPresentationEntitiesRoadDisruptionPoint = Nothing
  , tflApiPresentationEntitiesRoadDisruptionSeverity = Nothing
  , tflApiPresentationEntitiesRoadDisruptionOrdinal = Nothing
  , tflApiPresentationEntitiesRoadDisruptionCategory = Nothing
  , tflApiPresentationEntitiesRoadDisruptionSubCategory = Nothing
  , tflApiPresentationEntitiesRoadDisruptionComments = Nothing
  , tflApiPresentationEntitiesRoadDisruptionCurrentUpdate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionCurrentUpdateDateTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionCorridorIds = Nothing
  , tflApiPresentationEntitiesRoadDisruptionStartDateTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionEndDateTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLastModifiedTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLevelOfInterest = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLocation = Nothing
  , tflApiPresentationEntitiesRoadDisruptionStatus = Nothing
  , tflApiPresentationEntitiesRoadDisruptionGeography = Nothing
  , tflApiPresentationEntitiesRoadDisruptionGeometry = Nothing
  , tflApiPresentationEntitiesRoadDisruptionStreets = Nothing
  , tflApiPresentationEntitiesRoadDisruptionIsProvisional = Nothing
  , tflApiPresentationEntitiesRoadDisruptionHasClosures = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLinkText = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLinkUrl = Nothing
  , tflApiPresentationEntitiesRoadDisruptionRoadProject = Nothing
  , tflApiPresentationEntitiesRoadDisruptionPublishStartDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionPublishEndDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionTimeFrame = Nothing
  , tflApiPresentationEntitiesRoadDisruptionRoadDisruptionLines = Nothing
  , tflApiPresentationEntitiesRoadDisruptionRoadDisruptionImpactAreas = Nothing
  , tflApiPresentationEntitiesRoadDisruptionRecurringSchedules = Nothing
  }

-- ** TflApiPresentationEntitiesRoadDisruptionImpactArea
-- | TflApiPresentationEntitiesRoadDisruptionImpactArea
data TflApiPresentationEntitiesRoadDisruptionImpactArea = TflApiPresentationEntitiesRoadDisruptionImpactArea
  { tflApiPresentationEntitiesRoadDisruptionImpactAreaId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaRoadDisruptionId :: !(Maybe Text) -- ^ "roadDisruptionId"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaPolygon :: !(Maybe SystemDataSpatialDbGeography) -- ^ "polygon"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaEndDate :: !(Maybe DateTime) -- ^ "endDate"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaStartTime :: !(Maybe Text) -- ^ "startTime"
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaEndTime :: !(Maybe Text) -- ^ "endTime"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadDisruptionImpactArea
instance A.FromJSON TflApiPresentationEntitiesRoadDisruptionImpactArea where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadDisruptionImpactArea" $ \o ->
    TflApiPresentationEntitiesRoadDisruptionImpactArea
      <$> (o .:? "id")
      <*> (o .:? "roadDisruptionId")
      <*> (o .:? "polygon")
      <*> (o .:? "startDate")
      <*> (o .:? "endDate")
      <*> (o .:? "startTime")
      <*> (o .:? "endTime")

-- | ToJSON TflApiPresentationEntitiesRoadDisruptionImpactArea
instance A.ToJSON TflApiPresentationEntitiesRoadDisruptionImpactArea where
  toJSON TflApiPresentationEntitiesRoadDisruptionImpactArea {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaId
      , "roadDisruptionId" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaRoadDisruptionId
      , "polygon" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaPolygon
      , "startDate" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaStartDate
      , "endDate" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaEndDate
      , "startTime" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaStartTime
      , "endTime" .= tflApiPresentationEntitiesRoadDisruptionImpactAreaEndTime
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadDisruptionImpactArea' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadDisruptionImpactArea
  :: TflApiPresentationEntitiesRoadDisruptionImpactArea
mkTflApiPresentationEntitiesRoadDisruptionImpactArea =
  TflApiPresentationEntitiesRoadDisruptionImpactArea
  { tflApiPresentationEntitiesRoadDisruptionImpactAreaId = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaRoadDisruptionId = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaPolygon = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaStartDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaEndDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaStartTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionImpactAreaEndTime = Nothing
  }

-- ** TflApiPresentationEntitiesRoadDisruptionLine
-- | TflApiPresentationEntitiesRoadDisruptionLine
data TflApiPresentationEntitiesRoadDisruptionLine = TflApiPresentationEntitiesRoadDisruptionLine
  { tflApiPresentationEntitiesRoadDisruptionLineId :: !(Maybe Int) -- ^ "id"
  , tflApiPresentationEntitiesRoadDisruptionLineRoadDisruptionId :: !(Maybe Text) -- ^ "roadDisruptionId"
  , tflApiPresentationEntitiesRoadDisruptionLineIsDiversion :: !(Maybe Bool) -- ^ "isDiversion"
  , tflApiPresentationEntitiesRoadDisruptionLineMultiLineString :: !(Maybe SystemDataSpatialDbGeography) -- ^ "multiLineString"
  , tflApiPresentationEntitiesRoadDisruptionLineStartDate :: !(Maybe DateTime) -- ^ "startDate"
  , tflApiPresentationEntitiesRoadDisruptionLineEndDate :: !(Maybe DateTime) -- ^ "endDate"
  , tflApiPresentationEntitiesRoadDisruptionLineStartTime :: !(Maybe Text) -- ^ "startTime"
  , tflApiPresentationEntitiesRoadDisruptionLineEndTime :: !(Maybe Text) -- ^ "endTime"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadDisruptionLine
instance A.FromJSON TflApiPresentationEntitiesRoadDisruptionLine where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadDisruptionLine" $ \o ->
    TflApiPresentationEntitiesRoadDisruptionLine
      <$> (o .:? "id")
      <*> (o .:? "roadDisruptionId")
      <*> (o .:? "isDiversion")
      <*> (o .:? "multiLineString")
      <*> (o .:? "startDate")
      <*> (o .:? "endDate")
      <*> (o .:? "startTime")
      <*> (o .:? "endTime")

-- | ToJSON TflApiPresentationEntitiesRoadDisruptionLine
instance A.ToJSON TflApiPresentationEntitiesRoadDisruptionLine where
  toJSON TflApiPresentationEntitiesRoadDisruptionLine {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesRoadDisruptionLineId
      , "roadDisruptionId" .= tflApiPresentationEntitiesRoadDisruptionLineRoadDisruptionId
      , "isDiversion" .= tflApiPresentationEntitiesRoadDisruptionLineIsDiversion
      , "multiLineString" .= tflApiPresentationEntitiesRoadDisruptionLineMultiLineString
      , "startDate" .= tflApiPresentationEntitiesRoadDisruptionLineStartDate
      , "endDate" .= tflApiPresentationEntitiesRoadDisruptionLineEndDate
      , "startTime" .= tflApiPresentationEntitiesRoadDisruptionLineStartTime
      , "endTime" .= tflApiPresentationEntitiesRoadDisruptionLineEndTime
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadDisruptionLine' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadDisruptionLine
  :: TflApiPresentationEntitiesRoadDisruptionLine
mkTflApiPresentationEntitiesRoadDisruptionLine =
  TflApiPresentationEntitiesRoadDisruptionLine
  { tflApiPresentationEntitiesRoadDisruptionLineId = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineRoadDisruptionId = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineIsDiversion = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineMultiLineString = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineStartDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineEndDate = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineStartTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionLineEndTime = Nothing
  }

-- ** TflApiPresentationEntitiesRoadDisruptionSchedule
-- | TflApiPresentationEntitiesRoadDisruptionSchedule
data TflApiPresentationEntitiesRoadDisruptionSchedule = TflApiPresentationEntitiesRoadDisruptionSchedule
  { tflApiPresentationEntitiesRoadDisruptionScheduleStartTime :: !(Maybe DateTime) -- ^ "startTime"
  , tflApiPresentationEntitiesRoadDisruptionScheduleEndTime :: !(Maybe DateTime) -- ^ "endTime"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadDisruptionSchedule
instance A.FromJSON TflApiPresentationEntitiesRoadDisruptionSchedule where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadDisruptionSchedule" $ \o ->
    TflApiPresentationEntitiesRoadDisruptionSchedule
      <$> (o .:? "startTime")
      <*> (o .:? "endTime")

-- | ToJSON TflApiPresentationEntitiesRoadDisruptionSchedule
instance A.ToJSON TflApiPresentationEntitiesRoadDisruptionSchedule where
  toJSON TflApiPresentationEntitiesRoadDisruptionSchedule {..} =
   _omitNulls
      [ "startTime" .= tflApiPresentationEntitiesRoadDisruptionScheduleStartTime
      , "endTime" .= tflApiPresentationEntitiesRoadDisruptionScheduleEndTime
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadDisruptionSchedule' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadDisruptionSchedule
  :: TflApiPresentationEntitiesRoadDisruptionSchedule
mkTflApiPresentationEntitiesRoadDisruptionSchedule =
  TflApiPresentationEntitiesRoadDisruptionSchedule
  { tflApiPresentationEntitiesRoadDisruptionScheduleStartTime = Nothing
  , tflApiPresentationEntitiesRoadDisruptionScheduleEndTime = Nothing
  }

-- ** TflApiPresentationEntitiesRoadProject
-- | TflApiPresentationEntitiesRoadProject
data TflApiPresentationEntitiesRoadProject = TflApiPresentationEntitiesRoadProject
  { tflApiPresentationEntitiesRoadProjectProjectId :: !(Maybe Text) -- ^ "projectId"
  , tflApiPresentationEntitiesRoadProjectSchemeName :: !(Maybe Text) -- ^ "schemeName"
  , tflApiPresentationEntitiesRoadProjectProjectName :: !(Maybe Text) -- ^ "projectName"
  , tflApiPresentationEntitiesRoadProjectProjectDescription :: !(Maybe Text) -- ^ "projectDescription"
  , tflApiPresentationEntitiesRoadProjectProjectPageUrl :: !(Maybe Text) -- ^ "projectPageUrl"
  , tflApiPresentationEntitiesRoadProjectConsultationPageUrl :: !(Maybe Text) -- ^ "consultationPageUrl"
  , tflApiPresentationEntitiesRoadProjectConsultationStartDate :: !(Maybe DateTime) -- ^ "consultationStartDate"
  , tflApiPresentationEntitiesRoadProjectConsultationEndDate :: !(Maybe DateTime) -- ^ "consultationEndDate"
  , tflApiPresentationEntitiesRoadProjectConstructionStartDate :: !(Maybe DateTime) -- ^ "constructionStartDate"
  , tflApiPresentationEntitiesRoadProjectConstructionEndDate :: !(Maybe DateTime) -- ^ "constructionEndDate"
  , tflApiPresentationEntitiesRoadProjectBoroughsBenefited :: !(Maybe [Text]) -- ^ "boroughsBenefited"
  , tflApiPresentationEntitiesRoadProjectCycleSuperhighwayId :: !(Maybe Text) -- ^ "cycleSuperhighwayId"
  , tflApiPresentationEntitiesRoadProjectPhase :: !(Maybe E'Phase) -- ^ "phase"
  , tflApiPresentationEntitiesRoadProjectContactName :: !(Maybe Text) -- ^ "contactName"
  , tflApiPresentationEntitiesRoadProjectContactEmail :: !(Maybe Text) -- ^ "contactEmail"
  , tflApiPresentationEntitiesRoadProjectExternalPageUrl :: !(Maybe Text) -- ^ "externalPageUrl"
  , tflApiPresentationEntitiesRoadProjectProjectSummaryPageUrl :: !(Maybe Text) -- ^ "projectSummaryPageUrl"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRoadProject
instance A.FromJSON TflApiPresentationEntitiesRoadProject where
  parseJSON = A.withObject "TflApiPresentationEntitiesRoadProject" $ \o ->
    TflApiPresentationEntitiesRoadProject
      <$> (o .:? "projectId")
      <*> (o .:? "schemeName")
      <*> (o .:? "projectName")
      <*> (o .:? "projectDescription")
      <*> (o .:? "projectPageUrl")
      <*> (o .:? "consultationPageUrl")
      <*> (o .:? "consultationStartDate")
      <*> (o .:? "consultationEndDate")
      <*> (o .:? "constructionStartDate")
      <*> (o .:? "constructionEndDate")
      <*> (o .:? "boroughsBenefited")
      <*> (o .:? "cycleSuperhighwayId")
      <*> (o .:? "phase")
      <*> (o .:? "contactName")
      <*> (o .:? "contactEmail")
      <*> (o .:? "externalPageUrl")
      <*> (o .:? "projectSummaryPageUrl")

-- | ToJSON TflApiPresentationEntitiesRoadProject
instance A.ToJSON TflApiPresentationEntitiesRoadProject where
  toJSON TflApiPresentationEntitiesRoadProject {..} =
   _omitNulls
      [ "projectId" .= tflApiPresentationEntitiesRoadProjectProjectId
      , "schemeName" .= tflApiPresentationEntitiesRoadProjectSchemeName
      , "projectName" .= tflApiPresentationEntitiesRoadProjectProjectName
      , "projectDescription" .= tflApiPresentationEntitiesRoadProjectProjectDescription
      , "projectPageUrl" .= tflApiPresentationEntitiesRoadProjectProjectPageUrl
      , "consultationPageUrl" .= tflApiPresentationEntitiesRoadProjectConsultationPageUrl
      , "consultationStartDate" .= tflApiPresentationEntitiesRoadProjectConsultationStartDate
      , "consultationEndDate" .= tflApiPresentationEntitiesRoadProjectConsultationEndDate
      , "constructionStartDate" .= tflApiPresentationEntitiesRoadProjectConstructionStartDate
      , "constructionEndDate" .= tflApiPresentationEntitiesRoadProjectConstructionEndDate
      , "boroughsBenefited" .= tflApiPresentationEntitiesRoadProjectBoroughsBenefited
      , "cycleSuperhighwayId" .= tflApiPresentationEntitiesRoadProjectCycleSuperhighwayId
      , "phase" .= tflApiPresentationEntitiesRoadProjectPhase
      , "contactName" .= tflApiPresentationEntitiesRoadProjectContactName
      , "contactEmail" .= tflApiPresentationEntitiesRoadProjectContactEmail
      , "externalPageUrl" .= tflApiPresentationEntitiesRoadProjectExternalPageUrl
      , "projectSummaryPageUrl" .= tflApiPresentationEntitiesRoadProjectProjectSummaryPageUrl
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRoadProject' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRoadProject
  :: TflApiPresentationEntitiesRoadProject
mkTflApiPresentationEntitiesRoadProject =
  TflApiPresentationEntitiesRoadProject
  { tflApiPresentationEntitiesRoadProjectProjectId = Nothing
  , tflApiPresentationEntitiesRoadProjectSchemeName = Nothing
  , tflApiPresentationEntitiesRoadProjectProjectName = Nothing
  , tflApiPresentationEntitiesRoadProjectProjectDescription = Nothing
  , tflApiPresentationEntitiesRoadProjectProjectPageUrl = Nothing
  , tflApiPresentationEntitiesRoadProjectConsultationPageUrl = Nothing
  , tflApiPresentationEntitiesRoadProjectConsultationStartDate = Nothing
  , tflApiPresentationEntitiesRoadProjectConsultationEndDate = Nothing
  , tflApiPresentationEntitiesRoadProjectConstructionStartDate = Nothing
  , tflApiPresentationEntitiesRoadProjectConstructionEndDate = Nothing
  , tflApiPresentationEntitiesRoadProjectBoroughsBenefited = Nothing
  , tflApiPresentationEntitiesRoadProjectCycleSuperhighwayId = Nothing
  , tflApiPresentationEntitiesRoadProjectPhase = Nothing
  , tflApiPresentationEntitiesRoadProjectContactName = Nothing
  , tflApiPresentationEntitiesRoadProjectContactEmail = Nothing
  , tflApiPresentationEntitiesRoadProjectExternalPageUrl = Nothing
  , tflApiPresentationEntitiesRoadProjectProjectSummaryPageUrl = Nothing
  }

-- ** TflApiPresentationEntitiesRouteSearchMatch
-- | TflApiPresentationEntitiesRouteSearchMatch
data TflApiPresentationEntitiesRouteSearchMatch = TflApiPresentationEntitiesRouteSearchMatch
  { tflApiPresentationEntitiesRouteSearchMatchLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesRouteSearchMatchMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesRouteSearchMatchLineName :: !(Maybe Text) -- ^ "lineName"
  , tflApiPresentationEntitiesRouteSearchMatchLineRouteSection :: !(Maybe [TflApiPresentationEntitiesLineRouteSection]) -- ^ "lineRouteSection"
  , tflApiPresentationEntitiesRouteSearchMatchMatchedRouteSections :: !(Maybe [TflApiPresentationEntitiesMatchedRouteSections]) -- ^ "matchedRouteSections"
  , tflApiPresentationEntitiesRouteSearchMatchMatchedStops :: !(Maybe [TflApiPresentationEntitiesMatchedStop]) -- ^ "matchedStops"
  , tflApiPresentationEntitiesRouteSearchMatchId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesRouteSearchMatchUrl :: !(Maybe Text) -- ^ "url"
  , tflApiPresentationEntitiesRouteSearchMatchName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesRouteSearchMatchLat :: !(Maybe Double) -- ^ "lat"
  , tflApiPresentationEntitiesRouteSearchMatchLon :: !(Maybe Double) -- ^ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRouteSearchMatch
instance A.FromJSON TflApiPresentationEntitiesRouteSearchMatch where
  parseJSON = A.withObject "TflApiPresentationEntitiesRouteSearchMatch" $ \o ->
    TflApiPresentationEntitiesRouteSearchMatch
      <$> (o .:? "lineId")
      <*> (o .:? "mode")
      <*> (o .:? "lineName")
      <*> (o .:? "lineRouteSection")
      <*> (o .:? "matchedRouteSections")
      <*> (o .:? "matchedStops")
      <*> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "name")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesRouteSearchMatch
instance A.ToJSON TflApiPresentationEntitiesRouteSearchMatch where
  toJSON TflApiPresentationEntitiesRouteSearchMatch {..} =
   _omitNulls
      [ "lineId" .= tflApiPresentationEntitiesRouteSearchMatchLineId
      , "mode" .= tflApiPresentationEntitiesRouteSearchMatchMode
      , "lineName" .= tflApiPresentationEntitiesRouteSearchMatchLineName
      , "lineRouteSection" .= tflApiPresentationEntitiesRouteSearchMatchLineRouteSection
      , "matchedRouteSections" .= tflApiPresentationEntitiesRouteSearchMatchMatchedRouteSections
      , "matchedStops" .= tflApiPresentationEntitiesRouteSearchMatchMatchedStops
      , "id" .= tflApiPresentationEntitiesRouteSearchMatchId
      , "url" .= tflApiPresentationEntitiesRouteSearchMatchUrl
      , "name" .= tflApiPresentationEntitiesRouteSearchMatchName
      , "lat" .= tflApiPresentationEntitiesRouteSearchMatchLat
      , "lon" .= tflApiPresentationEntitiesRouteSearchMatchLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRouteSearchMatch' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRouteSearchMatch
  :: TflApiPresentationEntitiesRouteSearchMatch
mkTflApiPresentationEntitiesRouteSearchMatch =
  TflApiPresentationEntitiesRouteSearchMatch
  { tflApiPresentationEntitiesRouteSearchMatchLineId = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchMode = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchLineName = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchLineRouteSection = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchMatchedRouteSections = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchMatchedStops = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchId = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchUrl = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchName = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchLat = Nothing
  , tflApiPresentationEntitiesRouteSearchMatchLon = Nothing
  }

-- ** TflApiPresentationEntitiesRouteSearchResponse
-- | TflApiPresentationEntitiesRouteSearchResponse
data TflApiPresentationEntitiesRouteSearchResponse = TflApiPresentationEntitiesRouteSearchResponse
  { tflApiPresentationEntitiesRouteSearchResponseInput :: !(Maybe Text) -- ^ "input"
  , tflApiPresentationEntitiesRouteSearchResponseSearchMatches :: !(Maybe [TflApiPresentationEntitiesRouteSearchMatch]) -- ^ "searchMatches"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRouteSearchResponse
instance A.FromJSON TflApiPresentationEntitiesRouteSearchResponse where
  parseJSON = A.withObject "TflApiPresentationEntitiesRouteSearchResponse" $ \o ->
    TflApiPresentationEntitiesRouteSearchResponse
      <$> (o .:? "input")
      <*> (o .:? "searchMatches")

-- | ToJSON TflApiPresentationEntitiesRouteSearchResponse
instance A.ToJSON TflApiPresentationEntitiesRouteSearchResponse where
  toJSON TflApiPresentationEntitiesRouteSearchResponse {..} =
   _omitNulls
      [ "input" .= tflApiPresentationEntitiesRouteSearchResponseInput
      , "searchMatches" .= tflApiPresentationEntitiesRouteSearchResponseSearchMatches
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRouteSearchResponse' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRouteSearchResponse
  :: TflApiPresentationEntitiesRouteSearchResponse
mkTflApiPresentationEntitiesRouteSearchResponse =
  TflApiPresentationEntitiesRouteSearchResponse
  { tflApiPresentationEntitiesRouteSearchResponseInput = Nothing
  , tflApiPresentationEntitiesRouteSearchResponseSearchMatches = Nothing
  }

-- ** TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
-- | TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
data TflApiPresentationEntitiesRouteSectionNaptanEntrySequence = TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
  { tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceOrdinal :: !(Maybe Int) -- ^ "ordinal"
  , tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceStopPoint :: !(Maybe TflApiPresentationEntitiesStopPoint) -- ^ "stopPoint"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
instance A.FromJSON TflApiPresentationEntitiesRouteSectionNaptanEntrySequence where
  parseJSON = A.withObject "TflApiPresentationEntitiesRouteSectionNaptanEntrySequence" $ \o ->
    TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
      <$> (o .:? "ordinal")
      <*> (o .:? "stopPoint")

-- | ToJSON TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
instance A.ToJSON TflApiPresentationEntitiesRouteSectionNaptanEntrySequence where
  toJSON TflApiPresentationEntitiesRouteSectionNaptanEntrySequence {..} =
   _omitNulls
      [ "ordinal" .= tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceOrdinal
      , "stopPoint" .= tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceStopPoint
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRouteSectionNaptanEntrySequence' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRouteSectionNaptanEntrySequence
  :: TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
mkTflApiPresentationEntitiesRouteSectionNaptanEntrySequence =
  TflApiPresentationEntitiesRouteSectionNaptanEntrySequence
  { tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceOrdinal = Nothing
  , tflApiPresentationEntitiesRouteSectionNaptanEntrySequenceStopPoint = Nothing
  }

-- ** TflApiPresentationEntitiesRouteSequence
-- | TflApiPresentationEntitiesRouteSequence
data TflApiPresentationEntitiesRouteSequence = TflApiPresentationEntitiesRouteSequence
  { tflApiPresentationEntitiesRouteSequenceLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesRouteSequenceLineName :: !(Maybe Text) -- ^ "lineName"
  , tflApiPresentationEntitiesRouteSequenceDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesRouteSequenceIsOutboundOnly :: !(Maybe Bool) -- ^ "isOutboundOnly"
  , tflApiPresentationEntitiesRouteSequenceMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesRouteSequenceLineStrings :: !(Maybe [Text]) -- ^ "lineStrings"
  , tflApiPresentationEntitiesRouteSequenceStations :: !(Maybe [TflApiPresentationEntitiesMatchedStop]) -- ^ "stations"
  , tflApiPresentationEntitiesRouteSequenceStopPointSequences :: !(Maybe [TflApiPresentationEntitiesStopPointSequence]) -- ^ "stopPointSequences"
  , tflApiPresentationEntitiesRouteSequenceOrderedLineRoutes :: !(Maybe [TflApiPresentationEntitiesOrderedRoute]) -- ^ "orderedLineRoutes"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesRouteSequence
instance A.FromJSON TflApiPresentationEntitiesRouteSequence where
  parseJSON = A.withObject "TflApiPresentationEntitiesRouteSequence" $ \o ->
    TflApiPresentationEntitiesRouteSequence
      <$> (o .:? "lineId")
      <*> (o .:? "lineName")
      <*> (o .:? "direction")
      <*> (o .:? "isOutboundOnly")
      <*> (o .:? "mode")
      <*> (o .:? "lineStrings")
      <*> (o .:? "stations")
      <*> (o .:? "stopPointSequences")
      <*> (o .:? "orderedLineRoutes")

-- | ToJSON TflApiPresentationEntitiesRouteSequence
instance A.ToJSON TflApiPresentationEntitiesRouteSequence where
  toJSON TflApiPresentationEntitiesRouteSequence {..} =
   _omitNulls
      [ "lineId" .= tflApiPresentationEntitiesRouteSequenceLineId
      , "lineName" .= tflApiPresentationEntitiesRouteSequenceLineName
      , "direction" .= tflApiPresentationEntitiesRouteSequenceDirection
      , "isOutboundOnly" .= tflApiPresentationEntitiesRouteSequenceIsOutboundOnly
      , "mode" .= tflApiPresentationEntitiesRouteSequenceMode
      , "lineStrings" .= tflApiPresentationEntitiesRouteSequenceLineStrings
      , "stations" .= tflApiPresentationEntitiesRouteSequenceStations
      , "stopPointSequences" .= tflApiPresentationEntitiesRouteSequenceStopPointSequences
      , "orderedLineRoutes" .= tflApiPresentationEntitiesRouteSequenceOrderedLineRoutes
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesRouteSequence' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesRouteSequence
  :: TflApiPresentationEntitiesRouteSequence
mkTflApiPresentationEntitiesRouteSequence =
  TflApiPresentationEntitiesRouteSequence
  { tflApiPresentationEntitiesRouteSequenceLineId = Nothing
  , tflApiPresentationEntitiesRouteSequenceLineName = Nothing
  , tflApiPresentationEntitiesRouteSequenceDirection = Nothing
  , tflApiPresentationEntitiesRouteSequenceIsOutboundOnly = Nothing
  , tflApiPresentationEntitiesRouteSequenceMode = Nothing
  , tflApiPresentationEntitiesRouteSequenceLineStrings = Nothing
  , tflApiPresentationEntitiesRouteSequenceStations = Nothing
  , tflApiPresentationEntitiesRouteSequenceStopPointSequences = Nothing
  , tflApiPresentationEntitiesRouteSequenceOrderedLineRoutes = Nothing
  }

-- ** TflApiPresentationEntitiesSchedule
-- | TflApiPresentationEntitiesSchedule
data TflApiPresentationEntitiesSchedule = TflApiPresentationEntitiesSchedule
  { tflApiPresentationEntitiesScheduleName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesScheduleKnownJourneys :: !(Maybe [TflApiPresentationEntitiesKnownJourney]) -- ^ "knownJourneys"
  , tflApiPresentationEntitiesScheduleFirstJourney :: !(Maybe TflApiPresentationEntitiesKnownJourney) -- ^ "firstJourney"
  , tflApiPresentationEntitiesScheduleLastJourney :: !(Maybe TflApiPresentationEntitiesKnownJourney) -- ^ "lastJourney"
  , tflApiPresentationEntitiesSchedulePeriods :: !(Maybe [TflApiPresentationEntitiesPeriod]) -- ^ "periods"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesSchedule
instance A.FromJSON TflApiPresentationEntitiesSchedule where
  parseJSON = A.withObject "TflApiPresentationEntitiesSchedule" $ \o ->
    TflApiPresentationEntitiesSchedule
      <$> (o .:? "name")
      <*> (o .:? "knownJourneys")
      <*> (o .:? "firstJourney")
      <*> (o .:? "lastJourney")
      <*> (o .:? "periods")

-- | ToJSON TflApiPresentationEntitiesSchedule
instance A.ToJSON TflApiPresentationEntitiesSchedule where
  toJSON TflApiPresentationEntitiesSchedule {..} =
   _omitNulls
      [ "name" .= tflApiPresentationEntitiesScheduleName
      , "knownJourneys" .= tflApiPresentationEntitiesScheduleKnownJourneys
      , "firstJourney" .= tflApiPresentationEntitiesScheduleFirstJourney
      , "lastJourney" .= tflApiPresentationEntitiesScheduleLastJourney
      , "periods" .= tflApiPresentationEntitiesSchedulePeriods
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesSchedule' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesSchedule
  :: TflApiPresentationEntitiesSchedule
mkTflApiPresentationEntitiesSchedule =
  TflApiPresentationEntitiesSchedule
  { tflApiPresentationEntitiesScheduleName = Nothing
  , tflApiPresentationEntitiesScheduleKnownJourneys = Nothing
  , tflApiPresentationEntitiesScheduleFirstJourney = Nothing
  , tflApiPresentationEntitiesScheduleLastJourney = Nothing
  , tflApiPresentationEntitiesSchedulePeriods = Nothing
  }

-- ** TflApiPresentationEntitiesSearchMatch
-- | TflApiPresentationEntitiesSearchMatch
data TflApiPresentationEntitiesSearchMatch = TflApiPresentationEntitiesSearchMatch
  { tflApiPresentationEntitiesSearchMatchId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesSearchMatchUrl :: !(Maybe Text) -- ^ "url"
  , tflApiPresentationEntitiesSearchMatchName :: !(Maybe Text) -- ^ "name"
  , tflApiPresentationEntitiesSearchMatchLat :: !(Maybe Double) -- ^ "lat"
  , tflApiPresentationEntitiesSearchMatchLon :: !(Maybe Double) -- ^ "lon"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesSearchMatch
instance A.FromJSON TflApiPresentationEntitiesSearchMatch where
  parseJSON = A.withObject "TflApiPresentationEntitiesSearchMatch" $ \o ->
    TflApiPresentationEntitiesSearchMatch
      <$> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "name")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesSearchMatch
instance A.ToJSON TflApiPresentationEntitiesSearchMatch where
  toJSON TflApiPresentationEntitiesSearchMatch {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesSearchMatchId
      , "url" .= tflApiPresentationEntitiesSearchMatchUrl
      , "name" .= tflApiPresentationEntitiesSearchMatchName
      , "lat" .= tflApiPresentationEntitiesSearchMatchLat
      , "lon" .= tflApiPresentationEntitiesSearchMatchLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesSearchMatch' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesSearchMatch
  :: TflApiPresentationEntitiesSearchMatch
mkTflApiPresentationEntitiesSearchMatch =
  TflApiPresentationEntitiesSearchMatch
  { tflApiPresentationEntitiesSearchMatchId = Nothing
  , tflApiPresentationEntitiesSearchMatchUrl = Nothing
  , tflApiPresentationEntitiesSearchMatchName = Nothing
  , tflApiPresentationEntitiesSearchMatchLat = Nothing
  , tflApiPresentationEntitiesSearchMatchLon = Nothing
  }

-- ** TflApiPresentationEntitiesSearchResponse
-- | TflApiPresentationEntitiesSearchResponse
data TflApiPresentationEntitiesSearchResponse = TflApiPresentationEntitiesSearchResponse
  { tflApiPresentationEntitiesSearchResponseQuery :: !(Maybe Text) -- ^ "query"
  , tflApiPresentationEntitiesSearchResponseFrom :: !(Maybe Int) -- ^ "from"
  , tflApiPresentationEntitiesSearchResponsePage :: !(Maybe Int) -- ^ "page"
  , tflApiPresentationEntitiesSearchResponsePageSize :: !(Maybe Int) -- ^ "pageSize"
  , tflApiPresentationEntitiesSearchResponseProvider :: !(Maybe Text) -- ^ "provider"
  , tflApiPresentationEntitiesSearchResponseTotal :: !(Maybe Int) -- ^ "total"
  , tflApiPresentationEntitiesSearchResponseMatches :: !(Maybe [TflApiPresentationEntitiesSearchMatch]) -- ^ "matches"
  , tflApiPresentationEntitiesSearchResponseMaxScore :: !(Maybe Double) -- ^ "maxScore"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesSearchResponse
instance A.FromJSON TflApiPresentationEntitiesSearchResponse where
  parseJSON = A.withObject "TflApiPresentationEntitiesSearchResponse" $ \o ->
    TflApiPresentationEntitiesSearchResponse
      <$> (o .:? "query")
      <*> (o .:? "from")
      <*> (o .:? "page")
      <*> (o .:? "pageSize")
      <*> (o .:? "provider")
      <*> (o .:? "total")
      <*> (o .:? "matches")
      <*> (o .:? "maxScore")

-- | ToJSON TflApiPresentationEntitiesSearchResponse
instance A.ToJSON TflApiPresentationEntitiesSearchResponse where
  toJSON TflApiPresentationEntitiesSearchResponse {..} =
   _omitNulls
      [ "query" .= tflApiPresentationEntitiesSearchResponseQuery
      , "from" .= tflApiPresentationEntitiesSearchResponseFrom
      , "page" .= tflApiPresentationEntitiesSearchResponsePage
      , "pageSize" .= tflApiPresentationEntitiesSearchResponsePageSize
      , "provider" .= tflApiPresentationEntitiesSearchResponseProvider
      , "total" .= tflApiPresentationEntitiesSearchResponseTotal
      , "matches" .= tflApiPresentationEntitiesSearchResponseMatches
      , "maxScore" .= tflApiPresentationEntitiesSearchResponseMaxScore
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesSearchResponse' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesSearchResponse
  :: TflApiPresentationEntitiesSearchResponse
mkTflApiPresentationEntitiesSearchResponse =
  TflApiPresentationEntitiesSearchResponse
  { tflApiPresentationEntitiesSearchResponseQuery = Nothing
  , tflApiPresentationEntitiesSearchResponseFrom = Nothing
  , tflApiPresentationEntitiesSearchResponsePage = Nothing
  , tflApiPresentationEntitiesSearchResponsePageSize = Nothing
  , tflApiPresentationEntitiesSearchResponseProvider = Nothing
  , tflApiPresentationEntitiesSearchResponseTotal = Nothing
  , tflApiPresentationEntitiesSearchResponseMatches = Nothing
  , tflApiPresentationEntitiesSearchResponseMaxScore = Nothing
  }

-- ** TflApiPresentationEntitiesServiceFrequency
-- | TflApiPresentationEntitiesServiceFrequency
data TflApiPresentationEntitiesServiceFrequency = TflApiPresentationEntitiesServiceFrequency
  { tflApiPresentationEntitiesServiceFrequencyLowestFrequency :: !(Maybe Double) -- ^ "lowestFrequency"
  , tflApiPresentationEntitiesServiceFrequencyHighestFrequency :: !(Maybe Double) -- ^ "highestFrequency"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesServiceFrequency
instance A.FromJSON TflApiPresentationEntitiesServiceFrequency where
  parseJSON = A.withObject "TflApiPresentationEntitiesServiceFrequency" $ \o ->
    TflApiPresentationEntitiesServiceFrequency
      <$> (o .:? "lowestFrequency")
      <*> (o .:? "highestFrequency")

-- | ToJSON TflApiPresentationEntitiesServiceFrequency
instance A.ToJSON TflApiPresentationEntitiesServiceFrequency where
  toJSON TflApiPresentationEntitiesServiceFrequency {..} =
   _omitNulls
      [ "lowestFrequency" .= tflApiPresentationEntitiesServiceFrequencyLowestFrequency
      , "highestFrequency" .= tflApiPresentationEntitiesServiceFrequencyHighestFrequency
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesServiceFrequency' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesServiceFrequency
  :: TflApiPresentationEntitiesServiceFrequency
mkTflApiPresentationEntitiesServiceFrequency =
  TflApiPresentationEntitiesServiceFrequency
  { tflApiPresentationEntitiesServiceFrequencyLowestFrequency = Nothing
  , tflApiPresentationEntitiesServiceFrequencyHighestFrequency = Nothing
  }

-- ** TflApiPresentationEntitiesStationInterval
-- | TflApiPresentationEntitiesStationInterval
data TflApiPresentationEntitiesStationInterval = TflApiPresentationEntitiesStationInterval
  { tflApiPresentationEntitiesStationIntervalId :: !(Maybe Text) -- ^ "id"
  , tflApiPresentationEntitiesStationIntervalIntervals :: !(Maybe [TflApiPresentationEntitiesInterval]) -- ^ "intervals"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStationInterval
instance A.FromJSON TflApiPresentationEntitiesStationInterval where
  parseJSON = A.withObject "TflApiPresentationEntitiesStationInterval" $ \o ->
    TflApiPresentationEntitiesStationInterval
      <$> (o .:? "id")
      <*> (o .:? "intervals")

-- | ToJSON TflApiPresentationEntitiesStationInterval
instance A.ToJSON TflApiPresentationEntitiesStationInterval where
  toJSON TflApiPresentationEntitiesStationInterval {..} =
   _omitNulls
      [ "id" .= tflApiPresentationEntitiesStationIntervalId
      , "intervals" .= tflApiPresentationEntitiesStationIntervalIntervals
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStationInterval' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStationInterval
  :: TflApiPresentationEntitiesStationInterval
mkTflApiPresentationEntitiesStationInterval =
  TflApiPresentationEntitiesStationInterval
  { tflApiPresentationEntitiesStationIntervalId = Nothing
  , tflApiPresentationEntitiesStationIntervalIntervals = Nothing
  }

-- ** TflApiPresentationEntitiesStatusSeverity
-- | TflApiPresentationEntitiesStatusSeverity
data TflApiPresentationEntitiesStatusSeverity = TflApiPresentationEntitiesStatusSeverity
  { tflApiPresentationEntitiesStatusSeverityModeName :: !(Maybe Text) -- ^ "modeName"
  , tflApiPresentationEntitiesStatusSeveritySeverityLevel :: !(Maybe Int) -- ^ "severityLevel"
  , tflApiPresentationEntitiesStatusSeverityDescription :: !(Maybe Text) -- ^ "description"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStatusSeverity
instance A.FromJSON TflApiPresentationEntitiesStatusSeverity where
  parseJSON = A.withObject "TflApiPresentationEntitiesStatusSeverity" $ \o ->
    TflApiPresentationEntitiesStatusSeverity
      <$> (o .:? "modeName")
      <*> (o .:? "severityLevel")
      <*> (o .:? "description")

-- | ToJSON TflApiPresentationEntitiesStatusSeverity
instance A.ToJSON TflApiPresentationEntitiesStatusSeverity where
  toJSON TflApiPresentationEntitiesStatusSeverity {..} =
   _omitNulls
      [ "modeName" .= tflApiPresentationEntitiesStatusSeverityModeName
      , "severityLevel" .= tflApiPresentationEntitiesStatusSeveritySeverityLevel
      , "description" .= tflApiPresentationEntitiesStatusSeverityDescription
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStatusSeverity' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStatusSeverity
  :: TflApiPresentationEntitiesStatusSeverity
mkTflApiPresentationEntitiesStatusSeverity =
  TflApiPresentationEntitiesStatusSeverity
  { tflApiPresentationEntitiesStatusSeverityModeName = Nothing
  , tflApiPresentationEntitiesStatusSeveritySeverityLevel = Nothing
  , tflApiPresentationEntitiesStatusSeverityDescription = Nothing
  }

-- ** TflApiPresentationEntitiesStopPoint
-- | TflApiPresentationEntitiesStopPoint
data TflApiPresentationEntitiesStopPoint = TflApiPresentationEntitiesStopPoint
  { tflApiPresentationEntitiesStopPointNaptanId :: !(Maybe Text) -- ^ "naptanId"
  , tflApiPresentationEntitiesStopPointPlatformName :: !(Maybe Text) -- ^ "platformName"
  , tflApiPresentationEntitiesStopPointIndicator :: !(Maybe Text) -- ^ "indicator" - The indicator of the stop point e.g. \&quot;Stop K\&quot;
  , tflApiPresentationEntitiesStopPointStopLetter :: !(Maybe Text) -- ^ "stopLetter" - The stop letter, if it could be cleansed from the Indicator e.g. \&quot;K\&quot;
  , tflApiPresentationEntitiesStopPointModes :: !(Maybe [Text]) -- ^ "modes"
  , tflApiPresentationEntitiesStopPointIcsCode :: !(Maybe Text) -- ^ "icsCode"
  , tflApiPresentationEntitiesStopPointSmsCode :: !(Maybe Text) -- ^ "smsCode"
  , tflApiPresentationEntitiesStopPointStopType :: !(Maybe Text) -- ^ "stopType"
  , tflApiPresentationEntitiesStopPointStationNaptan :: !(Maybe Text) -- ^ "stationNaptan"
  , tflApiPresentationEntitiesStopPointAccessibilitySummary :: !(Maybe Text) -- ^ "accessibilitySummary"
  , tflApiPresentationEntitiesStopPointHubNaptanCode :: !(Maybe Text) -- ^ "hubNaptanCode"
  , tflApiPresentationEntitiesStopPointLines :: !(Maybe [TflApiPresentationEntitiesIdentifier]) -- ^ "lines"
  , tflApiPresentationEntitiesStopPointLineGroup :: !(Maybe [TflApiPresentationEntitiesLineGroup]) -- ^ "lineGroup"
  , tflApiPresentationEntitiesStopPointLineModeGroups :: !(Maybe [TflApiPresentationEntitiesLineModeGroup]) -- ^ "lineModeGroups"
  , tflApiPresentationEntitiesStopPointFullName :: !(Maybe Text) -- ^ "fullName"
  , tflApiPresentationEntitiesStopPointNaptanMode :: !(Maybe Text) -- ^ "naptanMode"
  , tflApiPresentationEntitiesStopPointStatus :: !(Maybe Bool) -- ^ "status"
  , tflApiPresentationEntitiesStopPointIndividualStopId :: !(Maybe Text) -- ^ "individualStopId"
  , tflApiPresentationEntitiesStopPointId :: !(Maybe Text) -- ^ "id" - A unique identifier.
  , tflApiPresentationEntitiesStopPointUrl :: !(Maybe Text) -- ^ "url" - The unique location of this resource.
  , tflApiPresentationEntitiesStopPointCommonName :: !(Maybe Text) -- ^ "commonName" - A human readable name.
  , tflApiPresentationEntitiesStopPointDistance :: !(Maybe Double) -- ^ "distance" - The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
  , tflApiPresentationEntitiesStopPointPlaceType :: !(Maybe Text) -- ^ "placeType" - The type of Place. See /Place/Meta/placeTypes for possible values.
  , tflApiPresentationEntitiesStopPointAdditionalProperties :: !(Maybe [TflApiPresentationEntitiesAdditionalProperties]) -- ^ "additionalProperties" - A bag of additional key/value pairs with extra information about this place.
  , tflApiPresentationEntitiesStopPointChildren :: !(Maybe [TflApiPresentationEntitiesPlace]) -- ^ "children"
  , tflApiPresentationEntitiesStopPointChildrenUrls :: !(Maybe [Text]) -- ^ "childrenUrls"
  , tflApiPresentationEntitiesStopPointLat :: !(Maybe Double) -- ^ "lat" - WGS84 latitude of the location.
  , tflApiPresentationEntitiesStopPointLon :: !(Maybe Double) -- ^ "lon" - WGS84 longitude of the location.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStopPoint
instance A.FromJSON TflApiPresentationEntitiesStopPoint where
  parseJSON = A.withObject "TflApiPresentationEntitiesStopPoint" $ \o ->
    TflApiPresentationEntitiesStopPoint
      <$> (o .:? "naptanId")
      <*> (o .:? "platformName")
      <*> (o .:? "indicator")
      <*> (o .:? "stopLetter")
      <*> (o .:? "modes")
      <*> (o .:? "icsCode")
      <*> (o .:? "smsCode")
      <*> (o .:? "stopType")
      <*> (o .:? "stationNaptan")
      <*> (o .:? "accessibilitySummary")
      <*> (o .:? "hubNaptanCode")
      <*> (o .:? "lines")
      <*> (o .:? "lineGroup")
      <*> (o .:? "lineModeGroups")
      <*> (o .:? "fullName")
      <*> (o .:? "naptanMode")
      <*> (o .:? "status")
      <*> (o .:? "individualStopId")
      <*> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "commonName")
      <*> (o .:? "distance")
      <*> (o .:? "placeType")
      <*> (o .:? "additionalProperties")
      <*> (o .:? "children")
      <*> (o .:? "childrenUrls")
      <*> (o .:? "lat")
      <*> (o .:? "lon")

-- | ToJSON TflApiPresentationEntitiesStopPoint
instance A.ToJSON TflApiPresentationEntitiesStopPoint where
  toJSON TflApiPresentationEntitiesStopPoint {..} =
   _omitNulls
      [ "naptanId" .= tflApiPresentationEntitiesStopPointNaptanId
      , "platformName" .= tflApiPresentationEntitiesStopPointPlatformName
      , "indicator" .= tflApiPresentationEntitiesStopPointIndicator
      , "stopLetter" .= tflApiPresentationEntitiesStopPointStopLetter
      , "modes" .= tflApiPresentationEntitiesStopPointModes
      , "icsCode" .= tflApiPresentationEntitiesStopPointIcsCode
      , "smsCode" .= tflApiPresentationEntitiesStopPointSmsCode
      , "stopType" .= tflApiPresentationEntitiesStopPointStopType
      , "stationNaptan" .= tflApiPresentationEntitiesStopPointStationNaptan
      , "accessibilitySummary" .= tflApiPresentationEntitiesStopPointAccessibilitySummary
      , "hubNaptanCode" .= tflApiPresentationEntitiesStopPointHubNaptanCode
      , "lines" .= tflApiPresentationEntitiesStopPointLines
      , "lineGroup" .= tflApiPresentationEntitiesStopPointLineGroup
      , "lineModeGroups" .= tflApiPresentationEntitiesStopPointLineModeGroups
      , "fullName" .= tflApiPresentationEntitiesStopPointFullName
      , "naptanMode" .= tflApiPresentationEntitiesStopPointNaptanMode
      , "status" .= tflApiPresentationEntitiesStopPointStatus
      , "individualStopId" .= tflApiPresentationEntitiesStopPointIndividualStopId
      , "id" .= tflApiPresentationEntitiesStopPointId
      , "url" .= tflApiPresentationEntitiesStopPointUrl
      , "commonName" .= tflApiPresentationEntitiesStopPointCommonName
      , "distance" .= tflApiPresentationEntitiesStopPointDistance
      , "placeType" .= tflApiPresentationEntitiesStopPointPlaceType
      , "additionalProperties" .= tflApiPresentationEntitiesStopPointAdditionalProperties
      , "children" .= tflApiPresentationEntitiesStopPointChildren
      , "childrenUrls" .= tflApiPresentationEntitiesStopPointChildrenUrls
      , "lat" .= tflApiPresentationEntitiesStopPointLat
      , "lon" .= tflApiPresentationEntitiesStopPointLon
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStopPoint' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStopPoint
  :: TflApiPresentationEntitiesStopPoint
mkTflApiPresentationEntitiesStopPoint =
  TflApiPresentationEntitiesStopPoint
  { tflApiPresentationEntitiesStopPointNaptanId = Nothing
  , tflApiPresentationEntitiesStopPointPlatformName = Nothing
  , tflApiPresentationEntitiesStopPointIndicator = Nothing
  , tflApiPresentationEntitiesStopPointStopLetter = Nothing
  , tflApiPresentationEntitiesStopPointModes = Nothing
  , tflApiPresentationEntitiesStopPointIcsCode = Nothing
  , tflApiPresentationEntitiesStopPointSmsCode = Nothing
  , tflApiPresentationEntitiesStopPointStopType = Nothing
  , tflApiPresentationEntitiesStopPointStationNaptan = Nothing
  , tflApiPresentationEntitiesStopPointAccessibilitySummary = Nothing
  , tflApiPresentationEntitiesStopPointHubNaptanCode = Nothing
  , tflApiPresentationEntitiesStopPointLines = Nothing
  , tflApiPresentationEntitiesStopPointLineGroup = Nothing
  , tflApiPresentationEntitiesStopPointLineModeGroups = Nothing
  , tflApiPresentationEntitiesStopPointFullName = Nothing
  , tflApiPresentationEntitiesStopPointNaptanMode = Nothing
  , tflApiPresentationEntitiesStopPointStatus = Nothing
  , tflApiPresentationEntitiesStopPointIndividualStopId = Nothing
  , tflApiPresentationEntitiesStopPointId = Nothing
  , tflApiPresentationEntitiesStopPointUrl = Nothing
  , tflApiPresentationEntitiesStopPointCommonName = Nothing
  , tflApiPresentationEntitiesStopPointDistance = Nothing
  , tflApiPresentationEntitiesStopPointPlaceType = Nothing
  , tflApiPresentationEntitiesStopPointAdditionalProperties = Nothing
  , tflApiPresentationEntitiesStopPointChildren = Nothing
  , tflApiPresentationEntitiesStopPointChildrenUrls = Nothing
  , tflApiPresentationEntitiesStopPointLat = Nothing
  , tflApiPresentationEntitiesStopPointLon = Nothing
  }

-- ** TflApiPresentationEntitiesStopPointCategory
-- | TflApiPresentationEntitiesStopPointCategory
data TflApiPresentationEntitiesStopPointCategory = TflApiPresentationEntitiesStopPointCategory
  { tflApiPresentationEntitiesStopPointCategoryCategory :: !(Maybe Text) -- ^ "category"
  , tflApiPresentationEntitiesStopPointCategoryAvailableKeys :: !(Maybe [Text]) -- ^ "availableKeys"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStopPointCategory
instance A.FromJSON TflApiPresentationEntitiesStopPointCategory where
  parseJSON = A.withObject "TflApiPresentationEntitiesStopPointCategory" $ \o ->
    TflApiPresentationEntitiesStopPointCategory
      <$> (o .:? "category")
      <*> (o .:? "availableKeys")

-- | ToJSON TflApiPresentationEntitiesStopPointCategory
instance A.ToJSON TflApiPresentationEntitiesStopPointCategory where
  toJSON TflApiPresentationEntitiesStopPointCategory {..} =
   _omitNulls
      [ "category" .= tflApiPresentationEntitiesStopPointCategoryCategory
      , "availableKeys" .= tflApiPresentationEntitiesStopPointCategoryAvailableKeys
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStopPointCategory' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStopPointCategory
  :: TflApiPresentationEntitiesStopPointCategory
mkTflApiPresentationEntitiesStopPointCategory =
  TflApiPresentationEntitiesStopPointCategory
  { tflApiPresentationEntitiesStopPointCategoryCategory = Nothing
  , tflApiPresentationEntitiesStopPointCategoryAvailableKeys = Nothing
  }

-- ** TflApiPresentationEntitiesStopPointRouteSection
-- | TflApiPresentationEntitiesStopPointRouteSection
data TflApiPresentationEntitiesStopPointRouteSection = TflApiPresentationEntitiesStopPointRouteSection
  { tflApiPresentationEntitiesStopPointRouteSectionNaptanId :: !(Maybe Text) -- ^ "naptanId"
  , tflApiPresentationEntitiesStopPointRouteSectionLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesStopPointRouteSectionMode :: !(Maybe Text) -- ^ "mode"
  , tflApiPresentationEntitiesStopPointRouteSectionValidFrom :: !(Maybe DateTime) -- ^ "validFrom"
  , tflApiPresentationEntitiesStopPointRouteSectionValidTo :: !(Maybe DateTime) -- ^ "validTo"
  , tflApiPresentationEntitiesStopPointRouteSectionDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesStopPointRouteSectionRouteSectionName :: !(Maybe Text) -- ^ "routeSectionName"
  , tflApiPresentationEntitiesStopPointRouteSectionLineString :: !(Maybe Text) -- ^ "lineString"
  , tflApiPresentationEntitiesStopPointRouteSectionIsActive :: !(Maybe Bool) -- ^ "isActive"
  , tflApiPresentationEntitiesStopPointRouteSectionServiceType :: !(Maybe Text) -- ^ "serviceType"
  , tflApiPresentationEntitiesStopPointRouteSectionVehicleDestinationText :: !(Maybe Text) -- ^ "vehicleDestinationText"
  , tflApiPresentationEntitiesStopPointRouteSectionDestinationName :: !(Maybe Text) -- ^ "destinationName"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStopPointRouteSection
instance A.FromJSON TflApiPresentationEntitiesStopPointRouteSection where
  parseJSON = A.withObject "TflApiPresentationEntitiesStopPointRouteSection" $ \o ->
    TflApiPresentationEntitiesStopPointRouteSection
      <$> (o .:? "naptanId")
      <*> (o .:? "lineId")
      <*> (o .:? "mode")
      <*> (o .:? "validFrom")
      <*> (o .:? "validTo")
      <*> (o .:? "direction")
      <*> (o .:? "routeSectionName")
      <*> (o .:? "lineString")
      <*> (o .:? "isActive")
      <*> (o .:? "serviceType")
      <*> (o .:? "vehicleDestinationText")
      <*> (o .:? "destinationName")

-- | ToJSON TflApiPresentationEntitiesStopPointRouteSection
instance A.ToJSON TflApiPresentationEntitiesStopPointRouteSection where
  toJSON TflApiPresentationEntitiesStopPointRouteSection {..} =
   _omitNulls
      [ "naptanId" .= tflApiPresentationEntitiesStopPointRouteSectionNaptanId
      , "lineId" .= tflApiPresentationEntitiesStopPointRouteSectionLineId
      , "mode" .= tflApiPresentationEntitiesStopPointRouteSectionMode
      , "validFrom" .= tflApiPresentationEntitiesStopPointRouteSectionValidFrom
      , "validTo" .= tflApiPresentationEntitiesStopPointRouteSectionValidTo
      , "direction" .= tflApiPresentationEntitiesStopPointRouteSectionDirection
      , "routeSectionName" .= tflApiPresentationEntitiesStopPointRouteSectionRouteSectionName
      , "lineString" .= tflApiPresentationEntitiesStopPointRouteSectionLineString
      , "isActive" .= tflApiPresentationEntitiesStopPointRouteSectionIsActive
      , "serviceType" .= tflApiPresentationEntitiesStopPointRouteSectionServiceType
      , "vehicleDestinationText" .= tflApiPresentationEntitiesStopPointRouteSectionVehicleDestinationText
      , "destinationName" .= tflApiPresentationEntitiesStopPointRouteSectionDestinationName
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStopPointRouteSection' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStopPointRouteSection
  :: TflApiPresentationEntitiesStopPointRouteSection
mkTflApiPresentationEntitiesStopPointRouteSection =
  TflApiPresentationEntitiesStopPointRouteSection
  { tflApiPresentationEntitiesStopPointRouteSectionNaptanId = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionLineId = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionMode = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionValidFrom = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionValidTo = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionDirection = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionRouteSectionName = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionLineString = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionIsActive = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionServiceType = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionVehicleDestinationText = Nothing
  , tflApiPresentationEntitiesStopPointRouteSectionDestinationName = Nothing
  }

-- ** TflApiPresentationEntitiesStopPointSequence
-- | TflApiPresentationEntitiesStopPointSequence
data TflApiPresentationEntitiesStopPointSequence = TflApiPresentationEntitiesStopPointSequence
  { tflApiPresentationEntitiesStopPointSequenceLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesStopPointSequenceLineName :: !(Maybe Text) -- ^ "lineName"
  , tflApiPresentationEntitiesStopPointSequenceDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesStopPointSequenceBranchId :: !(Maybe Int) -- ^ "branchId" - The id of this branch.
  , tflApiPresentationEntitiesStopPointSequenceNextBranchIds :: !(Maybe [Int]) -- ^ "nextBranchIds" - The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
  , tflApiPresentationEntitiesStopPointSequencePrevBranchIds :: !(Maybe [Int]) -- ^ "prevBranchIds" - The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
  , tflApiPresentationEntitiesStopPointSequenceStopPoint :: !(Maybe [TflApiPresentationEntitiesMatchedStop]) -- ^ "stopPoint"
  , tflApiPresentationEntitiesStopPointSequenceServiceType :: !(Maybe E'ServiceType) -- ^ "serviceType"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStopPointSequence
instance A.FromJSON TflApiPresentationEntitiesStopPointSequence where
  parseJSON = A.withObject "TflApiPresentationEntitiesStopPointSequence" $ \o ->
    TflApiPresentationEntitiesStopPointSequence
      <$> (o .:? "lineId")
      <*> (o .:? "lineName")
      <*> (o .:? "direction")
      <*> (o .:? "branchId")
      <*> (o .:? "nextBranchIds")
      <*> (o .:? "prevBranchIds")
      <*> (o .:? "stopPoint")
      <*> (o .:? "serviceType")

-- | ToJSON TflApiPresentationEntitiesStopPointSequence
instance A.ToJSON TflApiPresentationEntitiesStopPointSequence where
  toJSON TflApiPresentationEntitiesStopPointSequence {..} =
   _omitNulls
      [ "lineId" .= tflApiPresentationEntitiesStopPointSequenceLineId
      , "lineName" .= tflApiPresentationEntitiesStopPointSequenceLineName
      , "direction" .= tflApiPresentationEntitiesStopPointSequenceDirection
      , "branchId" .= tflApiPresentationEntitiesStopPointSequenceBranchId
      , "nextBranchIds" .= tflApiPresentationEntitiesStopPointSequenceNextBranchIds
      , "prevBranchIds" .= tflApiPresentationEntitiesStopPointSequencePrevBranchIds
      , "stopPoint" .= tflApiPresentationEntitiesStopPointSequenceStopPoint
      , "serviceType" .= tflApiPresentationEntitiesStopPointSequenceServiceType
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStopPointSequence' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStopPointSequence
  :: TflApiPresentationEntitiesStopPointSequence
mkTflApiPresentationEntitiesStopPointSequence =
  TflApiPresentationEntitiesStopPointSequence
  { tflApiPresentationEntitiesStopPointSequenceLineId = Nothing
  , tflApiPresentationEntitiesStopPointSequenceLineName = Nothing
  , tflApiPresentationEntitiesStopPointSequenceDirection = Nothing
  , tflApiPresentationEntitiesStopPointSequenceBranchId = Nothing
  , tflApiPresentationEntitiesStopPointSequenceNextBranchIds = Nothing
  , tflApiPresentationEntitiesStopPointSequencePrevBranchIds = Nothing
  , tflApiPresentationEntitiesStopPointSequenceStopPoint = Nothing
  , tflApiPresentationEntitiesStopPointSequenceServiceType = Nothing
  }

-- ** TflApiPresentationEntitiesStopPointsResponse
-- | TflApiPresentationEntitiesStopPointsResponse
-- A paged response containing StopPoints
data TflApiPresentationEntitiesStopPointsResponse = TflApiPresentationEntitiesStopPointsResponse
  { tflApiPresentationEntitiesStopPointsResponseCentrePoint :: !(Maybe [Double]) -- ^ "centrePoint" - The centre latitude/longitude of this list of StopPoints
  , tflApiPresentationEntitiesStopPointsResponseStopPoints :: !(Maybe [TflApiPresentationEntitiesStopPoint]) -- ^ "stopPoints" - Collection of stop points
  , tflApiPresentationEntitiesStopPointsResponsePageSize :: !(Maybe Int) -- ^ "pageSize" - The maximum size of the page in this response i.e. the maximum number of StopPoints
  , tflApiPresentationEntitiesStopPointsResponseTotal :: !(Maybe Int) -- ^ "total" - The total number of StopPoints available across all pages
  , tflApiPresentationEntitiesStopPointsResponsePage :: !(Maybe Int) -- ^ "page" - The index of this page
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStopPointsResponse
instance A.FromJSON TflApiPresentationEntitiesStopPointsResponse where
  parseJSON = A.withObject "TflApiPresentationEntitiesStopPointsResponse" $ \o ->
    TflApiPresentationEntitiesStopPointsResponse
      <$> (o .:? "centrePoint")
      <*> (o .:? "stopPoints")
      <*> (o .:? "pageSize")
      <*> (o .:? "total")
      <*> (o .:? "page")

-- | ToJSON TflApiPresentationEntitiesStopPointsResponse
instance A.ToJSON TflApiPresentationEntitiesStopPointsResponse where
  toJSON TflApiPresentationEntitiesStopPointsResponse {..} =
   _omitNulls
      [ "centrePoint" .= tflApiPresentationEntitiesStopPointsResponseCentrePoint
      , "stopPoints" .= tflApiPresentationEntitiesStopPointsResponseStopPoints
      , "pageSize" .= tflApiPresentationEntitiesStopPointsResponsePageSize
      , "total" .= tflApiPresentationEntitiesStopPointsResponseTotal
      , "page" .= tflApiPresentationEntitiesStopPointsResponsePage
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStopPointsResponse' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStopPointsResponse
  :: TflApiPresentationEntitiesStopPointsResponse
mkTflApiPresentationEntitiesStopPointsResponse =
  TflApiPresentationEntitiesStopPointsResponse
  { tflApiPresentationEntitiesStopPointsResponseCentrePoint = Nothing
  , tflApiPresentationEntitiesStopPointsResponseStopPoints = Nothing
  , tflApiPresentationEntitiesStopPointsResponsePageSize = Nothing
  , tflApiPresentationEntitiesStopPointsResponseTotal = Nothing
  , tflApiPresentationEntitiesStopPointsResponsePage = Nothing
  }

-- ** TflApiPresentationEntitiesStreet
-- | TflApiPresentationEntitiesStreet
data TflApiPresentationEntitiesStreet = TflApiPresentationEntitiesStreet
  { tflApiPresentationEntitiesStreetName :: !(Maybe Text) -- ^ "name" - Street name
  , tflApiPresentationEntitiesStreetClosure :: !(Maybe Text) -- ^ "closure" - Type of road closure. Some example values:              Open &#x3D; road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.              Partial Closure &#x3D; road is partially blocked, closed or restricted.               Full Closure &#x3D; road is fully blocked or closed.
  , tflApiPresentationEntitiesStreetDirections :: !(Maybe Text) -- ^ "directions" - The direction of the disruption on the street. Some example values:              All Directions              All Approaches              Clockwise              Anti-Clockwise              Northbound              Eastbound              Southbound              Westbound              Both Directions
  , tflApiPresentationEntitiesStreetSegments :: !(Maybe [TflApiPresentationEntitiesStreetSegment]) -- ^ "segments" - Geographic description of the sections of this street that are affected.
  , tflApiPresentationEntitiesStreetSourceSystemId :: !(Maybe Integer) -- ^ "sourceSystemId" - The ID from the source system of the disruption that this street belongs to.
  , tflApiPresentationEntitiesStreetSourceSystemKey :: !(Maybe Text) -- ^ "sourceSystemKey" - The key of the source system of the disruption that this street belongs to.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStreet
instance A.FromJSON TflApiPresentationEntitiesStreet where
  parseJSON = A.withObject "TflApiPresentationEntitiesStreet" $ \o ->
    TflApiPresentationEntitiesStreet
      <$> (o .:? "name")
      <*> (o .:? "closure")
      <*> (o .:? "directions")
      <*> (o .:? "segments")
      <*> (o .:? "sourceSystemId")
      <*> (o .:? "sourceSystemKey")

-- | ToJSON TflApiPresentationEntitiesStreet
instance A.ToJSON TflApiPresentationEntitiesStreet where
  toJSON TflApiPresentationEntitiesStreet {..} =
   _omitNulls
      [ "name" .= tflApiPresentationEntitiesStreetName
      , "closure" .= tflApiPresentationEntitiesStreetClosure
      , "directions" .= tflApiPresentationEntitiesStreetDirections
      , "segments" .= tflApiPresentationEntitiesStreetSegments
      , "sourceSystemId" .= tflApiPresentationEntitiesStreetSourceSystemId
      , "sourceSystemKey" .= tflApiPresentationEntitiesStreetSourceSystemKey
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStreet' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStreet
  :: TflApiPresentationEntitiesStreet
mkTflApiPresentationEntitiesStreet =
  TflApiPresentationEntitiesStreet
  { tflApiPresentationEntitiesStreetName = Nothing
  , tflApiPresentationEntitiesStreetClosure = Nothing
  , tflApiPresentationEntitiesStreetDirections = Nothing
  , tflApiPresentationEntitiesStreetSegments = Nothing
  , tflApiPresentationEntitiesStreetSourceSystemId = Nothing
  , tflApiPresentationEntitiesStreetSourceSystemKey = Nothing
  }

-- ** TflApiPresentationEntitiesStreetSegment
-- | TflApiPresentationEntitiesStreetSegment
data TflApiPresentationEntitiesStreetSegment = TflApiPresentationEntitiesStreetSegment
  { tflApiPresentationEntitiesStreetSegmentToid :: !(Maybe Text) -- ^ "toid" - A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.
  , tflApiPresentationEntitiesStreetSegmentLineString :: !(Maybe Text) -- ^ "lineString" - geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.
  , tflApiPresentationEntitiesStreetSegmentSourceSystemId :: !(Maybe Integer) -- ^ "sourceSystemId" - The ID from the source system of the disruption that this street belongs to.
  , tflApiPresentationEntitiesStreetSegmentSourceSystemKey :: !(Maybe Text) -- ^ "sourceSystemKey" - The key of the source system of the disruption that this street belongs to.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesStreetSegment
instance A.FromJSON TflApiPresentationEntitiesStreetSegment where
  parseJSON = A.withObject "TflApiPresentationEntitiesStreetSegment" $ \o ->
    TflApiPresentationEntitiesStreetSegment
      <$> (o .:? "toid")
      <*> (o .:? "lineString")
      <*> (o .:? "sourceSystemId")
      <*> (o .:? "sourceSystemKey")

-- | ToJSON TflApiPresentationEntitiesStreetSegment
instance A.ToJSON TflApiPresentationEntitiesStreetSegment where
  toJSON TflApiPresentationEntitiesStreetSegment {..} =
   _omitNulls
      [ "toid" .= tflApiPresentationEntitiesStreetSegmentToid
      , "lineString" .= tflApiPresentationEntitiesStreetSegmentLineString
      , "sourceSystemId" .= tflApiPresentationEntitiesStreetSegmentSourceSystemId
      , "sourceSystemKey" .= tflApiPresentationEntitiesStreetSegmentSourceSystemKey
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesStreetSegment' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesStreetSegment
  :: TflApiPresentationEntitiesStreetSegment
mkTflApiPresentationEntitiesStreetSegment =
  TflApiPresentationEntitiesStreetSegment
  { tflApiPresentationEntitiesStreetSegmentToid = Nothing
  , tflApiPresentationEntitiesStreetSegmentLineString = Nothing
  , tflApiPresentationEntitiesStreetSegmentSourceSystemId = Nothing
  , tflApiPresentationEntitiesStreetSegmentSourceSystemKey = Nothing
  }

-- ** TflApiPresentationEntitiesTimetable
-- | TflApiPresentationEntitiesTimetable
data TflApiPresentationEntitiesTimetable = TflApiPresentationEntitiesTimetable
  { tflApiPresentationEntitiesTimetableDepartureStopId :: !(Maybe Text) -- ^ "departureStopId"
  , tflApiPresentationEntitiesTimetableRoutes :: !(Maybe [TflApiPresentationEntitiesTimetableRoute]) -- ^ "routes"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTimetable
instance A.FromJSON TflApiPresentationEntitiesTimetable where
  parseJSON = A.withObject "TflApiPresentationEntitiesTimetable" $ \o ->
    TflApiPresentationEntitiesTimetable
      <$> (o .:? "departureStopId")
      <*> (o .:? "routes")

-- | ToJSON TflApiPresentationEntitiesTimetable
instance A.ToJSON TflApiPresentationEntitiesTimetable where
  toJSON TflApiPresentationEntitiesTimetable {..} =
   _omitNulls
      [ "departureStopId" .= tflApiPresentationEntitiesTimetableDepartureStopId
      , "routes" .= tflApiPresentationEntitiesTimetableRoutes
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTimetable' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTimetable
  :: TflApiPresentationEntitiesTimetable
mkTflApiPresentationEntitiesTimetable =
  TflApiPresentationEntitiesTimetable
  { tflApiPresentationEntitiesTimetableDepartureStopId = Nothing
  , tflApiPresentationEntitiesTimetableRoutes = Nothing
  }

-- ** TflApiPresentationEntitiesTimetableResponse
-- | TflApiPresentationEntitiesTimetableResponse
data TflApiPresentationEntitiesTimetableResponse = TflApiPresentationEntitiesTimetableResponse
  { tflApiPresentationEntitiesTimetableResponseLineId :: !(Maybe Text) -- ^ "lineId"
  , tflApiPresentationEntitiesTimetableResponseLineName :: !(Maybe Text) -- ^ "lineName"
  , tflApiPresentationEntitiesTimetableResponseDirection :: !(Maybe Text) -- ^ "direction"
  , tflApiPresentationEntitiesTimetableResponsePdfUrl :: !(Maybe Text) -- ^ "pdfUrl"
  , tflApiPresentationEntitiesTimetableResponseStations :: !(Maybe [TflApiPresentationEntitiesMatchedStop]) -- ^ "stations"
  , tflApiPresentationEntitiesTimetableResponseStops :: !(Maybe [TflApiPresentationEntitiesMatchedStop]) -- ^ "stops"
  , tflApiPresentationEntitiesTimetableResponseTimetable :: !(Maybe TflApiPresentationEntitiesTimetable) -- ^ "timetable"
  , tflApiPresentationEntitiesTimetableResponseDisambiguation :: !(Maybe TflApiPresentationEntitiesTimetablesDisambiguation) -- ^ "disambiguation"
  , tflApiPresentationEntitiesTimetableResponseStatusErrorMessage :: !(Maybe Text) -- ^ "statusErrorMessage"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTimetableResponse
instance A.FromJSON TflApiPresentationEntitiesTimetableResponse where
  parseJSON = A.withObject "TflApiPresentationEntitiesTimetableResponse" $ \o ->
    TflApiPresentationEntitiesTimetableResponse
      <$> (o .:? "lineId")
      <*> (o .:? "lineName")
      <*> (o .:? "direction")
      <*> (o .:? "pdfUrl")
      <*> (o .:? "stations")
      <*> (o .:? "stops")
      <*> (o .:? "timetable")
      <*> (o .:? "disambiguation")
      <*> (o .:? "statusErrorMessage")

-- | ToJSON TflApiPresentationEntitiesTimetableResponse
instance A.ToJSON TflApiPresentationEntitiesTimetableResponse where
  toJSON TflApiPresentationEntitiesTimetableResponse {..} =
   _omitNulls
      [ "lineId" .= tflApiPresentationEntitiesTimetableResponseLineId
      , "lineName" .= tflApiPresentationEntitiesTimetableResponseLineName
      , "direction" .= tflApiPresentationEntitiesTimetableResponseDirection
      , "pdfUrl" .= tflApiPresentationEntitiesTimetableResponsePdfUrl
      , "stations" .= tflApiPresentationEntitiesTimetableResponseStations
      , "stops" .= tflApiPresentationEntitiesTimetableResponseStops
      , "timetable" .= tflApiPresentationEntitiesTimetableResponseTimetable
      , "disambiguation" .= tflApiPresentationEntitiesTimetableResponseDisambiguation
      , "statusErrorMessage" .= tflApiPresentationEntitiesTimetableResponseStatusErrorMessage
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTimetableResponse' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTimetableResponse
  :: TflApiPresentationEntitiesTimetableResponse
mkTflApiPresentationEntitiesTimetableResponse =
  TflApiPresentationEntitiesTimetableResponse
  { tflApiPresentationEntitiesTimetableResponseLineId = Nothing
  , tflApiPresentationEntitiesTimetableResponseLineName = Nothing
  , tflApiPresentationEntitiesTimetableResponseDirection = Nothing
  , tflApiPresentationEntitiesTimetableResponsePdfUrl = Nothing
  , tflApiPresentationEntitiesTimetableResponseStations = Nothing
  , tflApiPresentationEntitiesTimetableResponseStops = Nothing
  , tflApiPresentationEntitiesTimetableResponseTimetable = Nothing
  , tflApiPresentationEntitiesTimetableResponseDisambiguation = Nothing
  , tflApiPresentationEntitiesTimetableResponseStatusErrorMessage = Nothing
  }

-- ** TflApiPresentationEntitiesTimetableRoute
-- | TflApiPresentationEntitiesTimetableRoute
data TflApiPresentationEntitiesTimetableRoute = TflApiPresentationEntitiesTimetableRoute
  { tflApiPresentationEntitiesTimetableRouteStationIntervals :: !(Maybe [TflApiPresentationEntitiesStationInterval]) -- ^ "stationIntervals"
  , tflApiPresentationEntitiesTimetableRouteSchedules :: !(Maybe [TflApiPresentationEntitiesSchedule]) -- ^ "schedules"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTimetableRoute
instance A.FromJSON TflApiPresentationEntitiesTimetableRoute where
  parseJSON = A.withObject "TflApiPresentationEntitiesTimetableRoute" $ \o ->
    TflApiPresentationEntitiesTimetableRoute
      <$> (o .:? "stationIntervals")
      <*> (o .:? "schedules")

-- | ToJSON TflApiPresentationEntitiesTimetableRoute
instance A.ToJSON TflApiPresentationEntitiesTimetableRoute where
  toJSON TflApiPresentationEntitiesTimetableRoute {..} =
   _omitNulls
      [ "stationIntervals" .= tflApiPresentationEntitiesTimetableRouteStationIntervals
      , "schedules" .= tflApiPresentationEntitiesTimetableRouteSchedules
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTimetableRoute' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTimetableRoute
  :: TflApiPresentationEntitiesTimetableRoute
mkTflApiPresentationEntitiesTimetableRoute =
  TflApiPresentationEntitiesTimetableRoute
  { tflApiPresentationEntitiesTimetableRouteStationIntervals = Nothing
  , tflApiPresentationEntitiesTimetableRouteSchedules = Nothing
  }

-- ** TflApiPresentationEntitiesTimetablesDisambiguation
-- | TflApiPresentationEntitiesTimetablesDisambiguation
data TflApiPresentationEntitiesTimetablesDisambiguation = TflApiPresentationEntitiesTimetablesDisambiguation
  { tflApiPresentationEntitiesTimetablesDisambiguationDisambiguationOptions :: !(Maybe [TflApiPresentationEntitiesTimetablesDisambiguationOption]) -- ^ "disambiguationOptions"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTimetablesDisambiguation
instance A.FromJSON TflApiPresentationEntitiesTimetablesDisambiguation where
  parseJSON = A.withObject "TflApiPresentationEntitiesTimetablesDisambiguation" $ \o ->
    TflApiPresentationEntitiesTimetablesDisambiguation
      <$> (o .:? "disambiguationOptions")

-- | ToJSON TflApiPresentationEntitiesTimetablesDisambiguation
instance A.ToJSON TflApiPresentationEntitiesTimetablesDisambiguation where
  toJSON TflApiPresentationEntitiesTimetablesDisambiguation {..} =
   _omitNulls
      [ "disambiguationOptions" .= tflApiPresentationEntitiesTimetablesDisambiguationDisambiguationOptions
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTimetablesDisambiguation' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTimetablesDisambiguation
  :: TflApiPresentationEntitiesTimetablesDisambiguation
mkTflApiPresentationEntitiesTimetablesDisambiguation =
  TflApiPresentationEntitiesTimetablesDisambiguation
  { tflApiPresentationEntitiesTimetablesDisambiguationDisambiguationOptions = Nothing
  }

-- ** TflApiPresentationEntitiesTimetablesDisambiguationOption
-- | TflApiPresentationEntitiesTimetablesDisambiguationOption
data TflApiPresentationEntitiesTimetablesDisambiguationOption = TflApiPresentationEntitiesTimetablesDisambiguationOption
  { tflApiPresentationEntitiesTimetablesDisambiguationOptionDescription :: !(Maybe Text) -- ^ "description"
  , tflApiPresentationEntitiesTimetablesDisambiguationOptionUri :: !(Maybe Text) -- ^ "uri"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTimetablesDisambiguationOption
instance A.FromJSON TflApiPresentationEntitiesTimetablesDisambiguationOption where
  parseJSON = A.withObject "TflApiPresentationEntitiesTimetablesDisambiguationOption" $ \o ->
    TflApiPresentationEntitiesTimetablesDisambiguationOption
      <$> (o .:? "description")
      <*> (o .:? "uri")

-- | ToJSON TflApiPresentationEntitiesTimetablesDisambiguationOption
instance A.ToJSON TflApiPresentationEntitiesTimetablesDisambiguationOption where
  toJSON TflApiPresentationEntitiesTimetablesDisambiguationOption {..} =
   _omitNulls
      [ "description" .= tflApiPresentationEntitiesTimetablesDisambiguationOptionDescription
      , "uri" .= tflApiPresentationEntitiesTimetablesDisambiguationOptionUri
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTimetablesDisambiguationOption' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTimetablesDisambiguationOption
  :: TflApiPresentationEntitiesTimetablesDisambiguationOption
mkTflApiPresentationEntitiesTimetablesDisambiguationOption =
  TflApiPresentationEntitiesTimetablesDisambiguationOption
  { tflApiPresentationEntitiesTimetablesDisambiguationOptionDescription = Nothing
  , tflApiPresentationEntitiesTimetablesDisambiguationOptionUri = Nothing
  }

-- ** TflApiPresentationEntitiesTrainLoading
-- | TflApiPresentationEntitiesTrainLoading
data TflApiPresentationEntitiesTrainLoading = TflApiPresentationEntitiesTrainLoading
  { tflApiPresentationEntitiesTrainLoadingLine :: !(Maybe Text) -- ^ "line" - The Line Name e.g. \&quot;Victoria\&quot;
  , tflApiPresentationEntitiesTrainLoadingLineDirection :: !(Maybe Text) -- ^ "lineDirection" - Direction of the Line e.g. NB, SB, WB etc.
  , tflApiPresentationEntitiesTrainLoadingPlatformDirection :: !(Maybe Text) -- ^ "platformDirection" - Direction displayed on the platform e.g. NB, SB, WB etc.
  , tflApiPresentationEntitiesTrainLoadingDirection :: !(Maybe Text) -- ^ "direction" - Direction in regards to Journey Planner i.e. inbound or outbound
  , tflApiPresentationEntitiesTrainLoadingNaptanTo :: !(Maybe Text) -- ^ "naptanTo" - Naptan of the adjacent station
  , tflApiPresentationEntitiesTrainLoadingTimeSlice :: !(Maybe Text) -- ^ "timeSlice" - Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
  , tflApiPresentationEntitiesTrainLoadingValue :: !(Maybe Int) -- ^ "value" - Scale between 1-6,                1 &#x3D; Very quiet, 2 &#x3D; Quiet, 3 &#x3D; Fairly busy, 4 &#x3D; Busy, 5 &#x3D; Very busy, 6 &#x3D; Exceptionally busy
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTrainLoading
instance A.FromJSON TflApiPresentationEntitiesTrainLoading where
  parseJSON = A.withObject "TflApiPresentationEntitiesTrainLoading" $ \o ->
    TflApiPresentationEntitiesTrainLoading
      <$> (o .:? "line")
      <*> (o .:? "lineDirection")
      <*> (o .:? "platformDirection")
      <*> (o .:? "direction")
      <*> (o .:? "naptanTo")
      <*> (o .:? "timeSlice")
      <*> (o .:? "value")

-- | ToJSON TflApiPresentationEntitiesTrainLoading
instance A.ToJSON TflApiPresentationEntitiesTrainLoading where
  toJSON TflApiPresentationEntitiesTrainLoading {..} =
   _omitNulls
      [ "line" .= tflApiPresentationEntitiesTrainLoadingLine
      , "lineDirection" .= tflApiPresentationEntitiesTrainLoadingLineDirection
      , "platformDirection" .= tflApiPresentationEntitiesTrainLoadingPlatformDirection
      , "direction" .= tflApiPresentationEntitiesTrainLoadingDirection
      , "naptanTo" .= tflApiPresentationEntitiesTrainLoadingNaptanTo
      , "timeSlice" .= tflApiPresentationEntitiesTrainLoadingTimeSlice
      , "value" .= tflApiPresentationEntitiesTrainLoadingValue
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTrainLoading' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTrainLoading
  :: TflApiPresentationEntitiesTrainLoading
mkTflApiPresentationEntitiesTrainLoading =
  TflApiPresentationEntitiesTrainLoading
  { tflApiPresentationEntitiesTrainLoadingLine = Nothing
  , tflApiPresentationEntitiesTrainLoadingLineDirection = Nothing
  , tflApiPresentationEntitiesTrainLoadingPlatformDirection = Nothing
  , tflApiPresentationEntitiesTrainLoadingDirection = Nothing
  , tflApiPresentationEntitiesTrainLoadingNaptanTo = Nothing
  , tflApiPresentationEntitiesTrainLoadingTimeSlice = Nothing
  , tflApiPresentationEntitiesTrainLoadingValue = Nothing
  }

-- ** TflApiPresentationEntitiesTwentyFourHourClockTime
-- | TflApiPresentationEntitiesTwentyFourHourClockTime
data TflApiPresentationEntitiesTwentyFourHourClockTime = TflApiPresentationEntitiesTwentyFourHourClockTime
  { tflApiPresentationEntitiesTwentyFourHourClockTimeHour :: !(Maybe Text) -- ^ "hour"
  , tflApiPresentationEntitiesTwentyFourHourClockTimeMinute :: !(Maybe Text) -- ^ "minute"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesTwentyFourHourClockTime
instance A.FromJSON TflApiPresentationEntitiesTwentyFourHourClockTime where
  parseJSON = A.withObject "TflApiPresentationEntitiesTwentyFourHourClockTime" $ \o ->
    TflApiPresentationEntitiesTwentyFourHourClockTime
      <$> (o .:? "hour")
      <*> (o .:? "minute")

-- | ToJSON TflApiPresentationEntitiesTwentyFourHourClockTime
instance A.ToJSON TflApiPresentationEntitiesTwentyFourHourClockTime where
  toJSON TflApiPresentationEntitiesTwentyFourHourClockTime {..} =
   _omitNulls
      [ "hour" .= tflApiPresentationEntitiesTwentyFourHourClockTimeHour
      , "minute" .= tflApiPresentationEntitiesTwentyFourHourClockTimeMinute
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesTwentyFourHourClockTime' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesTwentyFourHourClockTime
  :: TflApiPresentationEntitiesTwentyFourHourClockTime
mkTflApiPresentationEntitiesTwentyFourHourClockTime =
  TflApiPresentationEntitiesTwentyFourHourClockTime
  { tflApiPresentationEntitiesTwentyFourHourClockTimeHour = Nothing
  , tflApiPresentationEntitiesTwentyFourHourClockTimeMinute = Nothing
  }

-- ** TflApiPresentationEntitiesValidityPeriod
-- | TflApiPresentationEntitiesValidityPeriod
-- Represents a period for which a planned works is valid.
data TflApiPresentationEntitiesValidityPeriod = TflApiPresentationEntitiesValidityPeriod
  { tflApiPresentationEntitiesValidityPeriodFromDate :: !(Maybe DateTime) -- ^ "fromDate" - Gets or sets the start date.
  , tflApiPresentationEntitiesValidityPeriodToDate :: !(Maybe DateTime) -- ^ "toDate" - Gets or sets the end date.
  , tflApiPresentationEntitiesValidityPeriodIsNow :: !(Maybe Bool) -- ^ "isNow" - If true is a realtime status rather than planned or info
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TflApiPresentationEntitiesValidityPeriod
instance A.FromJSON TflApiPresentationEntitiesValidityPeriod where
  parseJSON = A.withObject "TflApiPresentationEntitiesValidityPeriod" $ \o ->
    TflApiPresentationEntitiesValidityPeriod
      <$> (o .:? "fromDate")
      <*> (o .:? "toDate")
      <*> (o .:? "isNow")

-- | ToJSON TflApiPresentationEntitiesValidityPeriod
instance A.ToJSON TflApiPresentationEntitiesValidityPeriod where
  toJSON TflApiPresentationEntitiesValidityPeriod {..} =
   _omitNulls
      [ "fromDate" .= tflApiPresentationEntitiesValidityPeriodFromDate
      , "toDate" .= tflApiPresentationEntitiesValidityPeriodToDate
      , "isNow" .= tflApiPresentationEntitiesValidityPeriodIsNow
      ]


-- | Construct a value of type 'TflApiPresentationEntitiesValidityPeriod' (by applying it's required fields, if any)
mkTflApiPresentationEntitiesValidityPeriod
  :: TflApiPresentationEntitiesValidityPeriod
mkTflApiPresentationEntitiesValidityPeriod =
  TflApiPresentationEntitiesValidityPeriod
  { tflApiPresentationEntitiesValidityPeriodFromDate = Nothing
  , tflApiPresentationEntitiesValidityPeriodToDate = Nothing
  , tflApiPresentationEntitiesValidityPeriodIsNow = Nothing
  }


-- * Enums


-- ** E'Category

-- | Enum of 'Text' . 
-- Gets or sets the category of this dispruption.
data E'Category
  = E'Category'Undefined -- ^ @"Undefined"@
  | E'Category'RealTime -- ^ @"RealTime"@
  | E'Category'PlannedWork -- ^ @"PlannedWork"@
  | E'Category'Information -- ^ @"Information"@
  | E'Category'Event -- ^ @"Event"@
  | E'Category'Crowding -- ^ @"Crowding"@
  | E'Category'StatusAlert -- ^ @"StatusAlert"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Category where toJSON = A.toJSON . fromE'Category
instance A.FromJSON E'Category where parseJSON o = P.either P.fail (pure . P.id) . toE'Category =<< A.parseJSON o
instance WH.ToHttpApiData E'Category where toQueryParam = WH.toQueryParam . fromE'Category
instance WH.FromHttpApiData E'Category where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Category
instance MimeRender MimeMultipartFormData E'Category where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Category' enum
fromE'Category :: E'Category -> Text
fromE'Category = \case
  E'Category'Undefined -> "Undefined"
  E'Category'RealTime -> "RealTime"
  E'Category'PlannedWork -> "PlannedWork"
  E'Category'Information -> "Information"
  E'Category'Event -> "Event"
  E'Category'Crowding -> "Crowding"
  E'Category'StatusAlert -> "StatusAlert"

-- | parse 'E'Category' enum
toE'Category :: Text -> P.Either String E'Category
toE'Category = \case
  "Undefined" -> P.Right E'Category'Undefined
  "RealTime" -> P.Right E'Category'RealTime
  "PlannedWork" -> P.Right E'Category'PlannedWork
  "Information" -> P.Right E'Category'Information
  "Event" -> P.Right E'Category'Event
  "Crowding" -> P.Right E'Category'Crowding
  "StatusAlert" -> P.Right E'Category'StatusAlert
  s -> P.Left $ "toE'Category: enum parse failure: " P.++ P.show s


-- ** E'CyclePreference

-- | Enum of 'Text'
data E'CyclePreference
  = E'CyclePreference'None -- ^ @"None"@
  | E'CyclePreference'LeaveAtStation -- ^ @"LeaveAtStation"@
  | E'CyclePreference'TakeOnTransport -- ^ @"TakeOnTransport"@
  | E'CyclePreference'AllTheWay -- ^ @"AllTheWay"@
  | E'CyclePreference'CycleHire -- ^ @"CycleHire"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'CyclePreference where toJSON = A.toJSON . fromE'CyclePreference
instance A.FromJSON E'CyclePreference where parseJSON o = P.either P.fail (pure . P.id) . toE'CyclePreference =<< A.parseJSON o
instance WH.ToHttpApiData E'CyclePreference where toQueryParam = WH.toQueryParam . fromE'CyclePreference
instance WH.FromHttpApiData E'CyclePreference where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'CyclePreference
instance MimeRender MimeMultipartFormData E'CyclePreference where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'CyclePreference' enum
fromE'CyclePreference :: E'CyclePreference -> Text
fromE'CyclePreference = \case
  E'CyclePreference'None -> "None"
  E'CyclePreference'LeaveAtStation -> "LeaveAtStation"
  E'CyclePreference'TakeOnTransport -> "TakeOnTransport"
  E'CyclePreference'AllTheWay -> "AllTheWay"
  E'CyclePreference'CycleHire -> "CycleHire"

-- | parse 'E'CyclePreference' enum
toE'CyclePreference :: Text -> P.Either String E'CyclePreference
toE'CyclePreference = \case
  "None" -> P.Right E'CyclePreference'None
  "LeaveAtStation" -> P.Right E'CyclePreference'LeaveAtStation
  "TakeOnTransport" -> P.Right E'CyclePreference'TakeOnTransport
  "AllTheWay" -> P.Right E'CyclePreference'AllTheWay
  "CycleHire" -> P.Right E'CyclePreference'CycleHire
  s -> P.Left $ "toE'CyclePreference: enum parse failure: " P.++ P.show s


-- ** E'DateTimeType

-- | Enum of 'Text'
data E'DateTimeType
  = E'DateTimeType'Arriving -- ^ @"Arriving"@
  | E'DateTimeType'Departing -- ^ @"Departing"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'DateTimeType where toJSON = A.toJSON . fromE'DateTimeType
instance A.FromJSON E'DateTimeType where parseJSON o = P.either P.fail (pure . P.id) . toE'DateTimeType =<< A.parseJSON o
instance WH.ToHttpApiData E'DateTimeType where toQueryParam = WH.toQueryParam . fromE'DateTimeType
instance WH.FromHttpApiData E'DateTimeType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'DateTimeType
instance MimeRender MimeMultipartFormData E'DateTimeType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'DateTimeType' enum
fromE'DateTimeType :: E'DateTimeType -> Text
fromE'DateTimeType = \case
  E'DateTimeType'Arriving -> "Arriving"
  E'DateTimeType'Departing -> "Departing"

-- | parse 'E'DateTimeType' enum
toE'DateTimeType :: Text -> P.Either String E'DateTimeType
toE'DateTimeType = \case
  "Arriving" -> P.Right E'DateTimeType'Arriving
  "Departing" -> P.Right E'DateTimeType'Departing
  s -> P.Left $ "toE'DateTimeType: enum parse failure: " P.++ P.show s


-- ** E'DepartureStatus

-- | Enum of 'Text' . 
-- Status of departure
data E'DepartureStatus
  = E'DepartureStatus'OnTime -- ^ @"OnTime"@
  | E'DepartureStatus'Delayed -- ^ @"Delayed"@
  | E'DepartureStatus'Cancelled -- ^ @"Cancelled"@
  | E'DepartureStatus'NotStoppingAtStation -- ^ @"NotStoppingAtStation"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'DepartureStatus where toJSON = A.toJSON . fromE'DepartureStatus
instance A.FromJSON E'DepartureStatus where parseJSON o = P.either P.fail (pure . P.id) . toE'DepartureStatus =<< A.parseJSON o
instance WH.ToHttpApiData E'DepartureStatus where toQueryParam = WH.toQueryParam . fromE'DepartureStatus
instance WH.FromHttpApiData E'DepartureStatus where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'DepartureStatus
instance MimeRender MimeMultipartFormData E'DepartureStatus where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'DepartureStatus' enum
fromE'DepartureStatus :: E'DepartureStatus -> Text
fromE'DepartureStatus = \case
  E'DepartureStatus'OnTime -> "OnTime"
  E'DepartureStatus'Delayed -> "Delayed"
  E'DepartureStatus'Cancelled -> "Cancelled"
  E'DepartureStatus'NotStoppingAtStation -> "NotStoppingAtStation"

-- | parse 'E'DepartureStatus' enum
toE'DepartureStatus :: Text -> P.Either String E'DepartureStatus
toE'DepartureStatus = \case
  "OnTime" -> P.Right E'DepartureStatus'OnTime
  "Delayed" -> P.Right E'DepartureStatus'Delayed
  "Cancelled" -> P.Right E'DepartureStatus'Cancelled
  "NotStoppingAtStation" -> P.Right E'DepartureStatus'NotStoppingAtStation
  s -> P.Left $ "toE'DepartureStatus: enum parse failure: " P.++ P.show s


-- ** E'Direction

-- | Enum of 'Text'
data E'Direction
  = E'Direction'Inbound -- ^ @"inbound"@
  | E'Direction'Outbound -- ^ @"outbound"@
  | E'Direction'All -- ^ @"all"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Direction where toJSON = A.toJSON . fromE'Direction
instance A.FromJSON E'Direction where parseJSON o = P.either P.fail (pure . P.id) . toE'Direction =<< A.parseJSON o
instance WH.ToHttpApiData E'Direction where toQueryParam = WH.toQueryParam . fromE'Direction
instance WH.FromHttpApiData E'Direction where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Direction
instance MimeRender MimeMultipartFormData E'Direction where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Direction' enum
fromE'Direction :: E'Direction -> Text
fromE'Direction = \case
  E'Direction'Inbound -> "inbound"
  E'Direction'Outbound -> "outbound"
  E'Direction'All -> "all"

-- | parse 'E'Direction' enum
toE'Direction :: Text -> P.Either String E'Direction
toE'Direction = \case
  "inbound" -> P.Right E'Direction'Inbound
  "outbound" -> P.Right E'Direction'Outbound
  "all" -> P.Right E'Direction'All
  s -> P.Left $ "toE'Direction: enum parse failure: " P.++ P.show s


-- ** E'Direction2

-- | Enum of 'Text'
data E'Direction2
  = E'Direction2'Average -- ^ @"Average"@
  | E'Direction2'From -- ^ @"From"@
  | E'Direction2'To -- ^ @"To"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Direction2 where toJSON = A.toJSON . fromE'Direction2
instance A.FromJSON E'Direction2 where parseJSON o = P.either P.fail (pure . P.id) . toE'Direction2 =<< A.parseJSON o
instance WH.ToHttpApiData E'Direction2 where toQueryParam = WH.toQueryParam . fromE'Direction2
instance WH.FromHttpApiData E'Direction2 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Direction2
instance MimeRender MimeMultipartFormData E'Direction2 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Direction2' enum
fromE'Direction2 :: E'Direction2 -> Text
fromE'Direction2 = \case
  E'Direction2'Average -> "Average"
  E'Direction2'From -> "From"
  E'Direction2'To -> "To"

-- | parse 'E'Direction2' enum
toE'Direction2 :: Text -> P.Either String E'Direction2
toE'Direction2 = \case
  "Average" -> P.Right E'Direction2'Average
  "From" -> P.Right E'Direction2'From
  "To" -> P.Right E'Direction2'To
  s -> P.Left $ "toE'Direction2: enum parse failure: " P.++ P.show s


-- ** E'FareCategory

-- | Enum of 'Text'
data E'FareCategory
  = E'FareCategory'Cash -- ^ @"Cash"@
  | E'FareCategory'Oyster -- ^ @"Oyster"@
  | E'FareCategory'Contactless -- ^ @"Contactless"@
  | E'FareCategory'ContactlessOnly -- ^ @"ContactlessOnly"@
  | E'FareCategory'All -- ^ @"All"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'FareCategory where toJSON = A.toJSON . fromE'FareCategory
instance A.FromJSON E'FareCategory where parseJSON o = P.either P.fail (pure . P.id) . toE'FareCategory =<< A.parseJSON o
instance WH.ToHttpApiData E'FareCategory where toQueryParam = WH.toQueryParam . fromE'FareCategory
instance WH.FromHttpApiData E'FareCategory where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'FareCategory
instance MimeRender MimeMultipartFormData E'FareCategory where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'FareCategory' enum
fromE'FareCategory :: E'FareCategory -> Text
fromE'FareCategory = \case
  E'FareCategory'Cash -> "Cash"
  E'FareCategory'Oyster -> "Oyster"
  E'FareCategory'Contactless -> "Contactless"
  E'FareCategory'ContactlessOnly -> "ContactlessOnly"
  E'FareCategory'All -> "All"

-- | parse 'E'FareCategory' enum
toE'FareCategory :: Text -> P.Either String E'FareCategory
toE'FareCategory = \case
  "Cash" -> P.Right E'FareCategory'Cash
  "Oyster" -> P.Right E'FareCategory'Oyster
  "Contactless" -> P.Right E'FareCategory'Contactless
  "ContactlessOnly" -> P.Right E'FareCategory'ContactlessOnly
  "All" -> P.Right E'FareCategory'All
  s -> P.Left $ "toE'FareCategory: enum parse failure: " P.++ P.show s


-- ** E'Inner

-- | Enum of 'Text'
data E'Inner
  = E'Inner'NoRequirements -- ^ @"NoRequirements"@
  | E'Inner'NoSolidStairs -- ^ @"NoSolidStairs"@
  | E'Inner'NoEscalators -- ^ @"NoEscalators"@
  | E'Inner'NoElevators -- ^ @"NoElevators"@
  | E'Inner'StepFreeToVehicle -- ^ @"StepFreeToVehicle"@
  | E'Inner'StepFreeToPlatform -- ^ @"StepFreeToPlatform"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner where toJSON = A.toJSON . fromE'Inner
instance A.FromJSON E'Inner where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner where toQueryParam = WH.toQueryParam . fromE'Inner
instance WH.FromHttpApiData E'Inner where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner
instance MimeRender MimeMultipartFormData E'Inner where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner' enum
fromE'Inner :: E'Inner -> Text
fromE'Inner = \case
  E'Inner'NoRequirements -> "NoRequirements"
  E'Inner'NoSolidStairs -> "NoSolidStairs"
  E'Inner'NoEscalators -> "NoEscalators"
  E'Inner'NoElevators -> "NoElevators"
  E'Inner'StepFreeToVehicle -> "StepFreeToVehicle"
  E'Inner'StepFreeToPlatform -> "StepFreeToPlatform"

-- | parse 'E'Inner' enum
toE'Inner :: Text -> P.Either String E'Inner
toE'Inner = \case
  "NoRequirements" -> P.Right E'Inner'NoRequirements
  "NoSolidStairs" -> P.Right E'Inner'NoSolidStairs
  "NoEscalators" -> P.Right E'Inner'NoEscalators
  "NoElevators" -> P.Right E'Inner'NoElevators
  "StepFreeToVehicle" -> P.Right E'Inner'StepFreeToVehicle
  "StepFreeToPlatform" -> P.Right E'Inner'StepFreeToPlatform
  s -> P.Left $ "toE'Inner: enum parse failure: " P.++ P.show s


-- ** E'Inner2

-- | Enum of 'Text'
data E'Inner2
  = E'Inner2'Easy -- ^ @"Easy"@
  | E'Inner2'Moderate -- ^ @"Moderate"@
  | E'Inner2'Fast -- ^ @"Fast"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Inner2 where toJSON = A.toJSON . fromE'Inner2
instance A.FromJSON E'Inner2 where parseJSON o = P.either P.fail (pure . P.id) . toE'Inner2 =<< A.parseJSON o
instance WH.ToHttpApiData E'Inner2 where toQueryParam = WH.toQueryParam . fromE'Inner2
instance WH.FromHttpApiData E'Inner2 where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Inner2
instance MimeRender MimeMultipartFormData E'Inner2 where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Inner2' enum
fromE'Inner2 :: E'Inner2 -> Text
fromE'Inner2 = \case
  E'Inner2'Easy -> "Easy"
  E'Inner2'Moderate -> "Moderate"
  E'Inner2'Fast -> "Fast"

-- | parse 'E'Inner2' enum
toE'Inner2 :: Text -> P.Either String E'Inner2
toE'Inner2 = \case
  "Easy" -> P.Right E'Inner2'Easy
  "Moderate" -> P.Right E'Inner2'Moderate
  "Fast" -> P.Right E'Inner2'Fast
  s -> P.Left $ "toE'Inner2: enum parse failure: " P.++ P.show s


-- ** E'JourneyPreference

-- | Enum of 'Text'
data E'JourneyPreference
  = E'JourneyPreference'LeastInterchange -- ^ @"LeastInterchange"@
  | E'JourneyPreference'LeastTime -- ^ @"LeastTime"@
  | E'JourneyPreference'LeastWalking -- ^ @"LeastWalking"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'JourneyPreference where toJSON = A.toJSON . fromE'JourneyPreference
instance A.FromJSON E'JourneyPreference where parseJSON o = P.either P.fail (pure . P.id) . toE'JourneyPreference =<< A.parseJSON o
instance WH.ToHttpApiData E'JourneyPreference where toQueryParam = WH.toQueryParam . fromE'JourneyPreference
instance WH.FromHttpApiData E'JourneyPreference where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'JourneyPreference
instance MimeRender MimeMultipartFormData E'JourneyPreference where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'JourneyPreference' enum
fromE'JourneyPreference :: E'JourneyPreference -> Text
fromE'JourneyPreference = \case
  E'JourneyPreference'LeastInterchange -> "LeastInterchange"
  E'JourneyPreference'LeastTime -> "LeastTime"
  E'JourneyPreference'LeastWalking -> "LeastWalking"

-- | parse 'E'JourneyPreference' enum
toE'JourneyPreference :: Text -> P.Either String E'JourneyPreference
toE'JourneyPreference = \case
  "LeastInterchange" -> P.Right E'JourneyPreference'LeastInterchange
  "LeastTime" -> P.Right E'JourneyPreference'LeastTime
  "LeastWalking" -> P.Right E'JourneyPreference'LeastWalking
  s -> P.Left $ "toE'JourneyPreference: enum parse failure: " P.++ P.show s


-- ** E'Phase

-- | Enum of 'Text'
data E'Phase
  = E'Phase'Unscoped -- ^ @"Unscoped"@
  | E'Phase'Concept -- ^ @"Concept"@
  | E'Phase'ConsultationEnded -- ^ @"ConsultationEnded"@
  | E'Phase'Consultation -- ^ @"Consultation"@
  | E'Phase'Construction -- ^ @"Construction"@
  | E'Phase'Complete -- ^ @"Complete"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Phase where toJSON = A.toJSON . fromE'Phase
instance A.FromJSON E'Phase where parseJSON o = P.either P.fail (pure . P.id) . toE'Phase =<< A.parseJSON o
instance WH.ToHttpApiData E'Phase where toQueryParam = WH.toQueryParam . fromE'Phase
instance WH.FromHttpApiData E'Phase where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Phase
instance MimeRender MimeMultipartFormData E'Phase where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Phase' enum
fromE'Phase :: E'Phase -> Text
fromE'Phase = \case
  E'Phase'Unscoped -> "Unscoped"
  E'Phase'Concept -> "Concept"
  E'Phase'ConsultationEnded -> "ConsultationEnded"
  E'Phase'Consultation -> "Consultation"
  E'Phase'Construction -> "Construction"
  E'Phase'Complete -> "Complete"

-- | parse 'E'Phase' enum
toE'Phase :: Text -> P.Either String E'Phase
toE'Phase = \case
  "Unscoped" -> P.Right E'Phase'Unscoped
  "Concept" -> P.Right E'Phase'Concept
  "ConsultationEnded" -> P.Right E'Phase'ConsultationEnded
  "Consultation" -> P.Right E'Phase'Consultation
  "Construction" -> P.Right E'Phase'Construction
  "Complete" -> P.Right E'Phase'Complete
  s -> P.Left $ "toE'Phase: enum parse failure: " P.++ P.show s


-- ** E'RouteType

-- | Enum of 'Text' . 
-- Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
data E'RouteType
  = E'RouteType'Unknown -- ^ @"Unknown"@
  | E'RouteType'All -- ^ @"All"@
  | E'RouteType'Cycle_Superhighways -- ^ @"Cycle Superhighways"@
  | E'RouteType'Quietways -- ^ @"Quietways"@
  | E'RouteType'Cycleways -- ^ @"Cycleways"@
  | E'RouteType'Mini_Hollands -- ^ @"Mini-Hollands"@
  | E'RouteType'Central_London_Grid -- ^ @"Central London Grid"@
  | E'RouteType'Streetspace_Route -- ^ @"Streetspace Route"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'RouteType where toJSON = A.toJSON . fromE'RouteType
instance A.FromJSON E'RouteType where parseJSON o = P.either P.fail (pure . P.id) . toE'RouteType =<< A.parseJSON o
instance WH.ToHttpApiData E'RouteType where toQueryParam = WH.toQueryParam . fromE'RouteType
instance WH.FromHttpApiData E'RouteType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'RouteType
instance MimeRender MimeMultipartFormData E'RouteType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'RouteType' enum
fromE'RouteType :: E'RouteType -> Text
fromE'RouteType = \case
  E'RouteType'Unknown -> "Unknown"
  E'RouteType'All -> "All"
  E'RouteType'Cycle_Superhighways -> "Cycle Superhighways"
  E'RouteType'Quietways -> "Quietways"
  E'RouteType'Cycleways -> "Cycleways"
  E'RouteType'Mini_Hollands -> "Mini-Hollands"
  E'RouteType'Central_London_Grid -> "Central London Grid"
  E'RouteType'Streetspace_Route -> "Streetspace Route"

-- | parse 'E'RouteType' enum
toE'RouteType :: Text -> P.Either String E'RouteType
toE'RouteType = \case
  "Unknown" -> P.Right E'RouteType'Unknown
  "All" -> P.Right E'RouteType'All
  "Cycle Superhighways" -> P.Right E'RouteType'Cycle_Superhighways
  "Quietways" -> P.Right E'RouteType'Quietways
  "Cycleways" -> P.Right E'RouteType'Cycleways
  "Mini-Hollands" -> P.Right E'RouteType'Mini_Hollands
  "Central London Grid" -> P.Right E'RouteType'Central_London_Grid
  "Streetspace Route" -> P.Right E'RouteType'Streetspace_Route
  s -> P.Left $ "toE'RouteType: enum parse failure: " P.++ P.show s


-- ** E'ServiceType

-- | Enum of 'Text'
data E'ServiceType
  = E'ServiceType'Regular -- ^ @"Regular"@
  | E'ServiceType'Night -- ^ @"Night"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'ServiceType where toJSON = A.toJSON . fromE'ServiceType
instance A.FromJSON E'ServiceType where parseJSON o = P.either P.fail (pure . P.id) . toE'ServiceType =<< A.parseJSON o
instance WH.ToHttpApiData E'ServiceType where toQueryParam = WH.toQueryParam . fromE'ServiceType
instance WH.FromHttpApiData E'ServiceType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'ServiceType
instance MimeRender MimeMultipartFormData E'ServiceType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'ServiceType' enum
fromE'ServiceType :: E'ServiceType -> Text
fromE'ServiceType = \case
  E'ServiceType'Regular -> "Regular"
  E'ServiceType'Night -> "Night"

-- | parse 'E'ServiceType' enum
toE'ServiceType :: Text -> P.Either String E'ServiceType
toE'ServiceType = \case
  "Regular" -> P.Right E'ServiceType'Regular
  "Night" -> P.Right E'ServiceType'Night
  s -> P.Left $ "toE'ServiceType: enum parse failure: " P.++ P.show s


-- ** E'SkyDirectionDescription

-- | Enum of 'Text'
data E'SkyDirectionDescription
  = E'SkyDirectionDescription'North -- ^ @"North"@
  | E'SkyDirectionDescription'NorthEast -- ^ @"NorthEast"@
  | E'SkyDirectionDescription'East -- ^ @"East"@
  | E'SkyDirectionDescription'SouthEast -- ^ @"SouthEast"@
  | E'SkyDirectionDescription'South -- ^ @"South"@
  | E'SkyDirectionDescription'SouthWest -- ^ @"SouthWest"@
  | E'SkyDirectionDescription'West -- ^ @"West"@
  | E'SkyDirectionDescription'NorthWest -- ^ @"NorthWest"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'SkyDirectionDescription where toJSON = A.toJSON . fromE'SkyDirectionDescription
instance A.FromJSON E'SkyDirectionDescription where parseJSON o = P.either P.fail (pure . P.id) . toE'SkyDirectionDescription =<< A.parseJSON o
instance WH.ToHttpApiData E'SkyDirectionDescription where toQueryParam = WH.toQueryParam . fromE'SkyDirectionDescription
instance WH.FromHttpApiData E'SkyDirectionDescription where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'SkyDirectionDescription
instance MimeRender MimeMultipartFormData E'SkyDirectionDescription where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'SkyDirectionDescription' enum
fromE'SkyDirectionDescription :: E'SkyDirectionDescription -> Text
fromE'SkyDirectionDescription = \case
  E'SkyDirectionDescription'North -> "North"
  E'SkyDirectionDescription'NorthEast -> "NorthEast"
  E'SkyDirectionDescription'East -> "East"
  E'SkyDirectionDescription'SouthEast -> "SouthEast"
  E'SkyDirectionDescription'South -> "South"
  E'SkyDirectionDescription'SouthWest -> "SouthWest"
  E'SkyDirectionDescription'West -> "West"
  E'SkyDirectionDescription'NorthWest -> "NorthWest"

-- | parse 'E'SkyDirectionDescription' enum
toE'SkyDirectionDescription :: Text -> P.Either String E'SkyDirectionDescription
toE'SkyDirectionDescription = \case
  "North" -> P.Right E'SkyDirectionDescription'North
  "NorthEast" -> P.Right E'SkyDirectionDescription'NorthEast
  "East" -> P.Right E'SkyDirectionDescription'East
  "SouthEast" -> P.Right E'SkyDirectionDescription'SouthEast
  "South" -> P.Right E'SkyDirectionDescription'South
  "SouthWest" -> P.Right E'SkyDirectionDescription'SouthWest
  "West" -> P.Right E'SkyDirectionDescription'West
  "NorthWest" -> P.Right E'SkyDirectionDescription'NorthWest
  s -> P.Left $ "toE'SkyDirectionDescription: enum parse failure: " P.++ P.show s


-- ** E'Status

-- | Enum of 'Text' . 
-- Cycle route status i.e Proposed, Existing etc
data E'Status
  = E'Status'Unknown -- ^ @"Unknown"@
  | E'Status'All -- ^ @"All"@
  | E'Status'Open -- ^ @"Open"@
  | E'Status'In_Progress -- ^ @"In Progress"@
  | E'Status'Planned -- ^ @"Planned"@
  | E'Status'Planned___Subject_to_feasibility_and_consultation_ -- ^ @"Planned - Subject to feasibility and consultation."@
  | E'Status'Not_Open -- ^ @"Not Open"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Status where toJSON = A.toJSON . fromE'Status
instance A.FromJSON E'Status where parseJSON o = P.either P.fail (pure . P.id) . toE'Status =<< A.parseJSON o
instance WH.ToHttpApiData E'Status where toQueryParam = WH.toQueryParam . fromE'Status
instance WH.FromHttpApiData E'Status where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Status
instance MimeRender MimeMultipartFormData E'Status where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Status' enum
fromE'Status :: E'Status -> Text
fromE'Status = \case
  E'Status'Unknown -> "Unknown"
  E'Status'All -> "All"
  E'Status'Open -> "Open"
  E'Status'In_Progress -> "In Progress"
  E'Status'Planned -> "Planned"
  E'Status'Planned___Subject_to_feasibility_and_consultation_ -> "Planned - Subject to feasibility and consultation."
  E'Status'Not_Open -> "Not Open"

-- | parse 'E'Status' enum
toE'Status :: Text -> P.Either String E'Status
toE'Status = \case
  "Unknown" -> P.Right E'Status'Unknown
  "All" -> P.Right E'Status'All
  "Open" -> P.Right E'Status'Open
  "In Progress" -> P.Right E'Status'In_Progress
  "Planned" -> P.Right E'Status'Planned
  "Planned - Subject to feasibility and consultation." -> P.Right E'Status'Planned___Subject_to_feasibility_and_consultation_
  "Not Open" -> P.Right E'Status'Not_Open
  s -> P.Left $ "toE'Status: enum parse failure: " P.++ P.show s


-- ** E'TrackType

-- | Enum of 'Text'
data E'TrackType
  = E'TrackType'CycleSuperHighway -- ^ @"CycleSuperHighway"@
  | E'TrackType'CanalTowpath -- ^ @"CanalTowpath"@
  | E'TrackType'QuietRoad -- ^ @"QuietRoad"@
  | E'TrackType'ProvisionForCyclists -- ^ @"ProvisionForCyclists"@
  | E'TrackType'BusyRoads -- ^ @"BusyRoads"@
  | E'TrackType'None -- ^ @"None"@
  | E'TrackType'PushBike -- ^ @"PushBike"@
  | E'TrackType'Quietway -- ^ @"Quietway"@
  | E'TrackType'ShuttleBus -- ^ @"ShuttleBus"@
  | E'TrackType'Ferry -- ^ @"Ferry"@
  | E'TrackType'CableCar -- ^ @"CableCar"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'TrackType where toJSON = A.toJSON . fromE'TrackType
instance A.FromJSON E'TrackType where parseJSON o = P.either P.fail (pure . P.id) . toE'TrackType =<< A.parseJSON o
instance WH.ToHttpApiData E'TrackType where toQueryParam = WH.toQueryParam . fromE'TrackType
instance WH.FromHttpApiData E'TrackType where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'TrackType
instance MimeRender MimeMultipartFormData E'TrackType where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'TrackType' enum
fromE'TrackType :: E'TrackType -> Text
fromE'TrackType = \case
  E'TrackType'CycleSuperHighway -> "CycleSuperHighway"
  E'TrackType'CanalTowpath -> "CanalTowpath"
  E'TrackType'QuietRoad -> "QuietRoad"
  E'TrackType'ProvisionForCyclists -> "ProvisionForCyclists"
  E'TrackType'BusyRoads -> "BusyRoads"
  E'TrackType'None -> "None"
  E'TrackType'PushBike -> "PushBike"
  E'TrackType'Quietway -> "Quietway"
  E'TrackType'ShuttleBus -> "ShuttleBus"
  E'TrackType'Ferry -> "Ferry"
  E'TrackType'CableCar -> "CableCar"

-- | parse 'E'TrackType' enum
toE'TrackType :: Text -> P.Either String E'TrackType
toE'TrackType = \case
  "CycleSuperHighway" -> P.Right E'TrackType'CycleSuperHighway
  "CanalTowpath" -> P.Right E'TrackType'CanalTowpath
  "QuietRoad" -> P.Right E'TrackType'QuietRoad
  "ProvisionForCyclists" -> P.Right E'TrackType'ProvisionForCyclists
  "BusyRoads" -> P.Right E'TrackType'BusyRoads
  "None" -> P.Right E'TrackType'None
  "PushBike" -> P.Right E'TrackType'PushBike
  "Quietway" -> P.Right E'TrackType'Quietway
  "ShuttleBus" -> P.Right E'TrackType'ShuttleBus
  "Ferry" -> P.Right E'TrackType'Ferry
  "CableCar" -> P.Right E'TrackType'CableCar
  s -> P.Left $ "toE'TrackType: enum parse failure: " P.++ P.show s


-- ** E'Type

-- | Enum of 'Text'
data E'Type
  = E'Type'Normal -- ^ @"Normal"@
  | E'Type'FrequencyHours -- ^ @"FrequencyHours"@
  | E'Type'FrequencyMinutes -- ^ @"FrequencyMinutes"@
  | E'Type'Unknown -- ^ @"Unknown"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'Type where toJSON = A.toJSON . fromE'Type
instance A.FromJSON E'Type where parseJSON o = P.either P.fail (pure . P.id) . toE'Type =<< A.parseJSON o
instance WH.ToHttpApiData E'Type where toQueryParam = WH.toQueryParam . fromE'Type
instance WH.FromHttpApiData E'Type where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'Type
instance MimeRender MimeMultipartFormData E'Type where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'Type' enum
fromE'Type :: E'Type -> Text
fromE'Type = \case
  E'Type'Normal -> "Normal"
  E'Type'FrequencyHours -> "FrequencyHours"
  E'Type'FrequencyMinutes -> "FrequencyMinutes"
  E'Type'Unknown -> "Unknown"

-- | parse 'E'Type' enum
toE'Type :: Text -> P.Either String E'Type
toE'Type = \case
  "Normal" -> P.Right E'Type'Normal
  "FrequencyHours" -> P.Right E'Type'FrequencyHours
  "FrequencyMinutes" -> P.Right E'Type'FrequencyMinutes
  "Unknown" -> P.Right E'Type'Unknown
  s -> P.Left $ "toE'Type: enum parse failure: " P.++ P.show s


-- ** E'WalkingSpeed

-- | Enum of 'Text'
data E'WalkingSpeed
  = E'WalkingSpeed'Slow -- ^ @"Slow"@
  | E'WalkingSpeed'Average -- ^ @"Average"@
  | E'WalkingSpeed'Fast -- ^ @"Fast"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON E'WalkingSpeed where toJSON = A.toJSON . fromE'WalkingSpeed
instance A.FromJSON E'WalkingSpeed where parseJSON o = P.either P.fail (pure . P.id) . toE'WalkingSpeed =<< A.parseJSON o
instance WH.ToHttpApiData E'WalkingSpeed where toQueryParam = WH.toQueryParam . fromE'WalkingSpeed
instance WH.FromHttpApiData E'WalkingSpeed where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toE'WalkingSpeed
instance MimeRender MimeMultipartFormData E'WalkingSpeed where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'E'WalkingSpeed' enum
fromE'WalkingSpeed :: E'WalkingSpeed -> Text
fromE'WalkingSpeed = \case
  E'WalkingSpeed'Slow -> "Slow"
  E'WalkingSpeed'Average -> "Average"
  E'WalkingSpeed'Fast -> "Fast"

-- | parse 'E'WalkingSpeed' enum
toE'WalkingSpeed :: Text -> P.Either String E'WalkingSpeed
toE'WalkingSpeed = \case
  "Slow" -> P.Right E'WalkingSpeed'Slow
  "Average" -> P.Right E'WalkingSpeed'Average
  "Fast" -> P.Right E'WalkingSpeed'Fast
  s -> P.Left $ "toE'WalkingSpeed: enum parse failure: " P.++ P.show s


-- * Auth Methods

-- ** AuthApiKeyApiKey
data AuthApiKeyApiKey =
  AuthApiKeyApiKey Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyApiKey where
  applyAuthMethod _ a@(AuthApiKeyApiKey secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setQuery` toQuery ("app_key", Just secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req

-- ** AuthApiKeyAppId
data AuthApiKeyAppId =
  AuthApiKeyAppId Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyAppId where
  applyAuthMethod _ a@(AuthApiKeyAppId secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setQuery` toQuery ("app_id", Just secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req

